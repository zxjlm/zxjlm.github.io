<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zaxon</title>
  <icon>https://blog.harumonia.moe/icon.png</icon>
  <subtitle>Find the key of soul</subtitle>
  <link href="https://blog.harumonia.moe/atom.xml" rel="self"/>
  
  <link href="https://blog.harumonia.moe/"/>
  <updated>2023-01-30T14:10:21.773Z</updated>
  <id>https://blog.harumonia.moe/</id>
  
  <author>
    <name>harumonia</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>alfred 工作流开发</title>
    <link href="https://blog.harumonia.moe/2022-11-15-alfred-workflow-dev/"/>
    <id>https://blog.harumonia.moe/2022-11-15-alfred-workflow-dev/</id>
    <published>2022-11-15T15:12:24.000Z</published>
    <updated>2023-01-30T14:10:21.773Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.alfredapp.com/alfred-5-whats-new/&quot;&gt;Alfred&lt;/a&gt; 是一款 &lt;em&gt;MacOS&lt;/em&gt; 上用户基数较大的软件, 笔者主要是用它来取代原生的 &lt;em&gt;聚焦搜索&lt;/em&gt;, 除此之外, 最近开始研究它的 &lt;strong&gt;工作流(workflow)&lt;/strong&gt; 相关的功能.&lt;/p&gt;
&lt;p&gt;本篇就是实际展示一下如何开发一个 workflow. 使用的脚本语言是 &lt;em&gt;Python&lt;/em&gt; , 不过实际上任何脚本语言都可以完成开发工作.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2022-11-14-pytest_mock_counter</title>
    <link href="https://blog.harumonia.moe/2022-11-14-pytest-mock-counter/"/>
    <id>https://blog.harumonia.moe/2022-11-14-pytest-mock-counter/</id>
    <published>2022-11-15T11:20:44.000Z</published>
    <updated>2023-01-30T14:10:21.773Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇的目的是在 &lt;code&gt;Python&lt;/code&gt; 的 Test 框架中添加一个 &lt;strong&gt;mock 函数使用计数器&lt;/strong&gt; 的逻辑. 该计数器的目的是, 在调用第三方api接口时, 计算某一个流程中的调用次数是否合理. 在流程(或调用关系)比较复杂的时候实用性较高.&lt;/p&gt;</summary>
    
    
    
    <category term="源流清泉" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/"/>
    
    <category term="Python" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/Python/"/>
    
    
    <category term="Python" scheme="https://blog.harumonia.moe/tags/Python/"/>
    
    <category term="Test" scheme="https://blog.harumonia.moe/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>C3. Storage and Retrieval (更新中)</title>
    <link href="https://blog.harumonia.moe/2022-10-10-C3-Storage-and-Retrieval/"/>
    <id>https://blog.harumonia.moe/2022-10-10-C3-Storage-and-Retrieval/</id>
    <published>2022-10-10T17:22:24.000Z</published>
    <updated>2023-01-07T14:54:24.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;Data-Structure-That-Power-Your-Database&quot;&gt;&lt;a href=&quot;#Data-Structure-That-Power-Your-Database&quot; class=&quot;headerlink&quot; title=&quot;Data Structure That Power Your Database&quot;&gt;&lt;/a&gt;Data Structure That Power Your Database&lt;/h2&gt;&lt;p&gt;最简单的数据库是什么样子的?&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash &lt;/span&gt;
&lt;span class=&quot;token function-name function&quot;&gt;db_set&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;     
 &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;,&lt;span class=&quot;token variable&quot;&gt;$2&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; database 
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt; 

&lt;span class=&quot;token function-name function&quot;&gt;db_get&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;     
 &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;^&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;,&quot;&lt;/span&gt; database &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sed&lt;/span&gt; -e &lt;span class=&quot;token string&quot;&gt;&quot;s/^&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;,//&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tail&lt;/span&gt; -n &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; 
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如上所示, 我们完成了一个最简单的 &lt;strong&gt;kv 数据库&lt;/strong&gt;. 它的工作原理是: &lt;em&gt;db_set&lt;/em&gt; 在文件末尾追加一个 kv 对; 如果对某一个 key 进行更新, 那么新的记录会继续追加写入文件, 而非覆盖; &lt;em&gt;db_get&lt;/em&gt; 查询到最后(即最新)一条 key , 然后返回 value.&lt;/p&gt;
&lt;p&gt;这个数据库的&lt;strong&gt;写&lt;/strong&gt;效率极高 [ $O(1)$ ], 因为它单纯的就是向文件的末尾进行 &lt;code&gt;append&lt;/code&gt; 操作. 但是代价是它的&lt;strong&gt;读&lt;/strong&gt;效率非常低 [ $O(n)$ ].&lt;/p&gt;
&lt;p&gt;为了解决读效率低的问题, 可以使用 &lt;code&gt;索引&lt;/code&gt; , 索引本质上是一个依附于主体数据的额外的数据结构. 它可以作为一个整体地被添加或者删除. 但是索引又会引发一个新的问题, 索引的变化依托于 &lt;strong&gt;写(write)&lt;/strong&gt; 操作, 这意味着每次写都需要额外的一部分性能来更新这个数据结构, 如果数据结构过于复杂, 则会拖慢影响写的效率.&lt;/p&gt;
&lt;p&gt;本节主要就是围绕这些索引结构及其演进来展开.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hash Index&lt;/li&gt;
&lt;li&gt;SSTable&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2022.4~.7 生活小结</title>
    <link href="https://blog.harumonia.moe/2022-4-7/"/>
    <id>https://blog.harumonia.moe/2022-4-7/</id>
    <published>2022-07-17T21:17:19.000Z</published>
    <updated>2023-01-30T14:10:21.773Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h1 id=&quot;2022-4-7&quot;&gt;&lt;a href=&quot;#2022-4-7&quot; class=&quot;headerlink&quot; title=&quot;2022 4~7&quot;&gt;&lt;/a&gt;2022 4~7&lt;/h1&gt;&lt;h2 id=&quot;猫咪&quot;&gt;&lt;a href=&quot;#猫咪&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    <category term="起居杂录" scheme="https://blog.harumonia.moe/categories/%E8%B5%B7%E5%B1%85%E6%9D%82%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Django 生成 swagger 描述文件</title>
    <link href="https://blog.harumonia.moe/2022-06-24-django2swagger/"/>
    <id>https://blog.harumonia.moe/2022-06-24-django2swagger/</id>
    <published>2022-06-24T21:04:18.000Z</published>
    <updated>2023-01-30T14:10:21.773Z</updated>
    
    
    <summary type="html">&lt;p&gt;本篇主要是讲如何从 Django Api 生成出 swagger 描述文件. 它具有如下的特性:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于 inspect \ (ast) 采用静态分析的思路, 不依赖业务代码, 能够文档先于项目&lt;/li&gt;
&lt;li&gt;嵌入 Django CMD&lt;/li&gt;
&lt;li&gt;生成所用到的代码不会影响生产环境性能&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;之前接触过 &lt;a href=&quot;https://www.django-rest-framework.org/&quot;&gt;drf&lt;/a&gt;, 一个基于 Django 的 rest 框架. 由于深渡契合 rest, 有着严格的项目结构约束, 所以能够直接从代码文件生成出对应的 &lt;code&gt;swagger&lt;/code&gt; 描述文件. 但是这套代码是无法直接移殖到 Django 上面的, 因为后者的结构比较松散, 没有一种万金油的生成策略.&lt;/p&gt;
&lt;p&gt;所以, 本篇所提供的生成方案具有以下约束:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要封装一层装饰器, 并应用与所有需要生成文档的视图函数.&lt;/li&gt;
&lt;li&gt;依赖 pydantic (或者平替 cattrs \ schema 等)&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="源流清泉" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/"/>
    
    <category term="Python" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/Python/"/>
    
    
    <category term="Python" scheme="https://blog.harumonia.moe/tags/Python/"/>
    
    <category term="Django" scheme="https://blog.harumonia.moe/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Pycharm 和 VSCode 的 docker compose 开发模式</title>
    <link href="https://blog.harumonia.moe/2022-09-10-pycharm-docker-compose-dev/"/>
    <id>https://blog.harumonia.moe/2022-09-10-pycharm-docker-compose-dev/</id>
    <published>2022-05-28T17:53:00.000Z</published>
    <updated>2023-01-30T14:10:21.773Z</updated>
    
    
    <summary type="html">&lt;p&gt;本篇是关于如何在 Pycharm 和 VSCode 中使用 Docker Compose 的. 开篇比较啰嗦, 大抵是踩过的一些坑和问题的解决过程, 实际的配置内容自 &lt;a href=&quot;#%E8%BD%AC&quot;&gt;转&lt;/a&gt; 这一节开始.&lt;/p&gt;</summary>
    
    
    
    <category term="源流清泉" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/"/>
    
    <category term="Python" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/Python/"/>
    
    
    <category term="Python" scheme="https://blog.harumonia.moe/tags/Python/"/>
    
    <category term="Docker" scheme="https://blog.harumonia.moe/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>开发人员的Mac软件推荐列表(持续更新)</title>
    <link href="https://blog.harumonia.moe/new-mac-software-init/"/>
    <id>https://blog.harumonia.moe/new-mac-software-init/</id>
    <published>2022-05-14T15:35:54.000Z</published>
    <updated>2023-01-30T14:10:21.777Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;开发者新Mac配置推荐. 本列表以开源免费的软件为主, 以及部分实用的收费软件. 不会包含盗版软件获取途径与软件破解方法, 取而代之的是,</summary>
        
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker 镜像优化实践</title>
    <link href="https://blog.harumonia.moe/docker-image-smaller/"/>
    <id>https://blog.harumonia.moe/docker-image-smaller/</id>
    <published>2022-04-15T16:30:50.000Z</published>
    <updated>2023-01-30T14:10:21.773Z</updated>
    
    
    <summary type="html">&lt;p&gt;本篇主要的内容是如何对 Docker 镜像进行优化.&lt;/p&gt;
&lt;p&gt;优化总共分为以下几步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于项目优化&lt;ul&gt;
&lt;li&gt;缩减依赖包&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;基于Docker优化&lt;ul&gt;
&lt;li&gt;目录结构优化&lt;/li&gt;
&lt;li&gt;构建文件优化&lt;/li&gt;
&lt;li&gt;使用 &lt;strong&gt;dive&lt;/strong&gt; 进行镜像分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以及部分 &lt;strong&gt;Multi-stage build&lt;/strong&gt; 的内容.&lt;/p&gt;</summary>
    
    
    
    <category term="源流清泉" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/"/>
    
    <category term="Docker" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/Docker/"/>
    
    
    <category term="Docker" scheme="https://blog.harumonia.moe/tags/Docker/"/>
    
    <category term="optimization" scheme="https://blog.harumonia.moe/tags/optimization/"/>
    
  </entry>
  
  <entry>
    <title>doccano的使用注意</title>
    <link href="https://blog.harumonia.moe/doccano-use/"/>
    <id>https://blog.harumonia.moe/doccano-use/</id>
    <published>2022-04-12T20:58:22.000Z</published>
    <updated>2022-04-12T20:58:22.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本篇完成于 2022-04-12, 对应的 doccano 版本为 1.6.2.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/doccano/doccano&quot;&gt;doccano&lt;/a&gt;</summary>
        
      
    
    
    
    <category term="源流清泉" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/"/>
    
    <category term="Python" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/Python/"/>
    
    
    <category term="NLP" scheme="https://blog.harumonia.moe/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>API设计个人经验小结(施工中)</title>
    <link href="https://blog.harumonia.moe/design-better-api/"/>
    <id>https://blog.harumonia.moe/design-better-api/</id>
    <published>2022-03-29T09:50:04.000Z</published>
    <updated>2022-03-29T10:37:56.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;本篇基于笔者本人的实际工作经验, 总结了一些API的设计思路, 并提供了对应的参考资料以供深入研究.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>github同步代码片段的自动化脚本</title>
    <link href="https://blog.harumonia.moe/sync-code-snippet/"/>
    <id>https://blog.harumonia.moe/sync-code-snippet/</id>
    <published>2022-03-19T11:56:55.000Z</published>
    <updated>2022-04-01T11:10:55.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;工作快一年了, 积累了很多的 代码片段(&lt;code&gt;code snippet&lt;/code&gt;), 所以需要一个小工具来实现公司\家庭\开发\私人服务器等地方的代码片段的同步.&lt;/p&gt;
&lt;p&gt;同步的方法有很多, 我试过onedriver \ codemass \ gist 等手段, 但是各有各的缺点(后文补充), 所以最后还是选择了一个相对折中的方案, GitHub.&lt;/p&gt;
&lt;p&gt;本文主要介绍的就是如何通过自动化脚本实现GitHub代码片段的同步.&lt;/p&gt;
&lt;p&gt;代码环境:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;macos&lt;/li&gt;
&lt;li&gt;ubuntu&lt;/li&gt;
&lt;li&gt;centos&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="源流清泉" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/"/>
    
    <category term="Shell" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/Shell/"/>
    
    
    <category term="Trick" scheme="https://blog.harumonia.moe/tags/Trick/"/>
    
  </entry>
  
  <entry>
    <title>2022-2 莎翁与王尔德</title>
    <link href="https://blog.harumonia.moe/2022-2/"/>
    <id>https://blog.harumonia.moe/2022-2/</id>
    <published>2022-03-01T21:38:45.000Z</published>
    <updated>2022-03-01T21:38:45.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;日常生活.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>django-shell-inject-script</title>
    <link href="https://blog.harumonia.moe/django-shell-inject-script/"/>
    <id>https://blog.harumonia.moe/django-shell-inject-script/</id>
    <published>2022-02-17T16:23:41.000Z</published>
    <updated>2022-02-17T16:23:41.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;在 django, 或者其他的 python 交互式 shell 中, 有时候需要进入到 shell 中进行调试工作, 但是当调试的代码量较大， 或者调试十分地频繁的时候, 这种操作会变得十分地痛苦, 在线上环境中的调试尤甚.&lt;/p&gt;
&lt;p&gt;本篇会介绍一个注入脚本, 可以方便地在 python 的交互式 shell 中进行调试.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>一曲新词酒一杯</title>
    <link href="https://blog.harumonia.moe/a-love-affair-gone-by/"/>
    <id>https://blog.harumonia.moe/a-love-affair-gone-by/</id>
    <published>2022-02-04T22:14:39.000Z</published>
    <updated>2022-02-07T10:25:34.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;不胜人间一醉.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Ubuntu初始环境配置(持续更新中)</title>
    <link href="https://blog.harumonia.moe/2022-01-05-ubuntu-initial/"/>
    <id>https://blog.harumonia.moe/2022-01-05-ubuntu-initial/</id>
    <published>2022-01-05T10:19:25.000Z</published>
    <updated>2022-01-07T10:14:56.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;本想改造一下公司电脑的 Windows,后来干脆直接给电脑刷了个 Windows, 于是, 风扇不再是噪声源, 电脑不再是暖手宝, 一切都变得清爽了起来.&lt;/p&gt;
&lt;p&gt;唯一美中不足的是 ubuntu 上的软件和 Windows 还是有些差异的, 所以就有了本篇, 将各个常用的软件(从程序员的角度)的安装和坑点列出来.&lt;/p&gt;
&lt;p&gt;另附一个开发中的 &lt;a href=&quot;https://github.com/zxjlm/ubuntu-dev-setup-especially-for-cn&quot;&gt;Ubuntu 初始化脚本&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>2021</title>
    <link href="https://blog.harumonia.moe/my-2021/"/>
    <id>https://blog.harumonia.moe/my-2021/</id>
    <published>2022-01-01T19:00:08.000Z</published>
    <updated>2022-01-02T01:03:44.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;反思是为了更好的前进, 本篇主要是对已经过去的 2021 年的一些简单的思考与觉悟.&lt;/p&gt;
&lt;p&gt;不过这些思考的内容大多是在年末所有感而发的. 以 2021 为标题确实有点言过其实了(笑.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>bash脚本 - 过期日志文件清理</title>
    <link href="https://blog.harumonia.moe/clean-logs/"/>
    <id>https://blog.harumonia.moe/clean-logs/</id>
    <published>2021-09-17T22:03:57.000Z</published>
    <updated>2021-09-17T11:08:02.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;公司服务器上的日志文件多年积压, 已经占用了很大一部分不必要的内存空间. 所以本篇将完成一个功能性脚本, 其内容是扫描过期的日志文件, 并对文件进行对应的操作.&lt;/p&gt;
&lt;p&gt;好久没有写过 bash 脚本了, 本篇也算是对这项技能的一个温习吧.&lt;/p&gt;</summary>
    
    
    
    <category term="源流清泉" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/"/>
    
    <category term="Shell" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/Shell/"/>
    
    
    <category term="实用小工具" scheme="https://blog.harumonia.moe/tags/%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    
    <category term="脚本" scheme="https://blog.harumonia.moe/tags/%E8%84%9A%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>pdfplumber内存泄露问题解决方案(施工中)</title>
    <link href="https://blog.harumonia.moe/pdfplumber-memory-leak/"/>
    <id>https://blog.harumonia.moe/pdfplumber-memory-leak/</id>
    <published>2021-09-14T10:47:01.000Z</published>
    <updated>2021-09-14T10:47:01.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;在使用 &lt;strong&gt;pdfplumber&lt;/strong&gt; 时会出现内存递增的情况, 最终导致内存的爆炸, 这一点在高频率地调用时尤为明显.&lt;br&gt;本篇主要解决的就是 &lt;strong&gt;pdfplumber&lt;/strong&gt; 这个依赖包所导致的内存泄露问题.&lt;/p&gt;</summary>
    
    
    
    <category term="源流清泉" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/"/>
    
    <category term="Python" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/Python/"/>
    
    
    <category term="solution" scheme="https://blog.harumonia.moe/tags/solution/"/>
    
  </entry>
  
  <entry>
    <title>Poirot 开发记录(2) - 字体抽取和OCR的优化方案</title>
    <link href="https://blog.harumonia.moe/poirot-development-2/"/>
    <id>https://blog.harumonia.moe/poirot-development-2/</id>
    <published>2021-08-25T21:27:55.000Z</published>
    <updated>2023-01-30T14:10:21.777Z</updated>
    
    
    <summary type="html">&lt;p&gt;承接前面两篇, &lt;a href=&quot;https://blog.harumonia.moe/font-antispider-cracker/&quot;&gt;字体反爬虫解决方案&lt;/a&gt; 和 &lt;a href=&quot;https://blog.harumonia.moe/poirot-development-progressbar/&quot;&gt;进度条方案&lt;/a&gt;, 本篇是对旧版本的 Poirot 部分内容的性能优化.&lt;/p&gt;
&lt;p&gt;主要优化内容为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;Pillow&lt;/code&gt; 从字体文件中抽取出字形图片&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;Tesseract&lt;/code&gt; 进行 OCR 识别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;del&gt;当然还有一些细枝末节的优化, 如 socketio 的版本升级等, 这其中又遇到了一些小问题, 会在文末一并总结.&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="源流清泉" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/"/>
    
    <category term="Python" scheme="https://blog.harumonia.moe/categories/%E6%BA%90%E6%B5%81%E6%B8%85%E6%B3%89/Python/"/>
    
    
    <category term="spider" scheme="https://blog.harumonia.moe/tags/spider/"/>
    
  </entry>
  
  <entry>
    <title>kex_exchange_identification问题及解决</title>
    <link href="https://blog.harumonia.moe/github-kex-exchange-identification-solution/"/>
    <id>https://blog.harumonia.moe/github-kex-exchange-identification-solution/</id>
    <published>2021-07-18T20:30:19.000Z</published>
    <updated>2021-07-18T20:41:35.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;简单地记述了一下在使用 &lt;em&gt;github&lt;/em&gt; 时遇到的 &lt;strong&gt;kex_exchange_identification&lt;/strong&gt; 错误.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
