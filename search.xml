<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>游戏改变世界 笔记</title>
    <url>/2018-10-28-game-change-the-world/</url>
    <content><![CDATA[<blockquote>
<p>现实已经破碎，而我们需要用游戏去修复它。</p>
</blockquote>
<p>在阅读此书的 2018 年，正值轻狂，野心勃勃，想做一款属于自己的游戏。当然这个念头在这本书读到一半的时候依旧消散得差不多了。终究，一款伟大的游戏，它的诞生所需要的天时地利人和，非一人之力可及啊。</p>
<p>不过也拜本书所赐，在游戏鉴赏一方面有了一些自己的想法，不至于再人云亦云，也算是一个不错的收获。</p>
<a id="more"></a>

<h2 id="第一章：提升人们的幸福感"><a href="#第一章：提升人们的幸福感" class="headerlink" title="第一章：提升人们的幸福感"></a>第一章：提升人们的幸福感</h2><p>在不久的将来，那些一如既往排斥游戏的人会陷入很不利的位置。那些认为不值得把时间和注意力花在游戏上的人，无法了解如何在社群、企业和个人生活中利用游戏的力量。他们准备不足，无法参与塑造未来。因此，他们会错过一些原本既有把握解决问题、创造游戏新体验以及弥补现实缺陷的机会。</p>
<p>我们真正害怕的不是游戏，而是在游戏结束、现实开始是迷失了方向。</p>
<p>所有的游戏都有四个决定性特征：目标（sense of purpose）、规则、反馈系统和自愿参与。</p>
<p>Feedback system,告诉玩家距离实现目标还有多远。<br>Voluntary participation,要求所有玩游戏的人都了解并愿意接受目标、规则和反馈。</p>
<h3 id="一号补丁：主动挑战障碍"><a href="#一号补丁：主动挑战障碍" class="headerlink" title="一号补丁：主动挑战障碍"></a>一号补丁：主动挑战障碍</h3><p>一款设计出色的游戏，不需要任何说明，立刻就能让玩家上手。</p>
<p>所有优秀的游戏都是艰苦的工作。<br>游戏的七大艰苦之乐： 1.高风险工作 2.重复工作 3.脑力工作 4.体力工作 5.探索性工作 6.团队工作 7.创造性工作</p>
<h2 id="第二章：构建更美好的现实社会"><a href="#第二章：构建更美好的现实社会" class="headerlink" title="第二章：构建更美好的现实社会"></a>第二章：构建更美好的现实社会</h2><p>希斯赞特米哈依——心流（flow）</p>
<p>二号补丁：保持不懈乐观</p>
<p>太多的心流会导致幸福倦怠，与此同时，太多的自豪会让人上瘾。</p>
<p>玩家——能够在心爱的游戏与完整积极的人生之间实现平衡的人。</p>
<pre><code>    幸运的是，我们用不着打这场必输的硬仗。只要我们聚焦内在奖励而非外在奖励，就不会用光创造自身幸福的源泉。我们通过与神经化学系统固有的关联，创造我们所需的一切幸福。</code></pre>
<p>让现实更美好的 4 大秘密<br>第一，我们么一天都在渴望满意的工作。<br>第二，我们渴望体验成功，至少也是希望成功。<br>第三，我们渴望与社会建立联系。<br>第四，我们渴望过得有意义，渴望成为超越自身的宏伟事业的一部分。</p>
<h2 id="第三章：更满意的工作"><a href="#第三章：更满意的工作" class="headerlink" title="第三章：更满意的工作"></a>第三章：更满意的工作</h2><p>三号补丁：更满意的工作<br>——明确的目标和可操作性步骤</p>
<h2 id="第四章：更有把握的成功"><a href="#第四章：更有把握的成功" class="headerlink" title="第四章：更有把握的成功"></a>第四章：更有把握的成功</h2><p>成功的希望比成功本身更具有刺激性。<br>胜利往往终结乐趣，而失败维持乐趣。</p>
<p>充满希望而又绚烂华丽的失败。 合格的失败反馈是一种奖励。</p>
<p>四号补丁：更有把握的成功</p>
<pre><code>    最能建设乐观心态的游戏恰好是社交性最强的游戏。我们对成功的一大渴望就是分享，我们希望别人看到自己的强项，把自身的成就如实的反映回来。</code></pre>
<p>曾经的游戏鼓励我们与机器沟通，但是，现在玩家已经告别了独来独往的时代。</p>
<h2 id="第五章：更强的社会联系"><a href="#第五章：更强的社会联系" class="headerlink" title="第五章：更强的社会联系"></a>第五章：更强的社会联系</h2><p>幸福最大的来源是其他人<br>用户游戏代替真正的互动交流并不完美，但她的却能让我们在太过繁忙、无法保持联系时跟扩展的家庭及朋友圈子来往。</p>
<p>五号补丁：更强的社会联系<br>Happy embarrassment<br>Vicarious pride</p>
<h2 id="第六章：更宏大的意义"><a href="#第六章：更宏大的意义" class="headerlink" title="第六章：更宏大的意义"></a>第六章：更宏大的意义</h2><p>越来越多的玩家不在只为了自己而投身游戏，他们投身游戏是为了彼此，为了感受投身宏大事业而带来的快感。<br>六号补丁：更宏大的意义<br>创新型集体背景营建<br>崇敬，是指深刻地表达敬畏、尊重、敬爱或崇拜，通常只用于特别伟大、严肃的事情。<br>承认玩家对待自己心爱的游戏有多么严肃，鼓舞玩家在游戏时产生的宏伟情感。</p>
<p>了解自己想要什么并非常态，它是罕见而艰巨的心理成就。<br>我们需要建设不一样的现实：与现实世界、现实生活互动，而且是更具游戏色彩的新途径。</p>
<h2 id="第七章：全情投入当下"><a href="#第七章：全情投入当下" class="headerlink" title="第七章：全情投入当下"></a>第七章：全情投入当下</h2><p>七号补丁：全情投入<br>与游戏想比，现实难以投入。游戏激励我们更积极主动、热情洋溢、自我激励地参与到自己正在做的事情当中。</p>
<p>第一，与任何一款游戏一样，平行实境游戏必须始终有选择的余地。<br>第二，只有选择的余地还不够，一旦活动上路，优秀的平行实境游戏还需要令人信服的目标、有趣的障碍以及精心设计的反馈系统，这也跟任何优秀的游戏都一样。</p>
<p>游戏是一套玩家可以彼此传递的规则。</p>
<h2 id="第八章：实时反馈"><a href="#第八章：实时反馈" class="headerlink" title="第八章：实时反馈"></a>第八章：实时反馈</h2><p>瞬时的积极反馈让玩家更为努力，更成功地完成艰巨的挑战。把我们本来就喜欢的事情变得更像游戏值得一试，它让我们做得更好，把目光放得更为高远。</p>
<p>八号补丁：人生的升级</p>
<p>基于地理位置的游戏，可以将任何游戏空间化为内在奖励的现场。<br>开发与日常生活相联系的游戏。他们有助于人们减少痛苦，更多的享受现实世界。<br>游戏设计师未来最重要的工作：让那些对我们来说困难的事情，变得尽可能具有内在奖励性。</p>
<p>只要它的奖品仍然是荣耀、自夸和个体自豪，使具备游戏反馈机制的愉悦体验贬值的风险就相对较低。</p>
<p>玩家为什么能把几乎每一款游戏都越玩越好？实时数据和定量基准就是原因所在：他们的绩效以进度条、点数、级别和成就的形式，持续的得到测量和反馈，玩家很容易看到自己什么时候得到了什么样的进展。瞬时的积极反馈让玩家更加努力，并成功完成更加艰巨的挑战。</p>
<p>《四方》，这个游戏并不会因为你已经在做的事情奖励你，他会因为你做了新鲜的事情、变得更长袖善舞而奖励你。</p>
<p>凭借优秀游戏的帮助，回到现实世界。</p>
<h2 id="第九章：和陌生人结盟，创造更强大的社群"><a href="#第九章：和陌生人结盟，创造更强大的社群" class="headerlink" title="第九章：和陌生人结盟，创造更强大的社群"></a>第九章：和陌生人结盟，创造更强大的社群</h2><p>游戏让玩家沉浸在人群之中，让他们直面城市生活唤起的矛盾情感，以及因为匿名而产生的自由和孤独。除了想留下来继续游戏里的冲动，玩家还创造了一种即兴的临时社会团体。</p>
<p>九号补丁：和陌生人结盟</p>
<h2 id="第十章：让幸福成为习惯"><a href="#第十章：让幸福成为习惯" class="headerlink" title="第十章：让幸福成为习惯"></a>第十章：让幸福成为习惯</h2><p>十号补丁：happiness hacking</p>
<ul>
<li>残忍的善意</li>
<li>拿敬意搞怪</li>
<li>带着面具跳舞</li>
</ul>
<p>合作总能在游戏里唤起积极情绪和意义感，有了身体接触的合作尤其如此。</p>
<h2 id="第十一章：可持续参与式经济"><a href="#第十一章：可持续参与式经济" class="headerlink" title="第十一章：可持续参与式经济"></a>第十一章：可持续参与式经济</h2><p>首先，一些参与类网络能带给人更多的奖励，而最具奖励性的网络一定不是那种展开严肃性工作的。——首要涉及目的就是为了鼓励、满足我们的情感渴望。<br>其次，在各类严肃性群体项目中，我们的参与资源日益变得太过分散，这也是更为紧迫的问题。</p>
<p>在参与式经济中，争夺关注度的重要性降低， 而争夺脑力循环和互动带宽等东西变得越来越重要。</p>
<p>采用优秀多人游戏结构</p>
<p>维基百科：<br>首先，维基百科是一个良好的游戏世界。<br>其次，维基百科有着良好的游戏机制。<br>最后，维基百科拥有良好的游戏社群。</p>
<ul>
<li>玩家是一种非常宝贵但基本上未获得开发的参与带宽资源。谁能想出如何有效动员他们参与实际工作，谁就能获得巨大利益。</li>
<li>众包项目如果想要获取足够的参与带宽、实现远大目标必须有意识地设计类似游戏的内在奖励。</li>
</ul>
<p>11 号补丁：可持续的参与式经济</p>
<p>内容和体验要具有内在奖励性，而不是为所做的事情提供报酬，否则，人们很快就会感到无聊】琐碎、不得要领。</p>
<h2 id="第十二章：伟大的人人时代"><a href="#第十二章：伟大的人人时代" class="headerlink" title="第十二章：伟大的人人时代"></a>第十二章：伟大的人人时代</h2><p>12 号补丁：人人时代的华丽制胜</p>
<p>利用群众的社会参与</p>
<h2 id="第十三章：认识盈余的红利"><a href="#第十三章：认识盈余的红利" class="headerlink" title="第十三章：认识盈余的红利"></a>第十三章：认识盈余的红利</h2><ul>
<li>玩任何游戏，究其根本都存在合作</li>
<li>新的游戏技术和设计模式支持全新的共同工作路径</li>
</ul>
<p>共享意向</p>
<p>合作模式与协同创作<br>多人一起应对挑战比彼此竞争做对手更开心。</p>
<p>13 号补丁：认识盈余的红利</p>
<h2 id="第十四章：超级合作者"><a href="#第十四章：超级合作者" class="headerlink" title="第十四章：超级合作者"></a>第十四章：超级合作者</h2><p>长远的眼光，意味着在远远大于日常生活规模的层面上工作。<br>生态系统思维：将世界看成多个相互联系、相互依存的环节构成的复杂网络。<br>试点实验：采用多种策略和解决办法，设计、运行小型实验，以便找出最合适的行动。</p>
<p>14 号补丁：超级合作者</p>
<p>有了足够多的人玩游戏，它就变成了对问题的大型合作研究，在极端规模上检验可以对特定的可能空间采取什么样的行动。</p>
<p>利用游戏提高全球生活质量，为未来做好准备，让地球顺利进入下一个千年的全球性使命。</p>
<h2 id="结语：游戏化，重塑人类的文明"><a href="#结语：游戏化，重塑人类的文明" class="headerlink" title="结语：游戏化，重塑人类的文明"></a>结语：游戏化，重塑人类的文明</h2><p>游戏的四大永恒真理：</p>
<ul>
<li>提高现实生活质量</li>
<li>大规模的组织人群</li>
<li>不依赖于稀缺或有限资源</li>
<li>为人类面临的最迫切挑战创造新的解决方案</li>
</ul>
<h2 id="有所感："><a href="#有所感：" class="headerlink" title="有所感："></a>有所感：</h2><p>每一个有资格称之为“玩家”的人，其本身就是游戏，它会完结，亦会开始。<br>但有一点可以确认，在如此多的排列组合之中，没有一个是多余的。</p>
]]></content>
      <categories>
        <category>桂苑酌记</category>
      </categories>
  </entry>
  <entry>
    <title>VPS上的一些好物</title>
    <url>/2018-10-28-sth-good-on-VPS/</url>
    <content><![CDATA[<p>主要介绍了在个人服务器上如何一键安装 ss\ssr，Mtproto（telegram）,以及 ssh 突然断开的处理方法(主要是国外服务器容易出现断连的问题)。</p>
<a id="more"></a>

<h2 id="SS-一键安装脚本"><a href="#SS-一键安装脚本" class="headerlink" title="SS 一键安装脚本"></a>SS 一键安装脚本</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget --no-check-certificate -O shadowsocks-libev_CN.sh https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;uxh&#x2F;shadowsocks_bash&#x2F;master&#x2F;shadowsocks-libev_CN.sh &amp;&amp; bash shadowsocks-libev_CN.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2020-09-补充说明"><a href="#2020-09-补充说明" class="headerlink" title="2020-09 补充说明"></a>2020-09 补充说明</h3><p>逗比的 ss 安装脚本已经被 ban 了很久了，如果有这方面需求的不如去订阅相关的服务，如果和别人合订的话开销大概 15 元/月 即可。</p>
<h2 id="Mtproto-安装"><a href="#Mtproto-安装" class="headerlink" title="Mtproto 安装"></a>Mtproto 安装</h2><p>Mtproto 是 telegram 所使用的一个代理，这里再安利一波 telegram，很好用的社交软件，注重与保护隐私。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget -N --no-check-certificate https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;ToyoDAdoubi&#x2F;doubi&#x2F;master&#x2F;mtproxy.sh &amp;&amp; chmod +x mtproxy.sh &amp;&amp; bash mtproxy.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="ssh-突然断开的处理办法"><a href="#ssh-突然断开的处理办法" class="headerlink" title="ssh 突然断开的处理办法"></a>ssh 突然断开的处理办法</h2><p>1、安装 screen 命令</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">yum install screen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>2、创建一个虚拟会话(amh 为自定义会话名称，可以自己更改)</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">screen -S amh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>3、以下载安装 amh 控制面板为例，下载并执行 amh 面板安装脚本</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget http:&#x2F;&#x2F;amh.sh&#x2F;file&#x2F;AMH&#x2F;4.2&#x2F;amh.sh &amp;&amp; chmod 775 amh.sh &amp;&amp; .&#x2F;amh.sh 2&gt;&amp;1 | tee amh.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>4、如果安装过程中，链接中断，重连 SSH 后输入</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">screen -r amh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>即可查看之前任务的进度并可以继续执行。</p>
<h3 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h3><ul>
<li>screen -ls #查看所有 screen 会话</li>
<li>按键盘上面的 Ctrl+a，然后再按 d #保存当前的 screen 会话</li>
<li>exit #退出 screen</li>
<li>screen -wipe mysql5.5 #删除会话</li>
</ul>
<h2 id="tcp—brr"><a href="#tcp—brr" class="headerlink" title="tcp—brr"></a>tcp—brr</h2><p>具体可以自行谷歌</p>
]]></content>
      <categories>
        <category>见闻录</category>
      </categories>
      <tags>
        <tag>VPS</tag>
      </tags>
  </entry>
  <entry>
    <title>图的生成和连通性判断实验</title>
    <url>/2018-10-31-experiment-graph-generate-and-connectedness/</url>
    <content><![CDATA[<h2 id="这是-2018-10-31-的实验任务"><a href="#这是-2018-10-31-的实验任务" class="headerlink" title="这是 2018-10-31 的实验任务"></a>这是 2018-10-31 的实验任务</h2><p>描述：给定一个无向图，一共 n 个点，m 条边。请编写一个程序实现两种操作： D x y  从原图中删除连接 x，y 节点的边。 Q x y  询问 x，y 节点是否连通</p>
<h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>第一行两个数 n,m（5&lt;=n&lt;=40000,1&lt;=m&lt;=100000）</p>
<p>接下来 m 行，每行一对整数  x y （x,y&lt;=n）,表示 x,y 之间有边相连。保证没有重复的边。</p>
<p>接下来一行一个整数  q（q&lt;=100000）</p>
<p>以下 q 行每行一种操作，保证不会有非法删除。</p>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>按询问次序输出所有 Q 操作的回答，连通的回答 C，不连通的回答 D</p>
<h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><pre><code>3 3 
1 2 
1 3 
2 3 
5 
Q 1 2
D 1 2 
Q 1 2 
D 3 2 
Q 1 2</code></pre>
<h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出  "></a>样例输出  </h3><pre><code>C C D</code></pre>
<h2 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; MGraph.h
#ifndef MGraph_H
#define MGraph_H
const int MaxSize_point&#x3D;40000;
const int MaxSize_arc&#x3D;100000;

template &lt;class DataType&gt;
class MGraph
&#123;
public:
    MGraph(int n,int e);
    ~MGraph();
	void visited_ur();
    void DFSTraverse(int v);
    void BFSTraverse(int v);
	int visited[MaxSize_point];
	void Delete(int a,int b);
	void Judge();
	void Question(int a,int b,int act_count);

private:
    DataType vertex[MaxSize_point];
    &#x2F;&#x2F;int arc[MaxSize_point][MaxSize_point];
	int **arc;
    int vertexNum,arcNum;
	char action[MaxSize_arc];
&#125;;
#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; MGraph.h
#include &lt;iostream&gt;
using namespace std;
#include &quot;MGraph.h&quot;

template&lt;class DataType&gt;
MGraph&lt;DataType&gt;::MGraph(int n,int e)
&#123;
    int i,j,k;
    vertexNum&#x3D;n;arcNum&#x3D;e;

	arc&#x3D;new int *[vertexNum];
	for(int i&#x3D;0;i&lt;vertexNum;i++)
	&#123;
		arc[i]&#x3D;new int[vertexNum];
	&#125;

    &#x2F;*for( i &#x3D; 0; i &lt; vertexNum; i++)
    &#123;
        vertex[i]&#x3D;a[i];
    &#125;*&#x2F;

    for( i &#x3D; 0; i &lt; vertexNum; i++)
    &#123;

        for( j &#x3D; 0; j &lt; vertexNum; j++)
        &#123;
            arc[i][j]&#x3D;0;
        &#125;

    &#125;


    for( k &#x3D; 0; k &lt; arcNum; k++)
    &#123;
        &#x2F;&#x2F;cout&lt;&lt;&quot;请输入边的两个顶点的序号（序号从1开始计数）：&quot;;
        cin&gt;&gt;i&gt;&gt;j;
		i--;j--;
        arc[i][j]&#x3D;1;arc[j][i]&#x3D;1;
    &#125;


&#125;

template&lt;class DataType&gt;
void MGraph&lt;DataType&gt;::visited_ur()
&#123;
	    for(int i &#x3D; 0; i &lt; MaxSize_point; i++)
    &#123;
        visited[i]&#x3D;0;
    &#125;
&#125;

template&lt;class DataType&gt;
void MGraph&lt;DataType&gt;::DFSTraverse(int v)
&#123;
    &#x2F;&#x2F;cout&lt;&lt;vertex[v];
	visited[v]&#x3D;1;
    for(int j&#x3D;0;j&lt;vertexNum;j++)

        if (arc[v][j]&#x3D;&#x3D;1&amp;&amp;visited[j]&#x3D;&#x3D;0) &#123;
            DFSTraverse(j);
        &#125;

&#125;

template&lt;class DataType&gt;
void MGraph&lt;DataType&gt;::BFSTraverse(int v)
&#123;
    int Q[MaxSize_point];
    int front&#x3D;-1,rear&#x3D;-1;
    cout&lt;&lt;vertex[v];visited[v]&#x3D;1;Q[++rear]&#x3D;v;

    while(front!&#x3D;rear)&#123;
        v&#x3D;Q[++front];
        for (int j&#x3D;0;j&lt;vertexNum;j++)

            if (arc[v][j]&#x3D;&#x3D;1&amp;&amp;visited[j]&#x3D;&#x3D;0) &#123;
                cout&lt;&lt;vertex[j];visited[j]&#x3D;1;Q[++rear]&#x3D;j;
            &#125;

    &#125;

&#125;


template&lt;class DataType&gt;
void MGraph&lt;DataType&gt;::Delete(int a,int b)
&#123;
	&#x2F;&#x2F;a--;
	&#x2F;&#x2F;b--;
	arc[a][b]&#x3D;0;
	arc[b][a]&#x3D;0;
&#125;

template&lt;class DataType&gt;
void MGraph&lt;DataType&gt;::Question(int a,int b,int act_count)
&#123;
	visited_ur();
	DFSTraverse(a);
	&#x2F;&#x2F;	cout &lt;&lt; &quot; &quot;;
	if(visited[b]&#x3D;&#x3D;0)
		action[act_count]&#x3D;&#39;D&#39;;
	else
		action[act_count]&#x3D;&#39;C&#39;;
&#125;

template&lt;class DataType&gt;
void MGraph&lt;DataType&gt;::Judge()
&#123;
	int q;
	char Jud;
	int a,b;
	int act_count&#x3D;0;
	&#x2F;&#x2F;cout&lt;&lt;&quot;操作数&quot;&lt;&lt;endl;
	cin&gt;&gt;q;
	for(int i&#x3D;0;i&lt;q;i++)
	&#123;
		&#x2F;&#x2F;cout&lt;&lt;&quot;指令：&quot;&lt;&lt;endl;
		cin&gt;&gt;Jud&gt;&gt;a&gt;&gt;b;
		a--;b--;
		if(Jud&#x3D;&#x3D;&#39;Q&#39;)
		&#123;
			Question(a,b,act_count);
			act_count++;
		&#125;
		else
			Delete(a,b);
	&#125;
	for(int i&#x3D;0;i&lt;act_count;i++)
	&#123;
		cout&lt;&lt;action[i]&lt;&lt;&quot; &quot;;
	&#125;
	cout &lt;&lt;endl;
	&#x2F;&#x2F;system(&quot;pause&quot;);
&#125;

template&lt;class DataType&gt;
MGraph&lt;DataType&gt;::~MGraph()
&#123;
	for(int i&#x3D;0;i&lt;vertexNum;i++)
	&#123;
		delete [] arc[i];
	&#125;
	delete arc;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; MGraph_main.cpp

#include&lt;iostream&gt;
using namespace std;
#include &quot;MGraph.cpp&quot;


int main(int argc, char const *argv[])
&#123;
	int vertexNum,arcNum;
    &#x2F;&#x2F;char ch[]&#x3D;&#123;&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;&#125;;
	&#x2F;&#x2F;char ch[]&#x3D;&#123;&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;&#125;;
	&#x2F;&#x2F;cout &lt;&lt; &quot;请输入节点数&amp;bian：&quot;&lt;&lt;endl;
	cin &gt;&gt;vertexNum&gt;&gt; arcNum;

	MGraph&lt;char&gt; MG(vertexNum,arcNum);
	MG.Judge();
    &#x2F;&#x2F;MGraph&lt;char&gt; MG(ch,4,4);
    &#x2F;&#x2F;int i;
    &#x2F;*cout&lt;&lt;&quot;深度优先遍历序列是：&quot;;
	MG.visited_ur();
    for(i&#x3D;0;i&lt;vertexNum;i++)
	&#123;
		if(MG.visited[i]&#x3D;&#x3D;0)
		&#123;
			MG.DFSTraverse(i);
			count++;
		&#125;
		cout &lt;&lt; &quot; &quot;;

	&#125;
    cout &lt;&lt;endl;

    MG.visited_ur();
    cout &lt;&lt; &quot;广度优先遍历序列是：&quot;;
    for(i&#x3D;0;i&lt;vertexNum;i++)
	&#123;
		if(MG.visited[i]&#x3D;&#x3D;0)
		&#123;
			MG.DFSTraverse(i);
		&#125;
		cout &lt;&lt; &quot; &quot;;
	&#125;
    cout &lt;&lt;endl;

	if (count&gt;1)
		cout&lt;&lt; &quot;非连通图.连通分量有&quot;&lt;&lt;count&lt;&lt;&quot;个.&quot;&lt;&lt;endl;
	else
		cout&lt;&lt;&quot;连通图.&quot;&lt;&lt;endl;*&#x2F;

    system(&quot;pause&quot;);
    return 0;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><pre><code>/*18-10-24*/
/*将visit加入类中，以避免使用全局变量*/
/*通过循环判定visited实现非连通图遍历*/

/*18-10-31*/
/*基于任务要求进行修改，添加三个成员函数作为功能函数*/</code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Algorithm \ Data Structure</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序容器&amp;&amp;泛型算法&amp;&amp;关联容器</title>
    <url>/2018-11-20-container-generic/</url>
    <content><![CDATA[<blockquote>
<p>在网络上浏览了很多关于 STL 的资料，但是大多都不能令我满意，所以这里以一个初学者的视角来学习一遍 STL</p>
</blockquote>
<p>ps:图片由于一些原因（懒），就不放上来了，大抵就是对应标题下的一些表格。</p>
<p>资料主要来源：c++primer</p>
<h2 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h2><p>按位置来保存和访问的</p>
<p>vector 可变大小数组，尾插入删除快</p>
<p>deque 双端队列，头尾插入删除快</p>
<p>list 双向链表，双向顺序访问，任意插入删除快</p>
<p>forward_list 单向链表</p>
<p>array 固定大小的数组，快速访问，不能增删</p>
<p>string 类 vector。专门用于保存字符</p>
<h3 id="相关的构造函数"><a href="#相关的构造函数" class="headerlink" title="相关的构造函数"></a>相关的构造函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ivec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//10个-1</span>
vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">svec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//10个hi</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ivec</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//10个0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>string 具有额外操作</p>
</blockquote>
<h3 id="容器的遍历手段"><a href="#容器的遍历手段" class="headerlink" title="容器的遍历手段"></a>容器的遍历手段</h3><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">copy</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ostream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>cout<span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator it <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// const时。 vector&lt;int>::const_iterator iter=v.begin();</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">for_each</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//联动下述lambda</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="unique-算法"><a href="#unique-算法" class="headerlink" title="unique 算法"></a>unique 算法</h3><p>将容器里的重合元素取其一到前排进行排序。</p>
<blockquote>
<p>排列在范围前部，<strong>返回指向不重复区域后一个位置的指针</strong><br>也就是说，返回迭代器。</p>
</blockquote>
<p>e.g. 4 2 4 4 4 2 2 2 2 2<br>此时使用 erase 函数，可以实现容器中元素去重功能。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> uni<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>uni<span class="token punctuation">,</span> a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="lambda-函数"><a href="#lambda-函数" class="headerlink" title="lambda 函数"></a>lambda 函数</h3><p>适用于低频率使用的简单操作。<br>通常可以使用函数来代替，但是涉及到参数捕获时具有独特性。<br><strong>第二关键词：谓词</strong></p>
<h4 id="使用尾置返回"><a href="#使用尾置返回" class="headerlink" title="使用尾置返回"></a>使用尾置返回</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token keyword">int</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span> captures <span class="token punctuation">]</span> <span class="token operator">&lt;</span>tparams<span class="token operator">></span><span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token operator">++</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">(</span> params <span class="token punctuation">)</span> specifiers exception attr <span class="token operator">-></span> ret <span class="token keyword">requires</span><span class="token punctuation">(</span>optional<span class="token punctuation">)</span><span class="token punctuation">(</span>c<span class="token operator">++</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> body <span class="token punctuation">&#125;</span>	<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span> captures <span class="token punctuation">]</span> <span class="token punctuation">(</span> params <span class="token punctuation">)</span> <span class="token operator">-></span> ret <span class="token punctuation">&#123;</span> body <span class="token punctuation">&#125;</span>	<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span> captures <span class="token punctuation">]</span> <span class="token punctuation">(</span> params <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> body <span class="token punctuation">&#125;</span>	<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span> captures <span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> body <span class="token punctuation">&#125;</span>	<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>lambda 函数确实有够花哨了，不过我在查看一些函数源码的之后倒是经常可以看见。</p>
<p>lambda 函数体中不止含有 return 时，需要使用尾置返回指定 return 的类型，否则默认 void。</p>
<h4 id="bind-函数"><a href="#bind-函数" class="headerlink" title="bind 函数"></a>bind 函数</h4><p>functional 库<br>可以看作一个通用的函数适配器，接受一个可调用对象，生成一个新的可调用对象来“适应”原对象的参数列表。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> newCallable<span class="token operator">=</span><span class="token function">bind</span><span class="token punctuation">(</span>callable<span class="token punctuation">,</span>arg_list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>arg_list 中可包含形如_n 的样式，意为第 n 个参数。<br><strong>_n 定义在 placeholders 的命名空间中</strong></p>
<h2 id="再探迭代器"><a href="#再探迭代器" class="headerlink" title="再探迭代器"></a>再探迭代器</h2><h3 id="插入迭代器"><a href="#插入迭代器" class="headerlink" title="插入迭代器"></a>插入迭代器</h3><h4 id="inserter"><a href="#inserter" class="headerlink" title="inserter"></a>inserter</h4><p>插入到迭代器指向元素<code>之前</code><br>可选<code>迭代器</code>作为第二参数，指定插入位置。</p>
<h4 id="fornt-inserter"><a href="#fornt-inserter" class="headerlink" title="fornt_inserter"></a>fornt_inserter</h4><p>使用 push_front,<code>总是</code>插入到容器的第一个元素<code>之前</code></p>
<h4 id="back-inserter"><a href="#back-inserter" class="headerlink" title="back_inserter"></a>back_inserter</h4><p>创建一个使用 push_back 的迭代器</p>
<h3 id="iostream-迭代器"><a href="#iostream-迭代器" class="headerlink" title="iostream 迭代器"></a>iostream 迭代器</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">istream_iterator<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">in_iter</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">,</span>eof<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>in_iter<span class="token punctuation">,</span>eof<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>直到第一个不是 int 的元素为止</p>
<p>PS.<br>范围 for 语句</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span>变量 <span class="token operator">:</span> 容器或序列 <span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    操作<span class="token comment">//不可对容器或序列进行增删</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>accumulate 函数<br>accumulate 带有三个形参：头两个形参指定要累加的元素范围，第三个形参则是累加的初值。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="特定容器算法"><a href="#特定容器算法" class="headerlink" title="特定容器算法"></a>特定容器算法</h3><h2 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h2><p>按关键词来保存和访问的</p>
<h3 id="map-遍历"><a href="#map-遍历" class="headerlink" title="map 遍历"></a>map 遍历</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//目前掌握两种普通遍历（while &amp;&amp; for）</span>
<span class="token keyword">auto</span> bba<span class="token operator">=</span>a<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>bba<span class="token operator">!=</span>a<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> bba<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>bba<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token operator">++</span>bba<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> bba<span class="token operator">:</span>a<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span>bba<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="黑话"><a href="#黑话" class="headerlink" title="黑话"></a>黑话</h2><p>args 参数列表<br>谓词 返回可以转换为 bool 类型的函数</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Algorithm \ Data Structure</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>c++实现字典（初步）</title>
    <url>/2018-11-21-cpp-dictionary/</url>
    <content><![CDATA[<p>这个字典程序算是最近学习 c++的一个成果集合了，就这样吧。（2018 年 11 月 21 日 13:47:00。）</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//</span>
<span class="token comment">//  main.cpp</span>
<span class="token comment">//  zidian</span>
<span class="token comment">//</span>
<span class="token comment">//  Created by Lion Heart on 2018/11/18.</span>
<span class="token comment">//  Copyright © 2018 Lion. All rights reserved.</span>
<span class="token comment">//</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Windows.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iomanip></span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">cinfstr_cn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">cinfstr_eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>

map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> temp_tran<span class="token punctuation">;</span>
string temp_ENG<span class="token punctuation">[</span><span class="token number">3000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
string temp_CN<span class="token punctuation">[</span><span class="token number">3000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Dictionary</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> string<span class="token operator">></span> dic<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Dictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">Dictionary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">insert_word</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">Batch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//temp</span>
    <span class="token keyword">void</span> <span class="token function">inquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//in_batch</span>
    <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//hang</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">option1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">option2</span><span class="token punctuation">(</span><span class="token keyword">int</span> opt2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">cinfstr_eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> count_word <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	ifstream <span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"ENG.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Error opening file"</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		in<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		temp_ENG<span class="token punctuation">[</span>count_word<span class="token punctuation">]</span> <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
		count_word<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">cinfstr_cn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> count_word <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	ifstream <span class="token function">in</span><span class="token punctuation">(</span><span class="token string">"ZH.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Error opening file"</span><span class="token punctuation">;</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">.</span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		in<span class="token punctuation">.</span><span class="token function">getline</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		temp_CN<span class="token punctuation">[</span>count_word<span class="token punctuation">]</span> <span class="token operator">=</span> buffer<span class="token punctuation">;</span>
		<span class="token comment">//cout &lt;&lt; buffer &lt;&lt; endl;</span>
		count_word<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>



<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// insert code here...</span>
	<span class="token function">cinfstr_cn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">cinfstr_eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    Dictionary dic<span class="token punctuation">;</span>

    string flag<span class="token operator">=</span><span class="token string">"y"</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token string">"y"</span><span class="token operator">||</span>flag<span class="token operator">==</span><span class="token string">"Y"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        dic<span class="token punctuation">.</span><span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dic<span class="token punctuation">.</span><span class="token function">option1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        cout <span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span> <span class="token string">"Continue Operation(Y/N)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        cin<span class="token operator">>></span>flag<span class="token punctuation">;</span>
		<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token class-name">Dictionary</span><span class="token operator">::</span><span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1.Creat:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2.Inquire"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3.Sort"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"4.Display"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"5.clear"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input your choice:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Dictionary</span><span class="token operator">::</span><span class="token function">option1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> opt1<span class="token punctuation">;</span>
    cin <span class="token operator">>></span>opt1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> opt2<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
			<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">//aaaaaaaaaa</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1.One by one."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2.Batch generation."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"3.Back step."</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
			cout <span class="token operator">&lt;&lt;</span> <span class="token string">"------------------------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input your choice:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            cin <span class="token operator">>></span>opt2<span class="token punctuation">;</span>
			<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">//aaaaaaaaaa</span>
            <span class="token function">option2</span><span class="token punctuation">(</span>opt2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token function">inquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
            <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>
            <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>
            <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">default</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Wrong Input!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Dictionary</span><span class="token operator">::</span><span class="token function">option2</span><span class="token punctuation">(</span><span class="token keyword">int</span> opt2<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    string flag_ina<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>opt2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">do</span><span class="token punctuation">&#123;</span>
                <span class="token function">insert_word</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                cout <span class="token operator">&lt;&lt;</span><span class="token string">"Continue to input words?(Y/N)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
                cin <span class="token operator">>></span> flag_ina<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>flag_ina<span class="token operator">==</span><span class="token string">"y"</span><span class="token operator">||</span>flag_ina<span class="token operator">==</span><span class="token string">"Y"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>
            <span class="token function">Batch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>
			<span class="token comment">//hahahahahahahahahahahahahahahahahahahahahahaha</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>

        <span class="token keyword">default</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Wrong Input!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token class-name">Dictionary</span><span class="token operator">::</span><span class="token function">insert_word</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    string Eng<span class="token punctuation">,</span>Zh_CN<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input English:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> Eng<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Please input paraphrase(Chinese):"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cin <span class="token operator">>></span>Zh_CN<span class="token punctuation">;</span>
    dic<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>Eng<span class="token punctuation">,</span> Zh_CN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">//aaaaaaaaaa</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Dictionary</span><span class="token operator">::</span><span class="token function">inquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> opt<span class="token punctuation">;</span>
    string a<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Inquire by English or Chinese?"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"1.English"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"2.Chinese"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cin <span class="token operator">>></span>opt<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>opt <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Plsase the word you want to inquire:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dic<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">==</span>dic<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">&lt;&lt;</span><span class="token string">" is not in this dictionary~"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>opt<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Plsase the word you want to inquire:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        cin <span class="token operator">>></span> a<span class="token punctuation">;</span>
        <span class="token keyword">bool</span> flag<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token keyword">auto</span> bba<span class="token operator">=</span>dic<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span><span class="token punctuation">(</span>bba<span class="token operator">!=</span>dic<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bba<span class="token operator">-></span>second<span class="token operator">==</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                cout <span class="token operator">&lt;&lt;</span> bba<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
                flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
			<span class="token operator">++</span>bba<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">&lt;&lt;</span><span class="token string">" is not in this dictionary~"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token comment">//aaaaaaaaaa</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Dictionary</span><span class="token operator">::</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//hang</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Dictionary</span><span class="token operator">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"--------------------------------------------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span><span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token string">"English"</span><span class="token operator">&lt;&lt;</span><span class="token function">resetiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">"Chinese"</span><span class="token operator">&lt;&lt;</span><span class="token function">resetiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token comment">//cout &lt;&lt; dic["a"];</span>
	<span class="token keyword">auto</span> bba<span class="token operator">=</span>dic<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span><span class="token punctuation">(</span>bba<span class="token operator">!=</span>dic<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> bba<span class="token operator">-></span>first<span class="token operator">&lt;&lt;</span><span class="token function">resetiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token function">setiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>bba<span class="token operator">-></span>second<span class="token operator">&lt;&lt;</span><span class="token function">resetiosflags</span><span class="token punctuation">(</span>ios<span class="token operator">::</span>left<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
		<span class="token operator">++</span>bba<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token class-name">Dictionary</span><span class="token operator">::</span><span class="token function">Batch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//hang</span>
	<span class="token keyword">int</span> tim<span class="token punctuation">,</span>n<span class="token punctuation">;</span>

	cout <span class="token operator">&lt;&lt;</span><span class="token string">"---------------------------------------------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Vocabulary will be imported from the file.\n"</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"How many words do you want to add?(&lt;=2999)"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
	cin <span class="token operator">>></span> n<span class="token punctuation">;</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		tim <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2999</span><span class="token punctuation">;</span>
		dic<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>temp_ENG<span class="token punctuation">[</span>tim<span class="token punctuation">]</span><span class="token punctuation">,</span> temp_CN<span class="token punctuation">[</span>tim<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">//cout &lt;&lt; dic[temp_ENG[tim]] &lt;&lt; endl;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"["</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		cout <span class="token operator">&lt;&lt;</span> <span class="token string">"#"</span><span class="token punctuation">;</span>
		<span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"]"</span><span class="token punctuation">;</span>
	<span class="token function">SetConsoleTextAttribute</span><span class="token punctuation">(</span><span class="token function">GetStdHandle</span><span class="token punctuation">(</span>STD_OUTPUT_HANDLE<span class="token punctuation">)</span><span class="token punctuation">,</span>FOREGROUND_GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout<span class="token operator">&lt;&lt;</span><span class="token string">"		success"</span><span class="token operator">&lt;&lt;</span>flush<span class="token punctuation">;</span>
	<span class="token function">SetConsoleTextAttribute</span><span class="token punctuation">(</span><span class="token function">GetStdHandle</span><span class="token punctuation">(</span>STD_OUTPUT_HANDLE<span class="token punctuation">)</span><span class="token punctuation">,</span>FOREGROUND_RED<span class="token operator">|</span>FOREGROUND_GREEN<span class="token operator">|</span>FOREGROUND_BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span><span class="token string">"!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token class-name">Dictionary</span><span class="token operator">::</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	string flag<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span><span class="token string">"----------------------------------------------------"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	<span class="token function">SetConsoleTextAttribute</span><span class="token punctuation">(</span><span class="token function">GetStdHandle</span><span class="token punctuation">(</span>STD_OUTPUT_HANDLE<span class="token punctuation">)</span><span class="token punctuation">,</span>FOREGROUND_RED<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Warnning!!!/n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"You will delete all your data in this dic!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Continnue? (Y/N)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
	cin <span class="token operator">>></span>flag<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token string">"y"</span><span class="token operator">||</span>flag<span class="token operator">==</span><span class="token string">"Y"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		dic<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>dic<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dic<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
	<span class="token punctuation">&#123;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token comment">/*
RIZHI
随机生成过程中出现重复可能缺失数据
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Algorithm \ Data Structure</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>鬼畜的回形数</title>
    <url>/2018-12-02-number-of-rounds/</url>
    <content><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span>


<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> m<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> q<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">;</span>
    cin <span class="token operator">>></span> n<span class="token operator">>></span>m<span class="token punctuation">;</span>
    <span class="token comment">/*int **q;
    q=new int*[n];
    for (int i=0; i&lt;n; i++) &#123;
        q[i]=new int[m];
    &#125;*/</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cin<span class="token operator">>></span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//cout &lt;&lt; q[0][0]&lt;&lt;endl;</span>

    <span class="token keyword">int</span> right<span class="token operator">=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>up<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>down<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>up<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>down<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        left<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>left<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>down<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        down<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>left<span class="token operator">||</span>up<span class="token operator">==</span>down<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>down<span class="token punctuation">;</span> i<span class="token operator">>=</span>up<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        right<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>right<span class="token punctuation">;</span> i<span class="token operator">>=</span>left<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">[</span>up<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        up<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>left<span class="token operator">||</span>up<span class="token operator">==</span>down<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
       <span class="token comment">// cout &lt;&lt;endl&lt;&lt; up&lt;&lt;" "&lt;&lt;left&lt;&lt;endl;</span>
        <span class="token comment">//cout &lt;&lt; m/2+2 &lt;&lt; " "&lt;&lt;n/2+2&lt;&lt;endl;</span>
    <span class="token punctuation">&#125;</span>
    cout <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>



    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Algorithm \ Data Structure</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>杂物</title>
    <url>/2018-12-02-others/</url>
    <content><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*报时
 #include &lt;iostream>
#include &lt;map>
#include &lt;string>

using namespace std;

map&lt;int, string> mapA=&#123;&#123;0,"zero"&#125;,&#123; 1, "one"&#125;,&#123; 2,"two"&#125;,&#123;3,"three"&#125;, &#123;4,"four"&#125;, &#123;5,"five"&#125;, &#123;6,"six"&#125;, &#123;7,"seven"&#125;, &#123;8,"eight"&#125;, &#123;9,"nine"&#125;, &#123;10,"ten"&#125;, &#123;11,"eleven"&#125;, &#123;12,"twelve"&#125;, &#123;13,"thirteen"&#125;, &#123;14,"fourteen"&#125;, &#123;15,"fifteen"&#125;, &#123;16,"sixteen"&#125;, &#123;17,"seventeen:"&#125;, &#123;18,"eighteen"&#125;, &#123;19,"nineteen"&#125;, &#123;20,"twenty"&#125;,&#123;30,"thirty"&#125;,&#123;40,"forty"&#125;,&#123;50,"fifty"&#125;&#125;;


void trans(int num)
&#123;
    int shiwei,gewei;
    if (num&lt;=20||num%10==0) &#123;
        cout &lt;&lt; mapA[num];
    &#125;
    else if (num>20||num%10!=0)
    &#123;
        shiwei=num/10;
        shiwei*=10;
        gewei=num%10;
        cout &lt;&lt; mapA[shiwei]&lt;&lt;" "&lt;&lt;mapA[gewei];
    &#125;
&#125;


int main()
&#123;
    int hour,min;
    cin >> hour >> min;
    trans(hour);
    cout &lt;&lt; " ";
    trans(min);
    cout &lt;&lt;endl;

    return 0;
&#125;
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Algorithm \ Data Structure</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Mac Xcode上使用c++读取txt文件</title>
    <url>/2018-12-15-read-txt-file-via-cpp-on-Xcode/</url>
    <content><![CDATA[<h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><p>Product -&gt;Scheme -&gt;Edit Scheme-&gt;左边选择 Run 选择-&gt;选择 Option-&gt;在 Working Dictionary 选项里面，打钩 Using cusom working dictionary<br>这样就解决了 Xcode 读取路径的问题</p>
<h1 id="txt-文件"><a href="#txt-文件" class="headerlink" title="txt 文件"></a>txt 文件</h1><p>一般使用文本编辑创建后默认是 rtf 文件，将 rtf 文件保存为纯文本文件就可以了</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Algorithm \ Data Structure</category>
      </categories>
  </entry>
  <entry>
    <title>蓝桥杯二三事（第一阶段施工完毕）</title>
    <url>/2018-12-19-sth-of-blue-bridge/</url>
    <content><![CDATA[<p>这里将会记载做蓝桥杯的题目时的一些感悟以及灵感（还有一些无聊的吐槽啦。</p>
<a id="more"></a>

<p>想起了当年一个人一条狗刷完南信 oj 程设题目的勤勉岁月</p>
<h2 id="2018-11-08"><a href="#2018-11-08" class="headerlink" title="2018.11.08"></a>2018.11.08</h2><p>完成了入门四题。<br>斐波那契数列思路：余数相加求余、递归</p>
<p>平时在机器上运行不感觉，但是这一秒的上限卡的确实有够难受。</p>
<p>数列排序:STL 是个好东西，可惜我还不太会用。</p>
<h2 id="2018-11-09"><a href="#2018-11-09" class="headerlink" title="2018.11.09"></a>2018.11.09</h2><p>十六进制转八进制：<br>暂时提供思路，十六进制转二进制，二转八。使用 vector 进行几次进出操作。</p>
<h2 id="2018-11-10"><a href="#2018-11-10" class="headerlink" title="2018.11.10"></a>2018.11.10</h2><p>重新使用<strong>STL</strong>技术撸完了所有进制转换的代码之后，再看看上学期末写的南信 oj 上的任意进制转换的代码，感觉要简洁了很多。</p>
<h2 id="2018-11-11"><a href="#2018-11-11" class="headerlink" title="2018.11.11"></a>2018.11.11</h2><p>今天估计是要鸽掉了= =，不得不吐槽一下，没想到我会这么早就在现实中见到 sb 策划。</p>
<p>就写一下特回文数的思路吧，<strong>折半组合</strong>。<br>改进思路，全字符组合</p>
<h2 id="2018-11-12"><a href="#2018-11-12" class="headerlink" title="2018.11.12"></a>2018.11.12</h2><p>今天碰到的题目都异常的简单，所以闲的无聊完成了从特回到 01 串的八条题目，并没有什么值得深入研究的东西，就这样。</p>
<h2 id="2018-11-13"><a href="#2018-11-13" class="headerlink" title="2018.11.13"></a>2018.11.13</h2><p>完成了大阶乘的思路规划<br>然后点开了算法训练……法训练……训练……练……<br>真实自闭(｡ ́︿ ̀｡)</p>
<h2 id="2018-11-14"><a href="#2018-11-14" class="headerlink" title="2018.11.14"></a>2018.11.14</h2><p>被算法打败的辣个男人，决定开一个新坑。<br>读完了 C++Primer 第九章顺序容器，相关的笔记暂存于印象笔记，等整理完成后会放在<strong>源流清泉</strong>类目下。<br>12:38:21 开始阅读第 10 章 <em>泛型算法</em> 。</p>
<h2 id="2018-11-17"><a href="#2018-11-17" class="headerlink" title="2018.11.17"></a>2018.11.17</h2><p>断断续续地，终于读完了泛型算法。<br>lambda 这类借口，确实很好用。但是如果深入研究的话，反而会被弄得概念混乱= =。以后再找时间看看相关的源码吧。</p>
<h2 id="2018-11-19"><a href="#2018-11-19" class="headerlink" title="2018.11.19"></a>2018.11.19</h2><p>读完了 c++primer 的第二部分，很多以前不会的和会的都有了新的理解= =</p>
<h2 id="2018-12-02"><a href="#2018-12-02" class="headerlink" title="2018.12.02"></a>2018.12.02</h2><p>不知不觉就自个时候了，摸了好久的鱼，今天难得有空，完成了哈夫曼树、回形取数、报时的题目啊= =</p>
<h2 id="2018-12-07"><a href="#2018-12-07" class="headerlink" title="2018.12.07"></a>2018.12.07</h2><p>前天结束了校选拔赛，8 题做了 7 题，这七题的完成度应该是很高的（算了，我还是先不立什么 flag 了= =）提前了半小时退场，没有坚持到最后是比较可惜的，一来二叉树的一些东西忘记了，空想也是无用，二来实在太困了，甚至直接把晚上的推拿课也给翘了。<br>看下周的结果怎么样吧，刷题也断断续续的，o(︶︿︶)o<br>不过最大的收获应该就是深刻认识到了自己与一些大牛的差距吧，只在自己学校称王称霸真的挺可笑的，葬爱家族式的无聊的狂妄。</p>
<h2 id="2018-12-10"><a href="#2018-12-10" class="headerlink" title="2018.12.10"></a>2018.12.10</h2><p>成功地苟过了校赛啊</p>
<h2 id="2018-12-19"><a href="#2018-12-19" class="headerlink" title="2018.12.19"></a>2018.12.19</h2><p>拿到了校赛的证书和奖品，至此，蓝桥杯第一阶段完成，接下来就等明年 3 月的省赛了。<br>校赛的水准怎么说呢，感觉就是很水，题目还是很简单的，虽然不咋知道为什么我的预估分数和实际分数差了一个百位……，继续努力吧，就这样。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Algorithm \ Data Structure</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>竞赛</tag>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一只爬虫= =</title>
    <url>/2018-12-26-my-first-spider/</url>
    <content><![CDATA[<p>基于参考资料《Python 网络爬虫从入门到实践》改编而成的用于爬取 typecho 框架下 handsome 主题的主标题信息的爬虫代码。</p>
<a id="more"></a>

<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment">#用于爬取typecho框架下handsome主题的主标题信息</span>
<span class="token comment">#Author：harumonia</span>

<span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup

<span class="token keyword">def</span> <span class="token function">get_movies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span>
    <span class="token punctuation">&#125;</span>
    movie_list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token comment">#movie_list2 = []</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        link <span class="token operator">=</span> <span class="token string">'https://www.moerats.com/page/'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'/'</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>link<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"页响应状态码:"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>

        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"lxml"</span><span class="token punctuation">)</span>
        div_list1 <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">,</span> class_<span class="token operator">=</span><span class="token string">'post-meta wrapper-lg'</span><span class="token punctuation">)</span>
        <span class="token comment">#div_list2 = soup.find_all('div', class_='bd')</span>

        <span class="token keyword">for</span> each <span class="token keyword">in</span> div_list1<span class="token punctuation">:</span>
            movie <span class="token operator">=</span> each<span class="token punctuation">.</span>h2<span class="token punctuation">.</span>a<span class="token punctuation">.</span>text<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">#print(each.a.span.next_sibling.next_sibling.text)</span>
            movie_list1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>movie<span class="token punctuation">)</span>
        <span class="token triple-quoted-string string">'''
        for each in div_list2:
            director=each.p.text.strip()
            movie_list2.append(director)
        '''</span>
    <span class="token keyword">return</span> movie_list1

movies <span class="token operator">=</span> get_movies<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> movies<span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token comment">#print (movies2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title>P站爬虫v2.0</title>
    <url>/2019-01-06-pixiv-spider/</url>
    <content><![CDATA[<p>经过半个月额折腾，终于完成了 P 站爬虫 v2.0，现在可以根据关注列表来爬取关注对象的图片，唯一要做的只是输入账号密码而已。</p>
<a id="more"></a>

<p>好了，上菜~</p>
<p>操作环境：macOS Mojave、JupyterLab，代理支持 wireguard</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">import</span> requests
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options
<span class="token keyword">import</span> time
<span class="token keyword">from</span> requests<span class="token punctuation">.</span>cookies <span class="token keyword">import</span> RequestsCookieJar
<span class="token keyword">import</span> pickle
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> re
<span class="token keyword">import</span> os


<span class="token keyword">import</span> json



<span class="token keyword">def</span> <span class="token function">Download</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>name<span class="token punctuation">,</span>AthorName<span class="token punctuation">,</span>urlFrom<span class="token punctuation">,</span>typePic<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start to Down "</span><span class="token operator">+</span>AthorName<span class="token operator">+</span>name<span class="token punctuation">)</span>
    headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span><span class="token punctuation">,</span><span class="token string">'Referer'</span><span class="token punctuation">:</span> urlFrom<span class="token punctuation">&#125;</span>
    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    path<span class="token operator">=</span><span class="token string">"/Users/zxjsama/Pictures/pixiv/spider/"</span><span class="token operator">+</span>AthorName<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"."</span><span class="token operator">+</span>typePic
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"to"</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> code<span class="token punctuation">:</span>
        code<span class="token punctuation">.</span>write<span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>AthorName<span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">" over"</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">'''
def getPicId(picUrlFromPage):
    Athor = webdriver.Chrome(options=chrome_options)
    Athor.get("https://www.pixiv.net")
    for cookie in cookies:
        Athor.add_cookie(cookie)
    #Athor.get("https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id=72253628")
    Athor.get(picUrlFromPage)
    time.sleep(5)
    soup=BeautifulSoup(Athor.page_source,"lxml")
    re_pic="https://i.pximg.net/img-original/img/.*?_p0.jpg"
    pic_url=re.findall(re_pic,str(soup))
    id_name=soup.div.h1.text
    #print(soup)
    print(pic_url)
    print(id_name+"over")
'''</span>

<span class="token keyword">def</span> <span class="token function">getPicUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>AthorName<span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">:</span>
    Athor <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>

    <span class="token comment">#Athor=webdriver.Chrome()</span>
    Athor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.pixiv.net"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> cookie <span class="token keyword">in</span> cookies<span class="token punctuation">:</span>
        Athor<span class="token punctuation">.</span>add_cookie<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>
    <span class="token comment">#Athor.get("https://www.pixiv.net/member_illust.php?id=22124330")</span>
    Athor<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    headers<span class="token punctuation">[</span><span class="token string">'Referer'</span><span class="token punctuation">]</span><span class="token operator">=</span>url             <span class="token comment">#headers</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>Athor<span class="token punctuation">.</span>page_source<span class="token punctuation">,</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>

    picModel<span class="token operator">=</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"bVmoIS4"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> a <span class="token keyword">in</span> picModel<span class="token punctuation">:</span>
        <span class="token comment">#print (a)</span>
        <span class="token comment">#x=re.findall("/\d\d\d\d/\d\d/.&#123;,14&#125;/",str(a))</span>
        <span class="token comment">#print(x)</span>
        picNameF<span class="token operator">=</span>a<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"sc-eHgmQL dRvHnS"</span><span class="token punctuation">)</span>
        picNameF1<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>picNameF<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        <span class="token keyword">if</span> a<span class="token punctuation">.</span>span<span class="token punctuation">:</span>
            countPic<span class="token operator">=</span><span class="token number">0</span>
            s<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'id=\d+'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
            idmun<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\d+"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            JudgeName<span class="token operator">=</span>picNameF1<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>idmun<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_0"</span>
            path<span class="token operator">=</span><span class="token string">"/Users/zxjsama/Pictures/pixiv/spider/"</span><span class="token operator">+</span>AthorName<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>JudgeName<span class="token operator">+</span><span class="token string">".jpg"</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>JudgeName<span class="token punctuation">,</span><span class="token string">"has existed"</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span>

            pic_num<span class="token operator">=</span>a<span class="token punctuation">.</span>span<span class="token punctuation">.</span>text
            picPageUrl<span class="token operator">=</span><span class="token string">"https://www.pixiv.net/member_illust.php?mode=manga&amp;illust_id="</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>idmun<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token comment">#print(picPageUrl)</span>
            Athor<span class="token punctuation">.</span>get<span class="token punctuation">(</span>picPageUrl<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            soup_picPage<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>Athor<span class="token punctuation">.</span>page_source<span class="token punctuation">,</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>

            re111<span class="token operator">=</span><span class="token string">"https://i.pximg.net/img-master/img.+?_p\d+_master1200.jpg"</span>
            PicUrlList1<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>re111<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>soup_picPage<span class="token punctuation">)</span><span class="token punctuation">)</span>
            PicUrlList<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span>PicUrlList1<span class="token punctuation">)</span>    <span class="token comment">#去除list中的重复元素（会变序）</span>
            <span class="token comment">#print(PicUrlList)</span>
            <span class="token comment">#picNameF=soup_picPage.find_all(class_="sc-dAOnuy kNAdSR")</span>
            <span class="token comment">#print(picNameF)</span>
            <span class="token comment">#print(idmun[0])</span>
            <span class="token keyword">for</span> pic123 <span class="token keyword">in</span> PicUrlList<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>pic123<span class="token punctuation">)</span>
                picName<span class="token operator">=</span>picNameF1<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>idmun<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>countPic<span class="token punctuation">)</span>

                countPic<span class="token operator">+=</span><span class="token number">1</span>
                <span class="token keyword">try</span><span class="token punctuation">:</span>
                    Download<span class="token punctuation">(</span>pic123<span class="token punctuation">,</span>picName<span class="token punctuation">,</span>AthorName<span class="token punctuation">,</span>picPageUrl<span class="token punctuation">,</span><span class="token string">"jpg"</span><span class="token punctuation">)</span>
                <span class="token keyword">except</span> TimeoutError<span class="token punctuation">:</span>
                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"TimeoutError!!!"</span><span class="token punctuation">)</span>
                    <span class="token keyword">continue</span>
            <span class="token comment">#print("1111")</span>

        <span class="token keyword">else</span><span class="token punctuation">:</span>
            s<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'id=\d+'</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
            idmun<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\d+"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            picName<span class="token operator">=</span>picNameF1<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>idmun<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment">#文件名</span>
            path<span class="token operator">=</span><span class="token string">"/Users/zxjsama/Pictures/pixiv/spider/"</span><span class="token operator">+</span>AthorName<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>picName<span class="token operator">+</span><span class="token string">".jpg"</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span>picName<span class="token punctuation">,</span><span class="token string">"has exisited"</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span>


            picPageUrl<span class="token operator">=</span><span class="token string">"https://www.pixiv.net/member_illust.php?mode=medium&amp;illust_id="</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>idmun<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token comment">#print(picPageUrl)</span>
            Athor<span class="token punctuation">.</span>get<span class="token punctuation">(</span>picPageUrl<span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            soup_picPage<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>Athor<span class="token punctuation">.</span>page_source<span class="token punctuation">,</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>

            <span class="token comment">#print(str(soup_picPage))</span>
            re111<span class="token operator">=</span><span class="token string">"https://i.pximg.net/img-original/img.+?_p\d+.\w\w\w"</span>
            re222<span class="token operator">=</span><span class="token string">"https://i.pximg.net/img-master/img.+?_p\d"</span>
            PicUrlList1<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>re111<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>soup_picPage<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token comment">#PicUrlList2=re.findall(re222,PicUrlList1[0])</span>
            <span class="token comment">#PicUrlList=PicUrlList2[0]+".jpg"</span>
            PicUrlList<span class="token operator">=</span>PicUrlList1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"jpg"</span><span class="token punctuation">,</span>PicUrlList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                typePic<span class="token operator">=</span><span class="token string">"jpg"</span>
            <span class="token keyword">elif</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"png"</span><span class="token punctuation">,</span>PicUrlList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                typePic<span class="token operator">=</span><span class="token string">"png"</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            <span class="token comment">#print(idmun)</span>
            <span class="token comment">#print(PicUrlList1)</span>
            <span class="token comment">#picNameF=soup_picPage.find_all(class_="sc-dAOnuy kNAdSR")</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                Download<span class="token punctuation">(</span>PicUrlList<span class="token punctuation">,</span>picName<span class="token punctuation">,</span>AthorName<span class="token punctuation">,</span>picPageUrl<span class="token punctuation">,</span>typePic<span class="token punctuation">)</span>
            <span class="token keyword">except</span> TimeoutError<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"TimeoutError!!!"</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span>
    Athor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>



<span class="token keyword">def</span> <span class="token function">CreatFloder</span><span class="token punctuation">(</span>id_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">file</span> <span class="token operator">=</span> <span class="token string">"/Users/zxjsama/Pictures/pixiv/spider/"</span><span class="token operator">+</span>id_name
    folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> folder<span class="token punctuation">:</span>                   <span class="token comment">#判断是否存在文件夹如果不存在则创建为文件夹</span>
        os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>            <span class="token comment">#makedirs 创建文件时如果路径不存在会创建这个路径</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"---  new folder...  ---"</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"---  OK  ---"</span><span class="token punctuation">)</span>

    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"---  There is this folder!  ---"</span><span class="token punctuation">)</span>




headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span><span class="token string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span><span class="token punctuation">,</span><span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'http://www.pixiv.net'</span><span class="token punctuation">&#125;</span>

chrome_options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>
chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"--headless"</span><span class="token punctuation">)</span>       <span class="token comment"># define headless</span>
chrome_options<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'user-agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"'</span><span class="token punctuation">)</span>


driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>

<span class="token comment">#driver = webdriver.Chrome()     # 打开 Chrome 浏览器</span>
<span class="token triple-quoted-string string">'''
driver.get("https://accounts.pixiv.net/login?lang=zh&amp;source=pc&amp;view_type=page&amp;ref=wwwtop_accounts_index")

driver.find_element_by_xpath(u"(.//*[normalize-space(text()) and normalize-space(.)='忘记了'])[1]/following::input[1]").click()
driver.find_element_by_xpath(u"(.//*[normalize-space(text()) and normalize-space(.)='忘记了'])[1]/following::input[1]").clear()
driver.find_element_by_xpath(u"(.//*[normalize-space(text()) and normalize-space(.)='忘记了'])[1]/following::input[1]").send_keys("账号")
driver.find_element_by_xpath(u"(.//*[normalize-space(text()) and normalize-space(.)='忘记了'])[1]/following::input[2]").clear()
driver.find_element_by_xpath(u"(.//*[normalize-space(text()) and normalize-space(.)='忘记了'])[1]/following::input[2]").send_keys("密码")
driver.find_element_by_xpath(u"(.//*[normalize-space(text()) and normalize-space(.)='忘记了'])[1]/following::button[1]").click()

time.sleep(5)
#driver.close()
pickle.dump(driver.get_cookies() , open("cookies.pkl","wb"))
print("cookies over")
print(driver.page_source)
'''</span>
req<span class="token operator">=</span>requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#cookies1=driver.get_cookies()</span>
<span class="token comment">#req.headers=&#123;"User-Agent":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36",'Referer': 'http://www.pixiv.net'&#125;</span>
cookies <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"cookies.pkl"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#关注页面</span>
<span class="token keyword">for</span> cookie <span class="token keyword">in</span> cookies<span class="token punctuation">:</span>
    req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>cookie<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cookie<span class="token punctuation">[</span><span class="token string">'value'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
r<span class="token operator">=</span>req<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.pixiv.net/bookmark.php?type=user"</span><span class="token punctuation">)</span>
headers<span class="token punctuation">[</span><span class="token string">'Referer'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"https://www.pixiv.net/bookmark.php?type=user"</span>
soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>
re1<span class="token operator">=</span><span class="token string">'/member.php/?id='</span>
a<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>re1<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token punctuation">)</span>
m<span class="token operator">=</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"ui-layout-west"</span><span class="token punctuation">)</span>
re2<span class="token operator">=</span><span class="token string">'\d&#123;5,&#125;'</span>
m<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>
idNumber<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>re2<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>script<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#获取关注id</span>
<span class="token keyword">for</span> idUrl <span class="token keyword">in</span> idNumber<span class="token punctuation">:</span>
    url<span class="token operator">=</span><span class="token string">"https://www.pixiv.net/member_illust.php?id="</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>idUrl<span class="token punctuation">)</span>
    Athor <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>chrome_options<span class="token punctuation">)</span>
    Athor<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.pixiv.net"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> cookie <span class="token keyword">in</span> cookies<span class="token punctuation">:</span>
        Athor<span class="token punctuation">.</span>add_cookie<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>
    Athor<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    headers<span class="token punctuation">[</span><span class="token string">'Referer'</span><span class="token punctuation">]</span><span class="token operator">=</span>url           <span class="token comment">#headers</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    soup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>Athor<span class="token punctuation">.</span>page_source<span class="token punctuation">,</span><span class="token string">"lxml"</span><span class="token punctuation">)</span>
    AthorName1<span class="token operator">=</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"_2VLnXNk"</span><span class="token punctuation">)</span>
    AthorName<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>AthorName1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    CreatFloder<span class="token punctuation">(</span>AthorName<span class="token punctuation">)</span>
    Athor<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    picNumber<span class="token operator">=</span>soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"sc-feJyhm eOaQTJ"</span><span class="token punctuation">)</span>
    tempa<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"\d+"</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>picNumber<span class="token punctuation">)</span><span class="token punctuation">)</span>
    pageNumMax<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>tempa<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">48</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>pageNumMax<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        url_fin<span class="token operator">=</span>url<span class="token operator">+</span><span class="token string">"&amp;p="</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>url_fin<span class="token punctuation">)</span>                 <span class="token comment">#至此得到关注作者的主页（包括分页</span>
        getPicUrl<span class="token punctuation">(</span>url_fin<span class="token punctuation">,</span>AthorName<span class="token punctuation">,</span>headers<span class="token punctuation">)</span>


    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"over"</span><span class="token punctuation">)</span>

<span class="token triple-quoted-string string">'''
driver1 = webdriver.Chrome()
driver1.get("https://www.pixiv.net")
for cookie in cookies:
    driver1.add_cookie(cookie)
driver1.get("https://www.pixiv.net/member.php?id=22124330&amp;p=1")
driver1.find_element_by_xpath("(.//*[normalize-space(text()) and normalize-space(.)='- -'])[7]/following::div[2]").click()
soup=BeautifulSoup(driver.page_source())
print(soup)
'''</span>

<span class="token comment">#print(r.text)</span>
driver<span class="token punctuation">.</span>headers
driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>写的比较凌乱，等熬过了复习周再修改吧，顺便把它部署到 VPS 上~</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>pixiv</tag>
      </tags>
  </entry>
  <entry>
    <title>flask部署的问题及解决</title>
    <url>/2019-03-11-questions-and-solutions-of-flask-deploy-1/</url>
    <content><![CDATA[<p>基于 Ray 的<a href="https://www.cnblogs.com/Ray-liang/p/4173923.html">阿里云部署 Flask + WSGI + Nginx 详解
</a>对我所做的选课模拟系统进行了服务器端的部署。<br>环境：flask uwsgi Ubuntu Nginx</p>
<a id="more"></a>

<h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h2><h3 id="端口被占用"><a href="#端口被占用" class="headerlink" title="端口被占用"></a>端口被占用</h3><p>查看所有的服务端口（ESTABLISHED</p>
<blockquote>
<p>netstat -a</p>
</blockquote>
<p>查看所有的服务端口，显示 pid 号（LISTEN，ESTABLISHED）</p>
<blockquote>
<p>netstat -ap</p>
</blockquote>
<p>查看某一（**）端口，则可以结合 grep 命令：</p>
<blockquote>
<p>netstat -ap | grep **</p>
</blockquote>
<p>如查看**端口，也可以在终端中输入：</p>
<blockquote>
<p>lsof -i:**</p>
</blockquote>
<p>若要停止使用这个端口的程序，使用 kill +对应的 pid</p>
<blockquote>
<p>kill pid</p>
</blockquote>
<p>还有一个比较好用的命令，查看**端口：</p>
<blockquote>
<p>sudo netstat -lnp | grep **</p>
</blockquote>
<p>查看端口号和运行程序：</p>
<blockquote>
<p>netstat -atunp | more</p>
</blockquote>
<p>查看进程所用端口：</p>
<blockquote>
<p>netstat -tlnp|grep **</p>
</blockquote>
<p>以上的命令对排查该类问题有很好的帮助。<br>同时，如果安装了宝塔 Linux 的 LMNP 群的话，就不用再另行</p>
<blockquote>
<p>sudo apt-get install nginx</p>
</blockquote>
<p>了，不然宝塔的 Nginx 会占用 80 端口而导致失败。</p>
<h2 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h2><h3 id="uwsgi-的配置问题"><a href="#uwsgi-的配置问题" class="headerlink" title="uwsgi 的配置问题"></a>uwsgi 的配置问题</h3><p>uwsgi 的配置文件需要在 ray 所提供的样例之上进行适应性调整。<br>另，评论中指出的</p>
<blockquote>
<p>config.ini 文件<br>chdir = /home/www/ 要改成 chdir = /home/www/my_flask</p>
</blockquote>
<p>供参考</p>
<h2 id="Q3"><a href="#Q3" class="headerlink" title="Q3"></a>Q3</h2><h3 id="502-提示"><a href="#502-提示" class="headerlink" title="502 提示"></a>502 提示</h3><p>部署完成之后遇到了 502 提示，在网上查找了许多的解决方案都没有用，后来才发现，uwsgi 所占用的 8001 端口并没有处于运行状态，<strong>手动运行 uwsgi</strong>后网站恢复运行，进而考虑到是<code>Supervisor</code>出现问题，使用</p>
<blockquote>
<p>sudo service supervisor start</p>
</blockquote>
<p>查找出错误并解决之（似乎是配置文件中指定的 log 文件夹要自己创建，它并不会自动创建这样子）。</p>
<h2 id="Q4"><a href="#Q4" class="headerlink" title="Q4"></a>Q4</h2><h3 id="个人的调试办法"><a href="#个人的调试办法" class="headerlink" title="个人的调试办法"></a>个人的调试办法</h3><p>在网站第一次全部部署完成之后，出现了很多的小问题，这里我将项目拆解开来进行一步一步的测试</p>
<h4 id="S1-检测文件本身是否有问题"><a href="#S1-检测文件本身是否有问题" class="headerlink" title="S1 检测文件本身是否有问题"></a>S1 检测文件本身是否有问题</h4><p>方法是直接运行 manage.py</p>
<blockquote>
<p>这里注意，要用过外网访问 localhost：5000 的话，要使用 python manage.py runserver –host 0.0.0.0</p>
</blockquote>
<p>记得要给 5000 端口放行</p>
<h4 id="S2-检测-uwsgi-有无问题"><a href="#S2-检测-uwsgi-有无问题" class="headerlink" title="S2 检测 uwsgi 有无问题"></a>S2 检测 uwsgi 有无问题</h4><p>uwsgi 成功运行之后了，网站再次变为可访问状态，使用 Ctrl+C 之后，网站再次不可访问，然后配置使用<strong>Supervisor</strong> 将 uwsgi 变为保持开启状态。<br>操作完成之后，网站变为可访问（依旧是 5000 端口）</p>
<h3 id="S3-检测-Nginx"><a href="#S3-检测-Nginx" class="headerlink" title="S3 检测 Nginx"></a>S3 检测 Nginx</h3><p>不出意外的话，这就是最后一步了，表面上是 Nginx 一直在报错，然而实际上 Nginx 配置并没有什么问题，完成了上述两步的调试之后，Nginx 也就不报错了，这时可以直接使用域名访问网站。</p>
<h2 id="关于-flask-制作网站的后续"><a href="#关于-flask-制作网站的后续" class="headerlink" title="关于 flask 制作网站的后续"></a>关于 flask 制作网站的后续</h2><p>后面准备给网站加上域名（应该不是这个模拟网站，而是工作室的网站吧）<br>掌握对网站维护的技巧<br>以上。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>N皇后问题</title>
    <url>/2019-06-11-NQueen/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/n-queens/">No.51 N 皇后问题</a></p>
<p>n 皇后问题研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。</p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/8-queens.png" alt="question" loading="lazy"></p>
<p>上图为 8 皇后问题的一种解法。</p>
<p>给定一个整数 n，返回所有不同的  n  皇后问题的解决方案。</p>
<p>每一种解法包含一个明确的  n 皇后问题的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p>
<a id="more"></a>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>方法一：<br>修改了 N 皇后问题 I 中的解法，最终运行效率击败 55%</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> res<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> col<span class="token punctuation">,</span>dig1<span class="token punctuation">,</span>dig2<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token function">totalNQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        col<span class="token operator">=</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dig1<span class="token operator">=</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dig2<span class="token operator">=</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> row<span class="token punctuation">;</span>
        res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token function">putQueen</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">putQueen</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> row<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            res<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>col<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dig1<span class="token punctuation">[</span>index<span class="token operator">+</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>dig2<span class="token punctuation">[</span>index<span class="token operator">-</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                row<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                dig1<span class="token punctuation">[</span>i<span class="token operator">+</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                dig2<span class="token punctuation">[</span>index<span class="token operator">-</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token function">putQueen</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>n<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                col<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
                dig1<span class="token punctuation">[</span>i<span class="token operator">+</span>index<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
                dig2<span class="token punctuation">[</span>index<span class="token operator">-</span>i<span class="token operator">+</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>
                row<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法二：（<a href="http://www.ic-net.or.jp/home/takaken/e/queen/">takaken</a>的解法）<br>bitmap 解法，耗时 0ms，运用了位运算的一些方法，使得解题的效率大大提高</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">public</span><span class="token operator">:</span>
      <span class="token keyword">int</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> hills<span class="token punctuation">,</span> <span class="token keyword">int</span> next_row<span class="token punctuation">,</span> <span class="token keyword">int</span> dales<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     row: 当前放置皇后的行号
     hills: 主对角线占据情况 [1 = 被占据，0 = 未被占据]
     next_row: 下一行被占据的情况 [1 = 被占据，0 = 未被占据]
     dales: 次对角线占据情况 [1 = 被占据，0 = 未被占据]
     count: 所有可行解的个数
     */</span>

    <span class="token comment">// 棋盘所有的列都可放置，</span>
    <span class="token comment">// 即，按位表示为 n 个 '1'</span>
    <span class="token comment">// bin(cols) = 0b1111 (n = 4), bin(cols) = 0b111 (n = 3)</span>
    <span class="token comment">// [1 = 可放置]</span>
    <span class="token keyword">int</span> columns <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> n<span class="token punctuation">)</span>   <span class="token comment">// 如果已经放置了 n 个皇后</span>
      count<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 累加可行解</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 当前行可用的列</span>
      <span class="token comment">// ! 表示 0 和 1 的含义对于变量 hills, next_row and dales的含义是相反的</span>
      <span class="token comment">// [1 = 未被占据，0 = 被占据]</span>
      <span class="token keyword">int</span> free_columns <span class="token operator">=</span> columns <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>hills <span class="token operator">|</span> next_row <span class="token operator">|</span> dales<span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token comment">// 找到可以放置下一个皇后的列</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>free_columns <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// free_columns 的第一个为 '1' 的位</span>
        <span class="token comment">// 在该列我们放置当前皇后</span>
        <span class="token keyword">int</span> curr_column <span class="token operator">=</span> <span class="token operator">-</span> free_columns <span class="token operator">&amp;</span> free_columns<span class="token punctuation">;</span>

        <span class="token comment">// 放置皇后</span>
        <span class="token comment">// 并且排除对应的列</span>
        free_columns <span class="token operator">^=</span> curr_column<span class="token punctuation">;</span>

        count <span class="token operator">=</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>hills <span class="token operator">|</span> curr_column<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
                next_row <span class="token operator">|</span> curr_column<span class="token punctuation">,</span>
                <span class="token punctuation">(</span>dales <span class="token operator">|</span> curr_column<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span>
                count<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> count<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">totalNQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>Algorithm \ Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>No.79</title>
    <url>/2019-06-11-No79/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/word-search">No.79 单词搜索</a></p>
<p>给定一个二维网格和一个单词，找出该单词是否存在于网格中。</p>
<p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p>
<a id="more"></a>

<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">示例<span class="token operator">:</span>

board <span class="token operator">=</span>
<span class="token punctuation">[</span>
  <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">'S'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'S'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>

给定 word <span class="token operator">=</span> <span class="token string">"ABCCED"</span><span class="token punctuation">,</span> 返回 <span class="token boolean">true</span><span class="token punctuation">.</span>
给定 word <span class="token operator">=</span> <span class="token string">"SEE"</span><span class="token punctuation">,</span> 返回 <span class="token boolean">true</span><span class="token punctuation">.</span>
给定 word <span class="token operator">=</span> <span class="token string">"ABCB"</span><span class="token punctuation">,</span> 返回 <span class="token boolean">false</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>这道题目可以使用回溯法来解决，这里提几个关键的地方。<br>line29 重置为 false，这是回溯法的关键，即将状态回滚回到递归前的状态。<br>line3 方向数组，配合 line22 可以将代码量压缩很多，而且逻辑关系十分清晰。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> visited<span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">&lt;</span>n <span class="token operator">&amp;&amp;</span> x<span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">bool</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span><span class="token keyword">int</span> startx<span class="token punctuation">,</span><span class="token keyword">int</span> starty<span class="token punctuation">,</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> word<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span>word<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> word<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">==</span>board<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span><span class="token operator">==</span>word<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        visited<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> newx <span class="token operator">=</span> startx<span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> newy <span class="token operator">=</span> starty<span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>newx<span class="token punctuation">,</span>newy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">recursion</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>newx<span class="token punctuation">,</span>newy<span class="token punctuation">,</span>word<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        visited<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">bool</span> <span class="token function">exist</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    m<span class="token operator">=</span>board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    n<span class="token operator">=</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    visited <span class="token operator">=</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//    if(my==0 ) return false;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">recursion</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>Algorithm \ Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 数据挖掘基础</title>
    <url>/2019-07-16-Python-basic-of-DM/</url>
    <content><![CDATA[<p>本篇记载了如何在 python 中使用数据挖掘的相关的模块。<br>都是基础级的东西了。</p>
<pre><code>参考：
    《python数据科学入门》
    在学习时零散地从网站、博客上获得的相关的知识</code></pre>
<a id="more"></a>

<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><p>arg 的用法</p>
<h2 id="fancy-indexing"><a href="#fancy-indexing" class="headerlink" title="fancy indexing"></a>fancy indexing</h2><h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><h2 id="Dataframe"><a href="#Dataframe" class="headerlink" title="Dataframe"></a>Dataframe</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>方法一：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_clipboard<span class="token punctuation">(</span>engine<span class="token operator">=</span><span class="token string">'python'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>与之对应的是 read_clipboard</p>
<p>方法二:<br>通过 Series 列表创建</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token operator">=</span>pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">[</span>Series<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h3><h4 id="np"><a href="#np" class="headerlink" title="np"></a>np</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">df_new<span class="token punctuation">[</span><span class="token string">'May 2020'</span><span class="token punctuation">]</span><span class="token operator">=</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>注意行数，超过会报错</p>
<h4 id="series"><a href="#series" class="headerlink" title="series"></a>series</h4><p>1.由于 dataframe 本质上是由一列一列的 series 组成的，所以可以有以下做法</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">df_new<span class="token punctuation">[</span><span class="token string">'May 2020'</span><span class="token punctuation">]</span><span class="token operator">=</span>Series<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样做还有一种好处，就是可以修改指定的行</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">df_new<span class="token punctuation">[</span><span class="token string">'May 2020'</span><span class="token punctuation">]</span><span class="token operator">=</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><p>.head()<br>.tail()<br>.iloc[行切片,列切片]<br>.loc[行切片，列切片]</p>
<h3 id="reindex"><a href="#reindex" class="headerlink" title="reindex"></a>reindex</h3><p>Series.reindex(index=[],fill_value=)<br>fill_value 填充溢出项<br>method:ffill follow fill</p>
<p>溢出默认为 NaN</p>
<h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p>.isnull()<br>.notnull()</p>
<h4 id="dataframe"><a href="#dataframe" class="headerlink" title="dataframe"></a>dataframe</h4><p>.dropnan() 数据清洗？<br>axis 0:行 1:列<br>how any:任意 all:全部</p>
<p>.fillna()</p>
<h3 id="多级-index"><a href="#多级-index" class="headerlink" title="多级 index"></a>多级 index</h3><p>.unstack() 转化为 dataframe</p>
<h3 id="mapping"><a href="#mapping" class="headerlink" title="mapping"></a>mapping</h3><p>DataFrame.map(dict)<br>注意 index 的一致性</p>
<h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><p>DataFrame.replace(dict)<br>or<br>DataFrame.replace(a,b)<br>a,b 可以为 list</p>
<h2 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h2><p>DataFrame.describe()</p>
<p>Series.sort_values()<br>Series.sort_index()</p>
<p>DataFrame[].sort_values() 输出 Series<br>DataFrame.sort_values()<br>DataFrame.sort_index()</p>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><p>相同的 columns<br>key<br>how</p>
<h3 id="concatenate"><a href="#concatenate" class="headerlink" title="concatenate"></a>concatenate</h3><h3 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h3><p>del dataframe[‘column’]<br>删除指定列</p>
<h2 id="数据清洗（略）"><a href="#数据清洗（略）" class="headerlink" title="数据清洗（略）"></a>数据清洗（略）</h2><p>dataframe[‘column’].unique() 去除一列中的重复数据(返回 series)</p>
<p>dataframe.drop_duplicates([‘column’]) 按照指定的列进行去重(直接对本体进行操作)</p>
<pre><code>args:keep(选择行基准)</code></pre>
<p>df_clean[~df_clean[‘Type’].isin([‘Free’])]<br>去除 type 列中值为 Free 的行</p>
<h2 id="时间序列操作"><a href="#时间序列操作" class="headerlink" title="时间序列操作"></a>时间序列操作</h2><p>方便生成长的 series</p>
<p>series[xxxx-xx-xx] 返回时间为 xxxx-xx 的数据<br>series[xxxxxxxx] 同上</p>
<p>pd.date_range(‘xxxx-xx-xx’,periods=num,freq=’W’)<br>返回 datetimeindex 数组,长度为 num,间隔为周</p>
<pre><code>freq:5H 以每5小时为间隔</code></pre>
<p>series[xxxx-xx]<br>返回时间为 xxxx-xx 的数据集合</p>
<h3 id="series-resample-填充、采样"><a href="#series-resample-填充、采样" class="headerlink" title="series.resample() 填充、采样"></a>series.resample() 填充、采样</h3><h4 id="填充-1"><a href="#填充-1" class="headerlink" title="填充"></a>填充</h4><p>series.resample(‘H’).ffill() .bfill()<br>更多操作参照参数表</p>
<h4 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h4><p>范式</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">weekly_df<span class="token punctuation">[</span><span class="token string">'Ali'</span><span class="token punctuation">]</span><span class="token operator">=</span>stock_df<span class="token punctuation">[</span><span class="token string">'ali'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'W'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="数据分箱"><a href="#数据分箱" class="headerlink" title="数据分箱"></a>数据分箱</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">bins<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">59</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>
df<span class="token punctuation">[</span><span class="token string">'categ'</span><span class="token punctuation">]</span><span class="token operator">=</span>pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'score'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>bins<span class="token punctuation">,</span>labels<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'bad'</span><span class="token punctuation">,</span><span class="token string">'good'</span><span class="token punctuation">,</span><span class="token string">'great'</span><span class="token punctuation">,</span><span class="token string">'perfect'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="数据分组"><a href="#数据分组" class="headerlink" title="数据分组"></a>数据分组</h2><p>g=df.groupby(df[‘col’)]</p>
<p>g.groups 显示分组结果<br>df_col=g.get_group(‘col’) 生成新的基于 col 的 df</p>
<blockquote>
<p>这里的 col 指的是列中的某一个值</p>
</blockquote>
<p>接下来就可以进行 df 的常规操作，如：<br>df_col.mean() 求均值</p>
<p>for name,group in g: #对 group 进行访问<br>print(name)<br>print(group)</p>
<h3 id="对某两个-col-作-groupby"><a href="#对某两个-col-作-groupby" class="headerlink" title="对某两个 col 作 groupby"></a>对某两个 col 作 groupby</h3><p>g=df.groupby(df[‘col1’,’col2’])<br>for (name1,name2),group in g:</p>
<h2 id="数据聚合"><a href="#数据聚合" class="headerlink" title="数据聚合"></a>数据聚合</h2><p>g.agg(‘argname’)<br>同时，也可以自定义聚合方式</p>
<h2 id="透视表"><a href="#透视表" class="headerlink" title="透视表"></a>透视表</h2><p>pd.pivot_table(df,index=[‘col’……],values=[‘col’……],aggfunc=’<code>funcname</code>‘)</p>
<pre><code>other args:
    columns:要分析的列
    fill_value:填充Nan</code></pre>
<h2 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h2><p>df[‘col’].value_counts()<br>统计该列数值次数<br>series.unstack()<br>将多级的 series 转换为 df<br>df.sort_values(‘col’,……)</p>
<h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><h2 id="subplot-子图"><a href="#subplot-子图" class="headerlink" title="subplot() 子图"></a>subplot() 子图</h2><p>subplots()</p>
<p>plot()</p>
<pre><code>args:
stacked : 堆叠形式</code></pre>
<p>df.iloc[rowindex].plot()<br>按行画图</p>
<h2 id="hist"><a href="#hist" class="headerlink" title="hist"></a>hist</h2><p>plt.hist()<br>直方图</p>
<h1 id="Seaborn"><a href="#Seaborn" class="headerlink" title="Seaborn"></a>Seaborn</h1><p>hist 直方图<br>kde 密度图<br>rug 轴须图<br>heatmap 热力图</p>
<p>sns.load_dataset(args) 获取库数据</p>
<p>sns.axes_style() 列出参数列表然后可以进行 sns.set_style({a:b},[……)修改</p>
<p>plotting_context()<br>set_context()</p>
<p>.set() 恢复为默认参数</p>
<p>sns.color_palette() # RGB<br>sns.palplot() # 查看当前的色板<br>可以增加色板的容色数</p>
<p>sns.color_palette(‘hls’,num)<br>生成 num 数目的颜色</p>
<p>seaborn.pythondata.org</p>
<h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>每一行的是由[0]和[1]组成<br>[0]是 index 的类型,[1]是一个 Series</p>
<p>shift+tab</p>
<h4 id="magic-function"><a href="#magic-function" class="headerlink" title="magic function"></a>magic function</h4><p>%timeit +函数<br>e.g. %timeit np.arange(10)</p>
<h4 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h4><p>public dataset</p>
<h4 id="seaborn-字体"><a href="#seaborn-字体" class="headerlink" title="seaborn 字体"></a>seaborn 字体</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">myfont<span class="token operator">=</span>FontProperties<span class="token punctuation">(</span>fname<span class="token operator">=</span><span class="token string">r'/Users/zxjsama/Library/Fonts/SimHei.ttf'</span><span class="token punctuation">)</span>
sns<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>font<span class="token operator">=</span>myfont<span class="token punctuation">.</span>get_family<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sns<span class="token punctuation">.</span>set_style<span class="token punctuation">(</span><span class="token string">"whitegrid"</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"font.sans-serif"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'SimHei'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>datasci</tag>
      </tags>
  </entry>
  <entry>
    <title>flask 开发心得 part 1</title>
    <url>/2019-07-16-flask-experience-part/</url>
    <content><![CDATA[<p>这个心得是我在进行“中医基础数据管理”系统的开发过程中所遇到的一些问题以及其解决方法。</p>
<p>截止到 2019 年 07 月 16 日 17:22:33，项目的第一阶段开始进入后期，所以在这里写下第一阶段的 QA。</p>
<h1 id="安全性小结"><a href="#安全性小结" class="headerlink" title="安全性小结"></a>安全性小结</h1><h2 id="开启前后端双重验证"><a href="#开启前后端双重验证" class="headerlink" title="开启前后端双重验证"></a>开启前后端双重验证</h2><p>起因:在完成了表单之后,为了方便直接使用 postman 进行数据的交互,结果 post 错误数据的时候,后端崩了…..<br>反思:前端的校验可以减轻服务器端的压力,但是如果只依赖前端的校验,后端不加防备,无疑是十分不安全的,来自前端的伪装攻击很容易就可以摧垮服务器端的程序.</p>
<h2 id="开启数据加密"><a href="#开启数据加密" class="headerlink" title="开启数据加密"></a>开启数据加密</h2><p>密码等需要加密的数据进行明文的交互无疑是非常不安全的.</p>
<h2 id="使用-rollback-来保证数据库的安全性"><a href="#使用-rollback-来保证数据库的安全性" class="headerlink" title="使用 rollback 来保证数据库的安全性"></a>使用 rollback 来保证数据库的安全性</h2><p>如题</p>
<h1 id="性能小结"><a href="#性能小结" class="headerlink" title="性能小结"></a>性能小结</h1><h2 id="mysql-的性能"><a href="#mysql-的性能" class="headerlink" title="mysql 的性能"></a>mysql 的性能</h2><p>课上讲到了 SQL 联合查找时的性能问题,就去查了一下.<br>主流的观点认为,视图的使用会提高数据库的压力,联合语句的使用会提高后端的服务器性能消耗,所以应该手动分成各个小部分来执行</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>担任项目经理的第一周</title>
    <url>/2019-07-16-the-first-week-to-be-a-project-manager/</url>
    <content><![CDATA[<p>有幸担任了工作室的“中医基础信息管理”项目的项目经理，于此写下第一周的一些心得体会，以作参考。</p>
<p>先使用 CVS 来打个人生的 tag 吧</p>
<p><strong>milestone 3.1</strong></p>
<h2 id="个人体会"><a href="#个人体会" class="headerlink" title="个人体会"></a>个人体会</h2><p>在独立完成一个从前端网页到后端处理的小项目中，收获了很多。<br>首先是前端，从 h5 到 js，积累了很多前端模板使用的相关的经验,很多是独有的在模板中才存在而书本上不会涉及的(比如上次所说的 layui 监听体系).由此,以后再使用其他的模板时,就知道应该有哪些的应该提前了解的事项。<br>然后是后端，python 的知识学过很多，但是在进行小的项目（比如简单的网页爬虫、普通功能函数设计等）时，少有能够将 python 的解牛刀–高级语法(动态赋值\重写类方法等)使用得如此酣畅的情情境。</p>
<p>而在后半周的项目统筹之中,后端要实现前端的交互接口,这不可能要等到前端做完才去做.那么,如何这在二者之间进行统筹安排,使得二者可以实现独立开发,这是我此次最大的收获.<br>开发之前要有一个预案,要清楚,开发的过程中,每个模块可能会遇到哪些问题,并给出必要的提示和帮助.<br>作为唯一一个在团队中知道前后端每一个函数的具体作用的人,要承担的责任和义务也是团队之中唯一的.</p>
<h2 id="统筹规划"><a href="#统筹规划" class="headerlink" title="统筹规划"></a>统筹规划</h2><p>拿到项目的首要任务就是进行项目的分割规划.</p>
<ul>
<li>项目的目录结构</li>
<li>每个人的负责模块</li>
<li>命名规范</li>
</ul>
<p>个人感觉:<br><em>项目的前期重在沟通,项目的中期重在效率,我预想中的项目的后期,应该是回到注重沟通</em></p>
<p>让每个人在进行工作时能够明确的明白,自己要做什么,自己要做到什么样的结果(当然,也要明白一个人能做到什么).给出需求,然后让团队成员各司其职.前期不注重沟通的直接结果就是为中后期的很多问题埋下祸根.</p>
<p>中期,大家都明白自己应该做什么,然后就进入了高速开发阶段.</p>
<p>后期,这个阶段应该是进行统合,这里只有规划,而没有实践的证实.具体等到后期再说吧.</p>
<p>一句话:</p>
<blockquote>
<p>很多时候,一个好的程序员,最核心能力的不是创新,而是执行.<br>创新是灵魂,执行是生命.</p>
</blockquote>
<h2 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h2><h3 id="命名规范化"><a href="#命名规范化" class="headerlink" title="命名规范化"></a>命名规范化</h3><p>首先是命名的规范化.<br>按照规定的格式进行文件\类\函数\甚至是变量的命名,基本上解决了因命名冲突而引起的以及可能引起的各种问题.<br>命名规范化的另一个好处就是降低前后端分离开发时的沟通成本.<br>至于其他的在代码方面的好处上次已经说过了</p>
<pre><code>js 位置
集中
js监听事件</code></pre>
<h3 id="代码规范化"><a href="#代码规范化" class="headerlink" title="代码规范化"></a>代码规范化</h3><p>代码格式的规范化导致的唯一结果就是编码的效率得到了极大幅度的提高.<br>前端所用到的模块在我之前的两个范例之中都有迹可循,后端的数据库操作和交互接口的实现也可以进行一定程度上的复用.</p>
<h4 id="注释规范化"><a href="#注释规范化" class="headerlink" title="注释规范化"></a>注释规范化</h4><p>这一点做的及其不好,我在帮大家解决困难时感觉要被大家解决了= =.</p>
<blockquote>
<p>程序员最讨厌写文档，比这个还讨厌的事情就是，别人居然不写文档！</p>
</blockquote>
<h3 id="工作流程规范化"><a href="#工作流程规范化" class="headerlink" title="工作流程规范化"></a>工作流程规范化</h3><p>这一点做的不够好.很明显,在 gitlab 上进行合并时,同样的代码实现,有的同学会出现很多冲突,而有的同学则没有,这就是工作流程没有进行严格规范的结果.肯定的是,有的人仔细地看了 git 教程,知道哪些做法可以避免冲突,而其他人则很显然没有去注意这些.所以流程规范,在以后的工作安排中最好还是要写在工作安排之中.</p>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
  </entry>
  <entry>
    <title>H5初阶学习笔记</title>
    <url>/2019-07-18-H5-note/</url>
    <content><![CDATA[<h1 id="新增主体结构元素"><a href="#新增主体结构元素" class="headerlink" title="新增主体结构元素"></a>新增主体结构元素</h1><h2 id="页面布局"><a href="#页面布局" class="headerlink" title="页面布局"></a>页面布局</h2><table>
<thead>
<tr>
<th>元素名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>header</td>
<td>标题头部区域的内容（用于页面或页面中的一块区域）</td>
</tr>
<tr>
<td>footer</td>
<td>标记脚部区域的内容（用于整个页面或页面的一块区域）</td>
</tr>
<tr>
<td>section</td>
<td>Web 页面中的一块独立区域</td>
</tr>
<tr>
<td>article</td>
<td>独立的文章内容</td>
</tr>
<tr>
<td>aside</td>
<td>相关内容或应用（常用于侧边栏）</td>
</tr>
<tr>
<td>nav</td>
<td>导航类辅助内容</td>
</tr>
</tbody></table>
<h2 id="section"><a href="#section" class="headerlink" title="section"></a>section</h2><p>将页面分块<br>讲一个内容划分为几段</p>
<blockquote>
<p>总结：不要使用 section 元素作为设置样式的元素<br>如果 article 元素适合，就不要用 section<br>没有标题的区块内容使用 section</p>
</blockquote>
<h2 id="article"><a href="#article" class="headerlink" title="article"></a>article</h2><p>相对独立的内容</p>
<h2 id="aside"><a href="#aside" class="headerlink" title="aside"></a>aside</h2><p>与当前页面主题内容相关的部分，如：导航条、广告、侧边栏等<br>·包含在 article 中作为附属内容<br>·作为页面的全局站点的一个部分</p>
<h2 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h2><p>用于页面导航的链接组<br>·传统的导航条<br>·侧边栏导航<br>·翻页导航<br>·内页导航</p>
<h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><p><a href="http://www.runoob.com/tags/att-time-datetime.html">菜鸟教程——time</a></p>
<p>语法</p>
<blockquote>
<time datetime="YYYY-MM-DDThh:mm:ssTZD">
</blockquote>
<p>属性值</p>
<h5 id="值"><a href="#值" class="headerlink" title="值:"></a>值:</h5><p>YYYY-MM-DDThh:mm:ssTZD<br>日期或时间。下面解释了其中的成分：</p>
<h5 id="描述"><a href="#描述" class="headerlink" title="描述:"></a>描述:</h5><p>YYYY - 年 (例如 2011)<br>MM - 月 (例如 01 表示 January)<br>DD - 天 (例如 08)<br>T - 必需的分隔符，若规定时间的话<br>hh - 时 (例如 22 表示 10.00pm)<br>mm - 分 (例如 55)<br>ss - 秒 (例如 03)<br>TZD - 时区标识符 (Z 表示祖鲁，也称为格林威治时间)</p>
<h2 id="pubdate"><a href="#pubdate" class="headerlink" title="pubdate"></a>pubdate</h2><p>表示内容的发布时间</p>
<p><strong>实例</strong></p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>time</span> <span class="token attr-name">datetime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2019-02-1723:02:56<span class="token punctuation">"</span></span> <span class="token attr-name">pubdate</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pubdate<span class="token punctuation">"</span></span>
  <span class="token punctuation">></span></span>2019年02月17日23:03:48<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>time</span>
<span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="新增非主体结构元素"><a href="#新增非主体结构元素" class="headerlink" title="新增非主体结构元素"></a>新增非主体结构元素</h1><h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><blockquote>
<header> 标签定义文档或者文档的一部分区域的页眉。
</blockquote>
<header> 元素应该作为介绍内容或者导航链接栏的容器。
在一个文档中，您可以定义多个 <header> 元素。
注释：<header> 标签不能被放在 <footer>、<address> 或者另一个 <header> 元素内部。

<h2 id="hgroup"><a href="#hgroup" class="headerlink" title="hgroup"></a>hgroup</h2><p>func：将标题和主标题进行分组</p>
<h2 id="address"><a href="#address" class="headerlink" title="address"></a>address</h2><p>可以与 footer 同时使用</p>
<h2 id="figure-amp-amp-figcaption"><a href="#figure-amp-amp-figcaption" class="headerlink" title="figure &amp;&amp; figcaption"></a>figure &amp;&amp; figcaption</h2><p>func1：<figure> 标签规定独立的流内容（图像、图表、照片、代码等等）。<br>func2：<figcaption> 标签为 <figure> 元素定义标题。</p>
<figcaption> 元素应该被置于 <figure> 元素的第一个或最后一个子元素的位置。

<h2 id="details-amp-amp-summary"><a href="#details-amp-amp-summary" class="headerlink" title="details &amp;&amp; summary"></a>details &amp;&amp; summary</h2><p>func_D:用于表示该元素可以被展开\收缩（同 bool 真假来区分，默认值为 false）<br>func_S：summary 从属于 details，点击 summary 元素中的内容时，details 元素中其他所有从属元素会展开或收缩<br><strong>目前只有 Chrome 支持？</strong></p>
<h2 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h2><p>func:突出高亮显示</p>
<h2 id="progress"><a href="#progress" class="headerlink" title="progress"></a>progress</h2><p>func：代表任务的完成进度</p>
<h2 id="meter"><a href="#meter" class="headerlink" title="meter"></a>meter</h2><p>func：表示规定范围内的数量值<br>args：</p>
<pre><code>value：已经使用的值
max
min
low/high：规定下限变色/上限变色
optimum:规定度量的最优值。</code></pre>
<h1 id="内联框架的使用"><a href="#内联框架的使用" class="headerlink" title="内联框架的使用"></a><iframe>内联框架的使用</h1><p>用途 1.配合超链接元素实现不用页面嵌套</p>
<h1 id="html5-大纲"><a href="#html5-大纲" class="headerlink" title="html5 大纲"></a>html5 大纲</h1><p><a href="https://gsnedders.html5.org/outliner/">html5 outliner</a></p>
<blockquote>
<p>在 header 元素中使用图片生成大纲</p>
</blockquote>
<h2 id="大纲编排规则"><a href="#大纲编排规则" class="headerlink" title="大纲编排规则"></a>大纲编排规则</h2><h3 id="显式编排-amp-amp-隐式编排"><a href="#显式编排-amp-amp-隐式编排" class="headerlink" title="显式编排&amp;&amp;隐式编排"></a>显式编排&amp;&amp;隐式编排</h3><h4 id="显式"><a href="#显式" class="headerlink" title="显式"></a>显式</h4><p>用 section 进行划分，h1-h6</p>
<h4 id="隐式"><a href="#隐式" class="headerlink" title="隐式"></a>隐式</h4><p>不适用 section，h1-h6</p>
<h3 id="标题分级"><a href="#标题分级" class="headerlink" title="标题分级"></a>标题分级</h3><p>h1-h6 依据级别不同，自动生成区块</p>
<h1 id="加强版-ol-元素"><a href="#加强版-ol-元素" class="headerlink" title="加强版 ol 元素"></a>加强版 ol 元素</h1><blockquote>
<ol> 标签定义了一个有序列表. 列表排序以数字来显示。
使用<li> 标签来定义列表选项。
</blockquote>
<h1 id="dl"><a href="#dl" class="headerlink" title="dl"></a>dl</h1><dl> 标签定义一个描述列表。
<dd> 标签被用来对一个描述列表中的项目/名字进行描述。
<dl> 标签与 <dt> （定义项目/名字）和 <dd> （描述每一个项目/名字）一起使用。
在 <dd> 标签内，您能放置段落、换行、图片、链接、列表等等。

<h1 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a>canvas</h1><p><canvas> 标签通过脚本（通常是 JavaScript）来绘制图形（比如图表和其他图像）。</p>
<p><canvas> 标签只是图形容器，您必须使用脚本来绘制图形。</p>
<p><a href="http://www.runoob.com/tags/ref-canvas.html">HTML 画布参考手册</a></p>
<h2 id="圆形范式"><a href="#圆形范式" class="headerlink" title="圆形范式"></a>圆形范式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"#f1f2f3"</span><span class="token punctuation">;</span>
  context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// context.beginPath();</span>
  <span class="token comment">// context.arc(10,10,10,0,Math.PI*2,true)</span>
  <span class="token comment">// context.closePath();</span>
  <span class="token comment">// context.fillStyle="rgba(255,0,0,255)"</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    context<span class="token punctuation">.</span><span class="token function">beginPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">arc</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">25</span><span class="token punctuation">,</span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">closePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"rgba(255,0,0,0.25)"</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"#000"</span><span class="token punctuation">;</span>
    context<span class="token punctuation">.</span><span class="token function">stroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="文字范式"><a href="#文字范式" class="headerlink" title="文字范式"></a>文字范式</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">draw1</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> context <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"green"</span><span class="token punctuation">;</span> <span class="token comment">//背景填充</span>
  context<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//填充范围</span>
  context<span class="token punctuation">.</span>fillStyle <span class="token operator">=</span> <span class="token string">"#fff"</span><span class="token punctuation">;</span>
  context<span class="token punctuation">.</span>strokeStyle <span class="token operator">=</span> <span class="token string">"#fff"</span><span class="token punctuation">;</span>
  context<span class="token punctuation">.</span>font <span class="token operator">=</span> <span class="token string">"bold 40px '微软雅黑'"</span><span class="token punctuation">;</span>
  context<span class="token punctuation">.</span>textBaseline <span class="token operator">=</span> <span class="token string">"hanging"</span><span class="token punctuation">;</span> <span class="token comment">//垂直对齐方式</span>
  <span class="token comment">//context.textAlign='start';                  //水平对齐方式</span>
  context<span class="token punctuation">.</span><span class="token function">fillText</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//此处有第四个参数用来防止溢出</span>
  context<span class="token punctuation">.</span><span class="token function">strokeText</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><p>把绘画的状态输出到一个 data URL 地址所指向的数据中的过程</p>
<blockquote>
<p>window.location=canvas.toDataURL(‘image/jpeg’);</p>
</blockquote>
<h2 id="制作动画"><a href="#制作动画" class="headerlink" title="制作动画"></a>制作动画</h2><p>1.setInterval 设置动画的间隔时间<br>args:</p>
<pre><code>code:执行动画的函数
millisec:间隔时间（ms）</code></pre>
<p>2.用来绘图的函数<br>1).x 和 y 轴的变化<br>2).context.clearRect()</p>
<h1 id="web-storage"><a href="#web-storage" class="headerlink" title="web storage"></a>web storage</h1><h2 id="session-storage"><a href="#session-storage" class="headerlink" title="session storage"></a>session storage</h2><p>临时保存</p>
<h2 id="local-storage"><a href="#local-storage" class="headerlink" title="local storage"></a>local storage</h2><p>永久保存</p>
<h1 id="实战：留言板"><a href="#实战：留言板" class="headerlink" title="实战：留言板"></a>实战：留言板</h1><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">saveStorage</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> data <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token keyword">var</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据已保存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">loadStorage</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">loadStorage</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'&lt;table border="1">'</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> localStorage<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> key <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> value <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    date<span class="token punctuation">.</span><span class="token function">setTime</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> datestr <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result <span class="token operator">+=</span>
      <span class="token string">"&lt;tr>&lt;td>"</span> <span class="token operator">+</span>
      <span class="token string">"这是第"</span> <span class="token operator">+</span>
      i <span class="token operator">+</span>
      <span class="token string">"条数据&lt;/td>&lt;td>"</span> <span class="token operator">+</span>
      value <span class="token operator">+</span>
      <span class="token string">"&lt;/td>&lt;td>"</span> <span class="token operator">+</span>
      datestr <span class="token operator">+</span>
      <span class="token string">"&lt;/td>&lt;/tr>"</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  result <span class="token operator">+=</span> <span class="token string">"&lt;/table>"</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> target <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
  target<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">clearStorage</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"数据已清除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">loadStorage</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>留言板<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dome<span class="token punctuation">"</span></span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>60<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>save<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>saveStorage(<span class="token punctuation">'</span>dome<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>load<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loadStorage(<span class="token punctuation">'</span>msg<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clearStorage(<span class="token punctuation">'</span>msg<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="video-amp-amp-audio"><a href="#video-amp-amp-audio" class="headerlink" title="video &amp;&amp; audio"></a>video &amp;&amp; audio</h1><h2 id="video"><a href="#video" class="headerlink" title="video"></a>video</h2><p>视频或电影</p>
<h2 id="audio"><a href="#audio" class="headerlink" title="audio"></a>audio</h2><p>音频</p>
<h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>source 可以用来指定多个媒体视频播放格式，自上而下依次尝试</p>
<h1 id="drag"><a href="#drag" class="headerlink" title="drag"></a>drag</h1><h2 id="设置元素为可拖放"><a href="#设置元素为可拖放" class="headerlink" title="设置元素为可拖放"></a>设置元素为可拖放</h2><p>首先，为了使元素可拖动，把 draggable 属性设置为 true ：</p>
<blockquote>
<img draggable="true" loading="lazy">
</blockquote>
<h2 id="拖动什么-ondragstart-和-setData"><a href="#拖动什么-ondragstart-和-setData" class="headerlink" title="拖动什么 - ondragstart 和 setData()"></a>拖动什么 - ondragstart 和 setData()</h2><p>然后，规定当元素被拖动时，会发生什么。</p>
<p>在上面的例子中，ondragstart 属性调用了一个函数，drag(event)，它规定了被拖动的数据。</p>
<p>dataTransfer.setData() 方法设置被拖数据的数据类型和值：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">drag</span><span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  ev<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">,</span> ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在这个例子中，数据类型是 “Text”，值是可拖动元素的 id (“drag1”)。</p>
<h2 id="放到何处-ondragover"><a href="#放到何处-ondragover" class="headerlink" title="放到何处 - ondragover"></a>放到何处 - ondragover</h2><p>ondragover 事件规定在何处放置被拖动的数据。</p>
<p>默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。</p>
<p>这要通过调用 ondragover 事件的 event.preventDefault() 方法：</p>
<p>event.preventDefault()</p>
<h2 id="进行放置-ondrop"><a href="#进行放置-ondrop" class="headerlink" title="进行放置 - ondrop"></a>进行放置 - ondrop</h2><p>当放置被拖数据时，会发生 drop 事件。</p>
<p>在上面的例子中，ondrop 属性调用了一个函数，drop(event)：</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">drop</span><span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  ev<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> data <span class="token operator">=</span> ev<span class="token punctuation">.</span>dataTransfer<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"Text"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ev<span class="token punctuation">.</span>target<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>代码解释：</p>
<p>1.调用 preventDefault() 来避免浏览器对数据的默认处理（drop 事件的默认行为是以链接形式打开） 2.通过 dataTransfer.getData(“Text”) 方法获得被拖的数据。该方法将返回在 setData() 方法中设置为相同类型的任何数据。 3.被拖数据是被拖元素的 id (“drag1”) 4.把被拖元素追加到放置元素（目标元素）中</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><blockquote>
<p><a> 超链接</p>
</blockquote>
<blockquote>
<p>style 定义 css 样式</p>
</blockquote>
<blockquote>
<p>将 <ul> 标签与 <li> 标签一起使用，创建无序列表。</p>
</blockquote>
<h1 id="sub-快捷"><a href="#sub-快捷" class="headerlink" title="sub 快捷"></a>sub 快捷</h1><p>ul&gt;.item$*10 + ctrl+e 快速生成 10 行列表</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>HTML5\CSS</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>h5</tag>
      </tags>
  </entry>
  <entry>
    <title>numpy个人整理(初阶)</title>
    <url>/2019-07-19-numpy-simple-organization/</url>
    <content><![CDATA[<p>NumPy 是 Python 语言的一个扩展程序库。支持高阶大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。</p>
<a id="more"></a>

<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><p>shape<br>size<br>dtype</p>
<h2 id="使用-numpy-的其他方法来创建-array"><a href="#使用-numpy-的其他方法来创建-array" class="headerlink" title="使用 numpy 的其他方法来创建 array"></a>使用 numpy 的其他方法来创建 array</h2><p>通常，数组的元素最初是未知的，但它的大小是已知的。因此，NumPy 提供了几个函数来创建具有初始占位符内容的数组。这就减少了数组增长的必要，因为 <strong>数组增长的操作花费很大</strong> 。</p>
<p>array, zeros, zeros_like, ones, ones_like, empty, empty_like, arange, linspace, numpy.random.rand, numpy.random.randn, fromfunction, fromfile</p>
<p><em>配合 reshape 使用</em><br>如果在 reshape 操作中将维度指定为-1，则会自动计算其他维度</p>
<p><strong>reshape and resize `s return</strong></p>
<p>将不同数组堆叠在一起<br>vstack,hstack</p>
<h3 id="数组打印"><a href="#数组打印" class="headerlink" title="数组打印"></a>数组打印</h3><ul>
<li>最后一个轴从左到右打印，</li>
<li>倒数第二个从上到下打印，</li>
<li>其余的也从上到下打印，每个切片与下一个用空行分开。</li>
</ul>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用多个数值参数调用 array 函数，而不是提供一个数字列表（List）作为参数。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment"># WRONG</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># RIGHT</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="array-的常用函数"><a href="#array-的常用函数" class="headerlink" title="array 的常用函数"></a>array 的常用函数</h3><p>dot<br>unique<br>sum<br>max\min</p>
<p>all, any, apply_along_axis, argmax, argmin, argsort, average, bincount, ceil, clip, conj, corrcoef, cov, cross, cumprod, cumsum, diff, dot, floor, inner, inv, lexsort, max, maximum, mean, median, min, minimum, nonzero, outer, prod, re, round, sort, std, sum, trace, transpose, var, vdot, vectorize, where</p>
<h3 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h3><p>np.save(‘one_array’,x)<br>np.load(‘one_array.npz’)</p>
<p>np.savez(‘two_array’,a=x,b=y)<br>c = np.load(‘two_array.npz’)<br>c[‘a’],c[‘b’]</p>
<h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="创建矩阵"><a href="#创建矩阵" class="headerlink" title="创建矩阵"></a>创建矩阵</h3><p>np.mat([[1,2,3],[4,5,6])<br>np.mat(array) # 数组转换</p>
<h3 id="矩阵运算"><a href="#矩阵运算" class="headerlink" title="矩阵运算"></a>矩阵运算</h3><p>满足基本的矩阵运算</p>
<p><em>乘法运算时要注意行列约束</em></p>
<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><ul>
<li>按位索引</li>
<li>切片访问(二维数组的切片)<br>多维（Multidimensional） 数组每个轴可以有一个索引。</li>
</ul>
<p>当提供比轴数更少的索引时，缺失的索引被认为是一个完整切片<br>e.g.</p>
<pre><code>b[-1]</code></pre>
<p>迭代（Iterating） 多维数组是相对于第一个轴完成的</p>
<p>但是，如果想要对数组中的每个元素执行操作，可以使用 flat 属性，该属性是数组中所有元素的迭代器</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> element <span class="token keyword">in</span> b<span class="token punctuation">.</span>flat<span class="token punctuation">:</span>
     <span class="token keyword">print</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Indexing, Indexing (reference), newaxis, ndenumerate, indices</p>
<h1 id="形状操作"><a href="#形状操作" class="headerlink" title="形状操作"></a>形状操作</h1><p>一个数组具有由每个轴上的元素数量给出的形状：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> np<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">2</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span> <span class="token number">4</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
       <span class="token punctuation">[</span> <span class="token number">8</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">.</span><span class="token punctuation">,</span>  <span class="token number">6</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">.</span>shape
<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于任何输入数组，函数 row_stack 相当于 vstack。一般来说，对于具有两个以上维度的数组，hstack 沿第二轴堆叠，vstack 沿第一轴堆叠，concatenate 允许一个可选参数，给出串接应该发生的轴。</p>
<h2 id="将一个数组分成几个较小的数组"><a href="#将一个数组分成几个较小的数组" class="headerlink" title="将一个数组分成几个较小的数组"></a>将一个数组分成几个较小的数组</h2><p>使用 hsplit ，可以沿其水平轴拆分数组，通过指定要返回的均匀划分的数组数量，或通过指定要在其后进行划分的列：</p>
<p>vsplit 沿纵轴分割，并且 array_split 允许指定沿哪个轴分割。</p>
<h1 id="深拷贝-浅拷贝"><a href="#深拷贝-浅拷贝" class="headerlink" title="深拷贝\浅拷贝"></a>深拷贝\浅拷贝</h1><p>简单赋值不会创建数组对象或其数据的拷贝。</p>
<p>Python 将可变对象作为引用传递，所以函数调用不会复制。</p>
<p>不同的数组对象可以共享相同的数据。 view 方法创建一个新的数组对象，它查看相同的数据。</p>
<p>copy 方法生成数组及其数据的完整拷贝。</p>
<h2 id="fancy-indexing"><a href="#fancy-indexing" class="headerlink" title="fancy indexing"></a>fancy indexing</h2><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="数学运算-ufunc"><a href="#数学运算-ufunc" class="headerlink" title="数学运算 ufunc"></a>数学运算 ufunc</h2><table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>add(x1, x2, /[, out, where, casting, order, …])</td>
<td>按元素添加参数。</td>
</tr>
<tr>
<td>subtract(x1, x2, /[, out, where, casting, …])</td>
<td>从元素方面减去参数。</td>
</tr>
<tr>
<td>multiply(x1, x2, /[, out, where, casting, …])</td>
<td>按元素计算多个参数。</td>
</tr>
<tr>
<td>divide(x1, x2, /[, out, where, casting, …])</td>
<td>逐个元素方式返回输入的真正除法。</td>
</tr>
<tr>
<td>logaddexp(x1, x2, /[, out, where, casting, …])</td>
<td>输入的指数之和的对数。</td>
</tr>
<tr>
<td>logaddexp2(x1, x2, /[, out, where, casting, …])</td>
<td>以-2 为基的输入的指数和的对数。</td>
</tr>
<tr>
<td>true_divide(x1, x2, /[, out, where, …])</td>
<td>以元素方式返回输入的真正除法。</td>
</tr>
<tr>
<td>floor_divide(x1, x2, /[, out, where, …])</td>
<td>返回小于或等于输入除法的最大整数。</td>
</tr>
<tr>
<td>negative(x, /[, out, where, casting, order, …])</td>
<td>数字否定，元素方面。</td>
</tr>
<tr>
<td>positive(x, /[, out, where, casting, order, …])</td>
<td>数字正面，元素方面。</td>
</tr>
<tr>
<td>power(x1, x2, /[, out, where, casting, …])</td>
<td>第一个数组元素从第二个数组提升到幂，逐个元素。</td>
</tr>
<tr>
<td>remainder(x1, x2, /[, out, where, casting, …])</td>
<td>返回除法元素的余数。</td>
</tr>
<tr>
<td>mod(x1, x2, /[, out, where, casting, order, …])</td>
<td>返回除法元素的余数。</td>
</tr>
<tr>
<td>fmod(x1, x2, /[, out, where, casting, …])</td>
<td>返回除法的元素余数。</td>
</tr>
<tr>
<td>divmod(x1, x2[, out1, out2], / [[, out, …])</td>
<td>同时返回逐元素的商和余数。</td>
</tr>
<tr>
<td>absolute(x, /[, out, where, casting, order, …])</td>
<td>逐个元素地计算绝对值。</td>
</tr>
<tr>
<td>fabs(x, /[, out, where, casting, order, …])</td>
<td>以元素方式计算绝对值。</td>
</tr>
<tr>
<td>rint(x, /[, out, where, casting, order, …])</td>
<td>将数组的元素舍入为最接近的整数。</td>
</tr>
<tr>
<td>sign(x, /[, out, where, casting, order, …])</td>
<td>返回数字符号的元素指示。</td>
</tr>
<tr>
<td>heaviside(x1, x2, /[, out, where, casting, …])</td>
<td>计算 Heaviside 阶跃函数。</td>
</tr>
<tr>
<td>conj(x, /[, out, where, casting, order, …])</td>
<td>以元素方式返回复共轭。</td>
</tr>
<tr>
<td>exp(x, /[, out, where, casting, order, …])</td>
<td>计算输入数组中所有元素的指数。</td>
</tr>
<tr>
<td>exp2(x, /[, out, where, casting, order, …])</td>
<td>计算输入数组中所有 p 的 2**p。</td>
</tr>
<tr>
<td>log(x, /[, out, where, casting, order, …])</td>
<td>自然对数，元素方面。</td>
</tr>
<tr>
<td>log2(x, /[, out, where, casting, order, …])</td>
<td>x 的基数为 2 的对数。</td>
</tr>
<tr>
<td>log10(x, /[, out, where, casting, order, …])</td>
<td>以元素方式返回输入数组的基数 10 对数。</td>
</tr>
<tr>
<td>expm1(x, /[, out, where, casting, order, …])</td>
<td>计算数组中所有元素的 exp(x)-1。</td>
</tr>
<tr>
<td>log1p(x, /[, out, where, casting, order, …])</td>
<td>返回一个加上输入数组的自然对数，逐个元素。</td>
</tr>
<tr>
<td>sqrt(x, /[, out, where, casting, order, …])</td>
<td>以元素方式返回数组的正平方根。</td>
</tr>
<tr>
<td>square(x, /[, out, where, casting, order, …])</td>
<td>返回输入的元素方块。</td>
</tr>
<tr>
<td>cbrt(x, /[, out, where, casting, order, …])</td>
<td>以元素方式返回数组的立方根。</td>
</tr>
<tr>
<td>reciprocal(x, /[, out, where, casting, …])</td>
<td>以元素为单位返回参数的倒数。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>datasci</tag>
      </tags>
  </entry>
  <entry>
    <title>No.31 下一个排列</title>
    <url>/2019-07-22-No31-next-permutation/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/next-permutation/">No.31 下一个排列</a></p>
<p>实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。</p>
<p>如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。</p>
<p>必须原地修改，只允许使用额外常数空间。</p>
<p>以下是一些例子，输入位于左侧列，其相应输出位于右侧列。</p>
<pre><code>1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1</code></pre>
<a id="more"></a>

<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>第一眼看到这个题目是很懵的，因为以往的全排列都是直接上全排列函数，并没有去仔细的了解过其中的一些算法机制。</p>
<p>于是，上<a href="https://zh.wikipedia.org/wiki/%E5%85%A8%E6%8E%92%E5%88%97%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95">维基百科</a>。</p>
<blockquote>
<p>设 P 是集合{1，2，……n-1，n}的一个全排列：P=P1P2……Pj-1PjPj+1……Pn（1≤P1，P2，……，Pn≤n-1）</p>
<p>从排列的右端开始，找出第一个比右边数字小的数字的序号 j，即 j=max{i|Pi &lt; Pi+1，i &gt; j}</p>
<p>在 Pj 的右边的数字中，找出所有比 Pj 大的数字中最小的数字 Pk，即 k=min{i|Pi&gt;Pj，i&gt;j}</p>
<p>交换 Pj，Pk</p>
<p>再将排列右端的递减部分 Pj+1Pj+2……Pn 倒转，因为 j 右端的数字是降序，所以只需要其左边和右边的交换，直到中间，因此可以得到一个新的排列 P’=P1P2……Pj-1PkPn……Pj+2Pj+1。</p>
</blockquote>
<p>以上是维基百科关于字典序法部分的算法步骤。</p>
<p>知道了这些之后解题就方便多了。</p>
<p>首先是选择遍历的顺序，根据全排列的算法机制，选择从右侧开始遍历（当然，从左侧也一样能够实现）。<br>然后就是按照算法步骤来完成，即可得到下一个全排列，唯一需要注意的是最后的翻转，这是很多人忘记的一步。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">
class Solution &#123;
public:
    void nextPermutation(vector&lt;int&gt;&amp; nums) &#123;
        int size &#x3D; nums.size();
        int index1 &#x3D; size-2,index2 &#x3D; size -1;
        while(index1&gt;&#x3D;0 &amp;&amp; nums[index1]&gt;&#x3D;nums[index1+1])
            index1--;
        if(index1&gt;&#x3D;0)&#123;
            while(index2&gt;&#x3D;0 &amp;&amp; nums[index2]&lt;&#x3D;nums[index1])
                index2--;
            swap(nums,index1,index2);
        &#125;
        reserve(nums,index1+1,size-1);

    &#125;

    void reserve(vector&lt;int&gt;&amp; nums,int i,int j)&#123;
        while(i&lt;j)&#123;
            swap(nums,i,j);
            i++;
            j--;
        &#125;
    &#125;

    void swap(vector&lt;int&gt;&amp; nums,int index1,int index2)&#123;
        int temp &#x3D; nums[index1];
        nums[index1] &#x3D; nums[index2];
        nums[index2] &#x3D; temp;
    &#125;
&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h1><blockquote>
<p>执行用时 :8 ms, 在所有 C++ 提交中击败了 98.48%的用户<br>内存消耗 :8.3 MB, 在所有 C++ 提交中击败了 99.55%的用户</p>
</blockquote>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一题在详细地了解了全排列的字典序法之后完全就称不上是一道<em>中等</em>题了，但是问题的关键就在很多人并不知道全排列的字典序法的实现机制。还是突出了平时积累和基础的重要性。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>flask部署(2)</title>
    <url>/2019-07-30-questions-and-solutions-of-flask-deploy-2/</url>
    <content><![CDATA[<p>上一篇的部署是用的 uwsgi，这次听说 gunicorn 很方便，就试了一下</p>
<a id="more"></a>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>阿里云 ubuntu 16</p>
<h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>安装 virtualenv<br>sudo pip install virtualenv</p>
<p>使用 virtualenv<br>virtualenv ENV 创建目录环境<br>source ./bin/activate 激活环境</p>
<p>安装 gunicorn<br>pip install gunicorn</p>
<p>安装依赖包 requirement.txt</p>
<p>启动程序<br>gunicorn -w 4 -b 0.0.0.0:5001 -D manage:app<br>这里的-d 意思就是在后台运行，当然你也可以配置守护进程</p>
<p>配置 gunicorn.conf</p>
<pre class="line-numbers language-conf" data-language="conf"><code class="language-conf"># gunicorn.conf

# 并行工作进程数
workers &#x3D; 2
# 指定每个工作者的线程数
threads &#x3D; 2
# 监听内网端口5000
bind &#x3D; &#39;0.0.0.0:5001&#39;
# 设置守护进程,将进程交给supervisor管理
daemon &#x3D; &#39;true&#39;
# 工作模式协程
worker_class &#x3D; &#39;gevent&#39;
# 设置最大并发量
worker_connections &#x3D; 2000
# 设置进程文件目录
pidfile &#x3D; &#39;&#x2F;var&#x2F;www&#x2F;myflask&#x2F;run&#x2F;gunicorn.pid&#39;
# 设置访问日志和错误信息日志路径
accesslog &#x3D; &#39;&#x2F;var&#x2F;www&#x2F;myflask&#x2F;log&#x2F;gunicorn_acess.log&#39;
errorlog &#x3D; &#39;&#x2F;var&#x2F;www&#x2F;myflask&#x2F;log&#x2F;gunicorn_error.log&#39;
# 设置日志记录水平
loglevel &#x3D; &#39;debug&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="问题-amp-解决"><a href="#问题-amp-解决" class="headerlink" title="问题 &amp; 解决"></a>问题 &amp; 解决</h1><p>Q:setuptools pkg_resources pip wheel failed with error code 1</p>
<p>S:<br>vi /root/.pip/pip.conf 修改如下:<br>[global]<br>index-url = <a href="https://pypi.python.org/simple/">https://pypi.python.org/simple/</a><br>[install]<br>trusted-host=mirrors.aliyun.com trusted-host=pypi.python.org</p>
<p>Q:json 类的报错问题<br>S:具体的原因我还没有搞明白，Linux 默认的 python3 是 3.5 版本的，但是在进行 jinja2 渲染的时候，常常会出现 json 的报错，两种解决办法。</p>
<ul>
<li>修改源文件，去掉 json 调用</li>
<li>将 3.5 手动升级到 3.7<br>各有优劣吧，3.5 版本稳定，3.7 要自己去编译升级，很复杂，而复杂往往就意味着出错率高。<br>这里我选择了后者，因为开发环境就是 3.7，直接升级到 3.7，一劳永逸。</li>
</ul>
<p>Q:如何升级到 3.7<br>S:参考<a href="https://segmentfault.com/a/1190000018264955">博客园上的一篇文章</a></p>
<p>Q:升级了 python3.7 之后可能会出现的一些问题</p>
<p>1.Command ‘(‘lsb_release’, ‘-a’)’ returned non-zero exit status 1 问题解决</p>
<p>S:</p>
<p>1.网上有很多的花里胡哨的办法，然后，我，直接把文件删了。。。。</p>
<pre class="line-numbers language-python3" data-language="python3"><code class="language-python3">rm &#x2F;usr&#x2F;bin&#x2F;lsb_release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>sklearn构造性学习(1)</title>
    <url>/2019-08-02-learning-sklearn-via-theory-1/</url>
    <content><![CDATA[<p>构造性学习中，以理论为主，并结合一定的例子</p>
<p>本篇是机器学习的入门篇，主体的脉络差不多近似于 《数据挖掘导论》 一书</p>
<a id="more"></a>

<h1 id="K-近邻算法"><a href="#K-近邻算法" class="headerlink" title="K 近邻算法"></a>K 近邻算法</h1><p><a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier">主要函数说明</a><br>k 近邻算法是非常特殊的,可以认为是没有模型,或者说训练集本身就是模型<br>寻找 k 个近邻,来判断 x 点<br>主要解决分类问题</p>
<h2 id="计算距离"><a href="#计算距离" class="headerlink" title="计算距离"></a>计算距离</h2><h3 id="欧拉距离"><a href="#欧拉距离" class="headerlink" title="欧拉距离"></a>欧拉距离</h3><p>$$<br>\sqrt{\sum_{i=1}^{n}\left(X_{i}^{(a)}-X_{i}^{(b)}\right)^{2}}<br>$$</p>
<h3 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a>曼哈顿距离</h3><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/4253159243.png?Expires=1602314295" alt="p1" loading="lazy"><br>绿线:欧拉距离</p>
<h3 id="总结-闵可夫斯基距离"><a href="#总结-闵可夫斯基距离" class="headerlink" title="总结:闵可夫斯基距离"></a>总结:闵可夫斯基距离</h3><p>$$<br>\left(\sum_{i=1}^{n}\left|X_{i}^{(a)}-X_{i}^{(b)}\right|^{p}\right)^{\frac{1}{p}}<br>$$</p>
<h2 id="准确度"><a href="#准确度" class="headerlink" title="准确度"></a>准确度</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score

accuracy_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span>y_predict<span class="token punctuation">)</span>

<span class="token comment"># 或者直接从训练结果中导出准确度</span>
knn_clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="超参数"><a href="#超参数" class="headerlink" title="超参数"></a>超参数</h2><p>超参数:在算法运行前需要决定的参数<br>模型参数:算法过程中学习的参数</p>
<p>KNN 算法没有模型参数<br>kNN 算法中的 k 是典型的超参数</p>
<p>如何寻找好的超参数:</p>
<pre><code>领域知识
经验数值
实验搜索</code></pre>
<blockquote>
<p>除了 k 之外还有一个重要的超参数</p>
</blockquote>
<p><strong>k 与各个投票点的距离</strong><br>好处:<br>使得模型更加科学<br>解决了平票的情况</p>
<p>使用方法:加入 <strong>weights</strong> 参数</p>
<p>由上述的闵可夫斯基距离,得到又一个超参数 <strong>p</strong>,用来判断使用的距离公式</p>
<h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><p>使用 np.sum 对 np 进行求和<br>使用列表推导式进行列表的遍历<br>使用 collection 的 Counter 的 Counter 类来计算”投票”的结果</p>
<h2 id="数据归一化"><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h2><p>作用:将所有的数据都映射到同一个尺度中<br><strong>最值归一化</strong>:将所有的数据都映射到 0-1 之间<br>适用于分布有明显边界的情况(如像素 0-255,学生的考试分数 0-100)</p>
<h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p><strong>均值方差归一化 standardization</strong>:把所有的数据归一到均值为 0,方差为 1 的分布中<br>适用于数据分布没有明显的边界;有可能存在极端数据值<br><em>一般情况下使用</em></p>
<p>$$<br>x_{\text {scale}}=\frac{x-x_{\text {mean}}}{s}<br>$$</p>
<h3 id="如何对测试数据集进行归一化"><a href="#如何对测试数据集进行归一化" class="headerlink" title="如何对测试数据集进行归一化"></a>如何对测试数据集进行归一化</h3><p>与训练集的归一化方法不同</p>
<pre class="line-numbers language-math" data-language="math"><code class="language-math">(x_test - mean\_train ) &#x2F; std\_train<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>原因:</p>
<ul>
<li>真实环境很可能无法得到测试数据的均值和方差(如只给你一个数据)</li>
<li>对数据的归一化也是算法的一部分</li>
</ul>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/2299684497.png?Expires=1602314397" alt="p2" loading="lazy"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>效率低下</li>
<li>高度数据相关(对 outlier 更加敏感)</li>
<li>预测的结果不具有可解释性</li>
</ul>
<h2 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h2><p>secore() 进行准确率对比</p>
<h1 id="线性回归算法"><a href="#线性回归算法" class="headerlink" title="线性回归算法"></a>线性回归算法</h1><p>目标:找到 a 和 b,使</p>
<pre class="line-numbers language-math" data-language="math"><code class="language-math">\displaystyle\sum_&#123;i&#x3D;1&#125;^ny\raisebox&#123;0.2em&#125;&#123;(i)&#125; -ax\raisebox&#123;0.2em&#125;&#123;(i)&#125; +b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>尽可能小<br>以上公式即 <strong>损失函数(lossfunction)</strong><br>部分函数中用上式计算拟合的程度,所以也称 <strong>效用函数(utility function)</strong><br>统称为 <strong>目标函数</strong></p>
<p>总结:</p>
<pre><code>通过分析问题,确定问题的损失函数或者效用函数
通过最优化损失函数或效用函数,获得机器学习的模型</code></pre>
<h2 id="向量化"><a href="#向量化" class="headerlink" title="向量化"></a>向量化</h2><p>一般情况下,向量化相较于普通法快很多</p>
<h2 id="评价-1"><a href="#评价-1" class="headerlink" title="评价"></a>评价</h2><p>均方误差 MSE<br>改进:<br>均方根误差 RMSE 使其对量纲更加敏感<br><em>上下的误差为均方根误差</em><br><strong>sklearn 中没有包装 RMSE</strong><br>平均绝对误差 MAE</p>
<p>$$<br>R M S E=\sqrt{\frac{1}{m} \sum_{i=1}^{m}\left(y_{t e s t}^{(i)}-\hat{y}_{t e s t}^{(i)}\right)^{2}}<br>$$</p>
<p>$$<br>M A E=\frac{1}{m} \sum_{i=1}^{m}\left|y_{t e s t}^{(i)}-\hat{y}_{t e s t}^{(i)}\right|<br>$$</p>
<h2 id="多元线性回归"><a href="#多元线性回归" class="headerlink" title="多元线性回归"></a>多元线性回归</h2><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression

lin_reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>
lin_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>
lin_reg<span class="token punctuation">.</span>coef_      <span class="token comment">#theta</span>
lin_reg<span class="token punctuation">.</span>intercept_    <span class="token comment">#截距</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h1><p>基于搜索的最优化方法<br>作用: 最小化一个损失函数<br>梯度上升法 : 最大化一个效用函数</p>
<h2 id="深入"><a href="#深入" class="headerlink" title="深入"></a>深入</h2><ul>
<li>批量梯度下降法</li>
<li>随机梯度下降法</li>
<li>小批量梯度下降法</li>
</ul>
<h2 id="线性回归中使用梯度下降法"><a href="#线性回归中使用梯度下降法" class="headerlink" title="线性回归中使用梯度下降法"></a>线性回归中使用梯度下降法</h2><p>在使用梯度下降法时,对目标函数要进行特殊的设计<br>虽然理论上挡土度非常大的时候,可以通过调节 eta 来得到想要的结果,但是会影响效率</p>
<h2 id="梯度下降的向量化和标准化"><a href="#梯度下降的向量化和标准化" class="headerlink" title="梯度下降的向量化和标准化"></a>梯度下降的向量化和标准化</h2><p>向量化:</p>
<pre><code>简化了公式</code></pre>
<p>标准化:</p>
<pre><code>在使用梯度下降法之前,将数据归一化</code></pre>
<p>梯度下降法相比标准方程在进行大数据处理时具有明显优势</p>
<h2 id="随机梯度下降法"><a href="#随机梯度下降法" class="headerlink" title="随机梯度下降法"></a>随机梯度下降法</h2><p>用精度换时间<br>学习率逐渐递减</p>
<h2 id="scikit-实现"><a href="#scikit-实现" class="headerlink" title="scikit 实现"></a>scikit 实现</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">
<span class="token comment"># 使用波士顿房价数据集</span>
<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets

boston <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_boston<span class="token punctuation">(</span><span class="token punctuation">)</span>
X <span class="token operator">=</span> boston<span class="token punctuation">.</span>data
y <span class="token operator">=</span> boston<span class="token punctuation">.</span>target

X <span class="token operator">=</span> X<span class="token punctuation">[</span>y <span class="token operator">&lt;</span> <span class="token number">50.0</span><span class="token punctuation">]</span>
y <span class="token operator">=</span> y<span class="token punctuation">[</span>y <span class="token operator">&lt;</span> <span class="token number">50.0</span><span class="token punctuation">]</span>


<span class="token comment"># 模型分类</span>
<span class="token keyword">from</span> playML<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split

X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> seed<span class="token operator">=</span><span class="token number">666</span><span class="token punctuation">)</span>


<span class="token comment"># 归一化</span>
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler

standardScaler <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>
standardScaler<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>
X_train_standard <span class="token operator">=</span> standardScaler<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>
X_test_standard <span class="token operator">=</span> standardScaler<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>


<span class="token comment"># 正式使用scikit中的SDG</span>
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> SGDRegressor

sgd_reg <span class="token operator">=</span> SGDRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">%</span>time sgd_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_standard<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
sgd_reg<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test_standard<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>

sgd_reg <span class="token operator">=</span> SGDRegressor<span class="token punctuation">(</span>n_iter<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token operator">%</span>time sgd_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_standard<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
sgd_reg<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test_standard<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="主成分分析-PCA"><a href="#主成分分析-PCA" class="headerlink" title="主成分分析 PCA"></a>主成分分析 PCA</h1><ul>
<li>一个非监督的机器学习算法</li>
<li>主要用于数据降维</li>
<li>通过降维,可以发现更便于人类理解的特征</li>
<li>其他应用:可视化;去噪</li>
</ul>
<blockquote>
<p>找到一个轴,所有的点映射到这个轴之后方差最大</p>
</blockquote>
<p>S1:将样例的均值归零(作用是化简公式)(<strong>demean</strong>)<br>S2:求轴的方向 w=(w1,w2),使得所有的样本,映射到 w 以后,!</p>
<p><strong>区分 PAC 和线性回归</strong></p>
<h2 id="梯度上升法解决主成分分析问题"><a href="#梯度上升法解决主成分分析问题" class="headerlink" title="梯度上升法解决主成分分析问题"></a>梯度上升法解决主成分分析问题</h2><p>注意:</p>
<ul>
<li>每次求一个单位方向</li>
<li>不能用 0 向量开始</li>
<li>不能使用 StandardScaler 标准化数据</li>
</ul>
<h2 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h2><p>S1:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">demean</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> X <span class="token operator">-</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="高维数据映射为低维"><a href="#高维数据映射为低维" class="headerlink" title="高维数据映射为低维"></a>高维数据映射为低维</h2><p>低维的数据是可以返回到高维的, <strong>但是存在缺损</strong></p>
<h2 id="scikit-实现-1"><a href="#scikit-实现-1" class="headerlink" title="scikit 实现"></a>scikit 实现</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">pca <span class="token operator">=</span> PCA<span class="token punctuation">(</span><span class="token number">0.95</span><span class="token punctuation">)</span> <span class="token comment"># 锁定精度</span>
pca<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>

pca<span class="token punctuation">.</span>n_components_ <span class="token comment">#依据X_train确定保留的维度</span>

knn_clf <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 降维后进行分类</span>
knn_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train_reduction<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

knn_clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test_reduction<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>

<span class="token comment"># 可视化</span>
pca <span class="token operator">=</span> PCA<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
pca<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">)</span>
X_reduction <span class="token operator">=</span> pca<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X_reduction<span class="token punctuation">[</span>y<span class="token operator">==</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X_reduction<span class="token punctuation">[</span>y<span class="token operator">==</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>PCA 在降维的过程中还有降噪的作用,降噪的结果就是,维度降低,但是准确率反而提升了</strong></p>
<h1 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h1><p>实际中,大多数的数据都是非线性的关系</p>
<ul>
<li><p>PolynomialFeatures(degeree=3)<br>生成三次多项式<br>个数为 10<br>一次 3 1,x1,x2<br>二次 3 x1^2,x2^2,x1*x2<br>三次 4 x1^3,x2^3,x1^2*x2,x1*x2^2</p>
</li>
<li><p>pipeline</p>
</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
X <span class="token operator">=</span> x<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
y <span class="token operator">=</span> <span class="token number">0.5</span> <span class="token operator">*</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>

<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler

poly_reg <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span><span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">"poly"</span><span class="token punctuation">,</span> PolynomialFeatures<span class="token punctuation">(</span>degree<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">"std_scaler"</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">"lin_reg"</span><span class="token punctuation">,</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>


poly_reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
y_predict <span class="token operator">=</span> poly_reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X<span class="token punctuation">)</span>


plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> y_predict<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="过拟合和欠拟合"><a href="#过拟合和欠拟合" class="headerlink" title="过拟合和欠拟合"></a>过拟合和欠拟合</h2><p>过拟合:训练测试集上表现很好,但在测试数据集上表现不好</p>
<h3 id="模型的泛化能力"><a href="#模型的泛化能力" class="headerlink" title="模型的泛化能力"></a>模型的泛化能力</h3><p>使用训练数据集和测试数据集</p>
<blockquote>
<p>测试数据集的意义就是评估模型的泛化能力</p>
</blockquote>
<h2 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">plot_learning_curve</span><span class="token punctuation">(</span>algo<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">:</span>
    train_score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    test_score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        algo<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y_train<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

        y_train_predict <span class="token operator">=</span> algo<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_train<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        train_score<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_train<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> y_train_predict<span class="token punctuation">)</span><span class="token punctuation">)</span>

        y_test_predict <span class="token operator">=</span> algo<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>
        test_score<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mean_squared_error<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> y_test_predict<span class="token punctuation">)</span><span class="token punctuation">)</span>

    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                               np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>train_score<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"train"</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                               np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>test_score<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">"test"</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>X_train<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>

plot_learning_curve<span class="token punctuation">(</span>LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注意,针对特定测试数据集的过拟合<br>增加 验证数据集(调整超参数使用的数据集)</p>
</blockquote>
<h3 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_score

knn_clf <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>
cross_val_score<span class="token punctuation">(</span>knn_clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>


best_k<span class="token punctuation">,</span> best_p<span class="token punctuation">,</span> best_score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
<span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> p <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        knn_clf <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token string">"distance"</span><span class="token punctuation">,</span> n_neighbors<span class="token operator">=</span>k<span class="token punctuation">,</span> p<span class="token operator">=</span>p<span class="token punctuation">)</span>
        scores <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>knn_clf<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
        score <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>scores<span class="token punctuation">)</span>
        <span class="token keyword">if</span> score <span class="token operator">></span> best_score<span class="token punctuation">:</span>
            best_k<span class="token punctuation">,</span> best_p<span class="token punctuation">,</span> best_score <span class="token operator">=</span> k<span class="token punctuation">,</span> p<span class="token punctuation">,</span> score

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best K ="</span><span class="token punctuation">,</span> best_k<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best P ="</span><span class="token punctuation">,</span> best_p<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Best Score ="</span><span class="token punctuation">,</span> best_score<span class="token punctuation">)</span>


best_knn_clf <span class="token operator">=</span> KNeighborsClassifier<span class="token punctuation">(</span>weights<span class="token operator">=</span><span class="token string">"distance"</span><span class="token punctuation">,</span> n_neighbors<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> p<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
best_knn_clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
best_knn_clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将训练数据分为 k 份,训练 k 个模型,并进行交叉验证<br>最后求均值</p>
<h3 id="网格搜索"><a href="#网格搜索" class="headerlink" title="网格搜索"></a>网格搜索</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV

param_grid <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
        <span class="token string">'weights'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'distance'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">'n_neighbors'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token string">'p'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span>

grid_search <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>knn_clf<span class="token punctuation">,</span> param_grid<span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
grid_search<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="留一法-LOO-CV"><a href="#留一法-LOO-CV" class="headerlink" title="留一法 LOO-CV"></a>留一法 LOO-CV</h3><p>把训练数据集分成 m 份,成为留一法</p>
<blockquote>
<p>Leabe-One_out Cross Validation</p>
</blockquote>
<p>优点:完全不受随机的印象,最接近模型真正的性能指标<br>缺点:计算量巨大</p>
<blockquote>
<p>论文中验证严谨性</p>
</blockquote>
<h3 id="偏差方差权衡-bias-variance"><a href="#偏差方差权衡-bias-variance" class="headerlink" title="偏差方差权衡 bias variance"></a>偏差方差权衡 bias variance</h3><p>模型误差 = 偏差+方差+不可避免的误差</p>
<h4 id="偏差-bias"><a href="#偏差-bias" class="headerlink" title="偏差(bias)"></a>偏差(bias)</h4><p>导致偏差的主要原因:<br>对问题本身的假设不正确<br>如:非线性数据使用线性回归</p>
<h4 id="方差-variance"><a href="#方差-variance" class="headerlink" title="方差(variance)"></a>方差(variance)</h4><p>数据的一点点扰动都会较大的影响模型<br>通常原因,使用的模型太复杂<br>如,高阶多项式回归</p>
<p><strong>机器学习的主要挑战来自于方差</strong></p>
<p>1.降低模型复杂度 2.减少数据维度;降噪 3.增加样本书 4.使用验证集</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>有一些算法天生是高方差算法. 如 KNN<br>非参数学习的通常都是高方差算法,因为不对数据进行人和假设</p>
<p>you 一些算法天生就是高偏差算法. 如线性回归<br>参数学习通常都是高偏差算法,因为对数据具有极强的假设</p>
<p>大多数算法具有相应的参数,可以调整偏差和方差<br>如 kNN 中的 k\线性回归中使用多项式回归</p>
<p>偏差和方差是矛盾的<br>降低偏差会提高方差,反之亦然.</p>
<h3 id="模型正则化"><a href="#模型正则化" class="headerlink" title="模型正则化"></a>模型正则化</h3><p>$$<br>J(\theta)=M S E(y, \hat{y} ; \theta)+\alpha \frac{1}{2} \sum_{i=1}^{n} \theta_{i}^{2}<br>$$</p>
<h1 id="logistic-regression"><a href="#logistic-regression" class="headerlink" title="logistic regression"></a>logistic regression</h1><h2 id="解决多分类问题"><a href="#解决多分类问题" class="headerlink" title="解决多分类问题"></a>解决多分类问题</h2><p>将多分类问题简化为二分类问题</p>
<h3 id="OvR-One-vs-Rest"><a href="#OvR-One-vs-Rest" class="headerlink" title="OvR(One vs Rest)"></a>OvR(One vs Rest)</h3><p>n 个类别进行 n 次分类,选择分类得分最高的</p>
<h3 id="OvO-one-vs-one"><a href="#OvO-one-vs-one" class="headerlink" title="OvO(one vs one)"></a>OvO(one vs one)</h3><p>n 个类别进行 C(n,2)次分类,选择赢数最高的分类</p>
<p><strong>ovo 耗时更长,准确率更高</strong></p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>sklearn应用性学习(1)</title>
    <url>/2019-08-04-learning-sklearn-via-practice-1/</url>
    <content><![CDATA[<p>应用性学习置于构造性学习之后，在理解 sklearn 的构造，各种参数的理论依据的基础上，进行实践性的学习。</p>
<p>本篇主要针对无监督学习进行浅尝。</p>
<a id="more"></a>

<h1 id="无监督学习"><a href="#无监督学习" class="headerlink" title="无监督学习"></a>无监督学习</h1><h2 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h2><p>Definition:根据数据的相似性将数据分为多类的过程.</p>
<h3 id="sklearn-cluster"><a href="#sklearn-cluster" class="headerlink" title="sklearn.cluster"></a>sklearn.cluster</h3><p>sklearn.cluster 模块提供的各聚类算法函数可以使用不同的数据形式作为 输入:<br>标准数据输入格式:[样本个数，特征个数]定义的矩阵形式。<br>相似性矩阵输入格式:即由[样本数目，样本数目]定义的矩阵形式，矩阵中 的每一个元素为两个样本的相似度，如 DBSCAN， AffinityPropagation(近邻传 播算法)接受这种输入。如果以余弦相似度为例，则对角线元素全为 1. 矩阵中每 个元素的取值范围为[0,1]。</p>
<h2 id="降维"><a href="#降维" class="headerlink" title="降维"></a>降维</h2><p>降维是指在某些限定条件下，降低随机变量个数，得到一组“不相关”主变量的过程。 降维可进一步细分为变量选择和特征提取两大方法。</p>
<h1 id="聚类-1"><a href="#聚类-1" class="headerlink" title="聚类"></a>聚类</h1><h2 id="kMeans"><a href="#kMeans" class="headerlink" title="kMeans"></a>kMeans</h2><p>k-means 算法以 k 为参数，把 n 个对象分成 k 个簇，使簇内具有较高的相似 度，而簇间的相似度较低。<br>其处理过程如下: 1.随机选择 k 个点作为初始的聚类中心; 2.对于剩下的点，根据其与聚类中心的距离，将其归入最近的簇 3.对每个簇，计算所有点的均值作为新的聚类中心 4.重复 2、3 直到聚类中心不再发生改变</p>
<h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>调用 KMeans 方法所需参数:<br>• <strong>n_clusters</strong>:用于指定聚类中心的个数<br>• <strong>init</strong>:初始聚类中心的初始化方法<br>• <strong>max_iter</strong>:最大的迭代次数<br>• 一般调用时只用给出 n_clusters 即可，init<br>默认是 k-means++，max_iter 默认是 300<br>其它参数:<br>• <strong>data</strong>:加载的数据<br>• <strong>label</strong>:聚类后各数据所属的标签<br>• <strong>axis</strong>: 按行求和<br>• <strong>fit_predict()</strong>:计算簇中心以及为簇分配序号</p>
<blockquote>
<p>MacOS 在执行 open 命令时,添加 <em>encoding=’gbk’</em>,避免编码错误</p>
</blockquote>
<h3 id="扩展和改进"><a href="#扩展和改进" class="headerlink" title="扩展和改进"></a>扩展和改进</h3><p>计算两条数据相似性时，Sklearn 的 K-Means 默认用的是欧式距离。虽然还有余弦相<br>似度，马氏距离等多种方法，但没有设定计算距离方法的参数。</p>
<p>更改 <a href="https://github.com/scikit-learn/scikit-learn/blob/581b0e1d73414f47ef6cde6cd282667b7e767a36/sklearn/metrics/pairwise.py#L163"><strong>euclidean_distances</strong></a> 的源码<br>建 议 使 用 scipy.spatial.distance.cdist 方 法</p>
<blockquote>
<p>Considering the rows of X (and Y=X) as vectors, compute the</p>
</blockquote>
<pre><code>distance matrix between each pair of vectors.
For efficiency reasons, the euclidean distance between a pair of row
vector x and y is computed as::
    dist(x, y) = sqrt(dot(x, x) - 2 * dot(x, y) + dot(y, y))
This formulation has two advantages over other ways of computing distances.
First, it is computationally efficient when dealing with sparse data.
Second, if one argument varies but the other remains unchanged, then
`dot(x, x)` and/or `dot(y, y)` can be pre-computed.
However, this is not the most precise way of doing this computation, and
the distance matrix returned by this function may not be exactly
symmetric as required by, e.g., ``scipy.spatial.distance`` functions.
Read more in the:`User Guide &lt;metrics&gt;`.</code></pre>
<h2 id="DBSCAN-密度聚类"><a href="#DBSCAN-密度聚类" class="headerlink" title="DBSCAN 密度聚类"></a>DBSCAN 密度聚类</h2><p>DBSCAN 算法是一种基于密度的聚类算法:<br>• 聚类的时候不需要预先指定簇的个数<br>• 最终的簇的个数不定</p>
<p>DBSCAN 算法将数据点分为三类:<br>• 核心点:在半径 Eps 内含有超过 MinPts 数目的点<br>• 边界点:在半径 Eps 内点的数量小于 MinPts，但是落在核心点的邻域内<br>• 噪音点:既不是核心点也不是边界点的点</p>
<h3 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h3><p>1.将所有点标记为核心点、边界点或噪声点; 2.删除噪声点; 3.为距离在 Eps 之内的所有核心点之间赋予一条边; 4.每组连通的核心点形成一个簇; 5.将每个边界点指派到一个与之关联的核心点的簇中(哪一个核心点的半径范围之内)。</p>
<h3 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h3><p>DBSCAN 主要参数:<br>eps: 两个样本被看作邻居节点的最大距离  min_samples: 簇的样本数<br>metric:距离计算方式</p>
<h2 id="降维-1"><a href="#降维-1" class="headerlink" title="降维"></a>降维</h2><h3 id="pca"><a href="#pca" class="headerlink" title="pca"></a>pca</h3><ul>
<li><p>主成分分析(Principal Component Analysis，PCA)是最常用的 一种降维方法，通常用于高维数据集的探索与可视化，还可以用作数 据压缩和预处理等。</p>
</li>
<li><p>PCA 可以把具有相关性的高维变量合成为线性无关的低维变量，称为 主成分。主成分能够尽可能保留原始数据的信息。</p>
</li>
</ul>
<h4 id="主要参数"><a href="#主要参数" class="headerlink" title="主要参数"></a>主要参数</h4><ul>
<li>n_components:指定主成分的个数，即降维后数据的维度</li>
<li>svd_solver :设置特征值分解的方法，默认为‘auto’,其他可选有<br>‘full’, ‘arpack’, ‘randomized’。</li>
</ul>
<h3 id="非负矩阵分解"><a href="#非负矩阵分解" class="headerlink" title="非负矩阵分解"></a>非负矩阵分解</h3><p><a href="https://blog.csdn.net/acdreamers/article/details/44663421/">原理参考</a><br>非负矩阵分解(Non-negative Matrix Factorization ，NMF) 是在矩阵中所有元素均为非负数约束条件之下的矩阵分解方法。<br>基本思想:给定一个非负矩阵 V，NMF 能够找到一个非负矩阵 W 和一个 非负矩阵 H，使得矩阵 W 和 H 的乘积近似等于矩阵 V 中的值。</p>
<ul>
<li>W 矩阵:基础图像矩阵，相当于从原 矩阵 V 中抽取出来的特征</li>
<li>H 矩阵:系数矩阵。</li>
<li>NMF 能够广泛应用于图像分析、文本<br>挖掘和语音处理等领域。</li>
</ul>
<h4 id="主要参数-1"><a href="#主要参数-1" class="headerlink" title="主要参数"></a>主要参数</h4><ul>
<li>n_components:用于指定分解后矩阵的单个维度 k;</li>
<li>init:W 矩阵和 H 矩阵的初始化方式，默认为‘nndsvdar’。</li>
</ul>
<h2 id="实战-图像分割"><a href="#实战-图像分割" class="headerlink" title="(实战)图像分割"></a>(实战)图像分割</h2><p>图像分割常用方法:</p>
<ol>
<li>阈值分割:对图像灰度值进行度量，设置不同类别的阈值，达到分割的目的。</li>
<li>边缘分割:对图像边缘进行检测，即检测图像中灰度值发生跳变的地方，则为一片<br>区域的边缘。</li>
<li>直方图法:对图像的颜色建立直方图，而直方图的波峰波谷能够表示一块区域的颜<br>色值的范围，来达到分割的目的。</li>
<li>特定理论:基于聚类分析、小波变换等理论完成图像分割。</li>
</ol>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> PIL<span class="token punctuation">.</span>Image <span class="token keyword">as</span> image
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>cluster <span class="token keyword">import</span> KMeans

<span class="token keyword">def</span> <span class="token function">loadData</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">:</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    img <span class="token operator">=</span> image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    m<span class="token punctuation">,</span>n <span class="token operator">=</span> img<span class="token punctuation">.</span>size
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z <span class="token operator">=</span> img<span class="token punctuation">.</span>getpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>
            data<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token operator">/</span><span class="token number">256.0</span><span class="token punctuation">,</span>y<span class="token operator">/</span><span class="token number">256.0</span><span class="token punctuation">,</span>z<span class="token operator">/</span><span class="token number">256.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> np<span class="token punctuation">.</span>mat<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n

imgData<span class="token punctuation">,</span>row<span class="token punctuation">,</span>col <span class="token operator">=</span> loadData<span class="token punctuation">(</span><span class="token string">'课程数据/基于聚类的整图分割/bull.jpg'</span><span class="token punctuation">)</span>
label <span class="token operator">=</span> KMeans<span class="token punctuation">(</span>n_clusters<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit_predict<span class="token punctuation">(</span>imgData<span class="token punctuation">)</span>

label <span class="token operator">=</span> label<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span>col<span class="token punctuation">]</span><span class="token punctuation">)</span>
pic_new <span class="token operator">=</span> image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span>
        pic_new<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token operator">/</span><span class="token punctuation">(</span>label<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
pic_new<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"result-bull-4.jpg"</span><span class="token punctuation">,</span> <span class="token string">"JPEG"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>sklearn应用性学习(2)</title>
    <url>/2019-08-05-learning-sklearn-via-practice-2/</url>
    <content><![CDATA[<p>应用性学习置于构造性学习之后，在理解 sklearn 的构造，各种参数的理论依据的基础上，进行实践性的学习。</p>
<p>本篇主要针对监督学习进行浅尝。</p>
<a id="more"></a>

<h1 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h1><ul>
<li><p>分类<br>与聚类算法被统一封装在 sklearn.cluster 模块不同，sklearn 库中的分类算法并未被统一 封装在一个子模块中，因此对分类算法的 import 方式各有不同。<br><strong>Sklearn 提供的分类函数包括</strong> :<br>• k 近邻(knn)<br>• 朴素贝叶斯(naivebayes)，<br>• 支持向量机(svm)，<br>• 决策树 (decision tree)<br>• 神经网络模型(Neural networks)等<br>• 这其中有线性分类器，也有非线性分类器。</p>
</li>
<li><p>回归<br>统计学分析数据的方法，目的在于了解两个或多个变数间是否相关、 研究其相关方向与强度，并建立数学模型以便观察特定变数来预测研究者感兴 趣的变数。回归分析可以帮助人们了解在自变量变化时因变量的变化量。一般 来说，通过回归分析我们可以由给出的自变量估计因变量的条件期望。<br><strong>Sklearn 提供的回归函数主要被封装在两个子模块中</strong> ，分别是 sklearn.linear_model 和 sklearn.preprocessing。 sklearn.linear_modlel 封装的是一些线性函数，线性回归函数包括有:<br>• 普通线性回归函数( LinearRegression ) • 岭回归(Ridge)<br>• Lasso(Lasso)<br>非线性回归函数，如多项式回归(PolynomialFeatures)则通过 sklearn.preprocessing 子模块进行调用</p>
</li>
</ul>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h3><p>在 sklearn 库中，可以使用 sklearn.neighbors.KNeighborsClassifier 创建一个 K 近邻分类器，主要参数有:<br>• n_neighbors:用于指定分类器中 K 的大小(默认值为 5，注意与 kmeans 的区别)<br>• weights:设置选中的 K 个点对分类结果影响的权重(默认值为平均 权重“uniform”，可以选择“distance”代表越近的点权重越高， 或者传入自己编写的以距离为参数的权重计算函数)<br>• algorithm:设置用于计算临近点的方法，因为当数据量很大的情况下计算当前点和所有点的距离再选出最近的 k 各点，这个计算量是很 费时的，所以(选项中有 ball_tree、kd_tree 和 brute，分别代表不 同的寻找邻居的优化算法，默认值为 auto，根据训练数据自动选择)</p>
<h4 id="使用经验"><a href="#使用经验" class="headerlink" title="使用经验"></a>使用经验</h4><p>在实际使用时，我们可以使用所有训练数据构成特征 X 和标签 y，使用 fit() 函数进行训练。在正式分类时，通过一次性构造测试集或者一个一个输入 样本的方式，得到样本对应的分类结果。有关 K 的取值:<br>• 如果较大，相当于使用较大邻域中的训练实例进行预测，可以减小估计误差，但是距离较远的样本也会对预测起作用，导致预测错误。<br>• 相反地，如果 K 较小，相当于使用较小的邻域进行预测，如果邻居恰好是噪声点，会导致过拟合。<br>• 一般情况下，K 会倾向选取较小的值，并使用交叉验证法选取最优 K 值。</p>
<h3 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h3><p>在 sklearn 库中，可以使用 sklearn.tree.DecisionTreeClassifier 创 建一个决策树用于分类，其主要参数有:<br>• criterion :用于选择属性的准则，可以传入“gini”代表基尼 系数，或者“entropy”代表信息增益。<br>• max_features :表示在决策树结点进行分裂时，从多少个特征 中选择最优特征。可以设定固定数目、百分比或其他标准。它 的默认值是使用所有特征个数。</p>
<h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><p>朴素贝叶斯分类器是一个以贝叶斯定理为基础<br>的多分类的分类器。<br>对于给定数据，首先基于特征的条件独立性假 设，学习输入输出的联合概率分布，然后基于此模 型，对给定的输入 x，利用贝叶斯定理求出后验概 率最大的输出 y。</p>
<p>在 sklearn 库中，实现了三个朴素贝叶斯分类器，如下表所示:<br>分类器| 描述<br>–|—<br>naive_bayes.GussianNB |高斯朴素贝叶斯<br>naive_bayes.MultinomialNB |针对多项式模型的朴素贝叶斯分类器<br>naive_bayes.BernoulliNB | 针对多元伯努利模型的朴素贝叶斯分类器</p>
<p>区别在于假设某一特征的所有属于某个类别的观测值符合特定分布，如，分 类问题的特征包括人的身高，身高符合高斯分布，这类问题适合高斯朴素贝叶斯</p>
<p>在 sklearn 库中，可以使用 sklearn.naive_bayes.GaussianNB 创建一个高斯 朴素贝叶斯分类器，其参数有:</p>
<p>• priors :给定各个类别的先验概率。<br>如果为空，则按训练数据的实际情况 进行统计;如果给定先验概率，则在训练过程中不能更改。</p>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><strong>在所有的特征数据中,可能存在缺失值或者冗余特征,如果将这些特征不加处理的送入后续的计算,可能会导致模型准确度下降并且增大计算量</strong></p>
<p>可以借助 weka 将数据进行可视化并统计</p>
<h2 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h2><h3 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h3><p>线性回归(Linear Regression)是利用数理统计中回归分析,来确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法。<br>线性回归利用称为线性回归方程的最小平方函数对一个或多个自变量和因变量之间关系进行建模。这种函数是一个或多个称为回归系数的模型参数的线性组合。只有一个自变量的情况称为简单 回归,大于一个自变量情况的叫做多元回归。</p>
<h3 id="多项式回归"><a href="#多项式回归" class="headerlink" title="多项式回归"></a>多项式回归</h3><p>在一元回归分析中，如果依变量 y 与自变量 x 的关系为非线性的，但 是又找不到适当的函数曲线来拟合，则可以采用一元多项式回归。<br>多项式回归的最大优点就是 <strong>可以通过增加 x 的高次项对实测点进行逼 近，直至满意为止</strong> 。<br>事实上，多项式回归可以处理相当一类非线性问题，它在回归分析 中占有重要的地位，因为 <em>任一函数都可以分段用多项式来逼近</em> 。</p>
<h3 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h3><p><strong>传统的基于最小二乘的线性回归法缺乏稳定性。</strong><br>岭回归(ridge regression)是一种专用于共线性数据分析的有偏估计回归方 法<br>是一种改良的最小二乘估计法，对某些数据的拟合要强于最小二乘法。</p>
<p>在 sklearn 库中，可以使用 sklearn.linear_model.Ridge 调用岭回归模型，其 主要参数有:<br>• alpha:正则化因子，对应于损失函数中的</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>sklearn</tag>
      </tags>
  </entry>
  <entry>
    <title>工作室异闻录(1)</title>
    <url>/2019-08-06-Anecdote-of-studio/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>VENI VIDI VICI。 –凯撒</p>
</blockquote>
<p>我将这句话写在了大二篇章的中叶。</p>
<p>在此之前，我是浮萍，在图书馆，在教学楼，在静谧的树林，徘徊游荡。<br>在此之后，我是一壶酒，悠然地感受岁月的安静与绵长。</p>
<p>不知不觉，我已经在这个位置上坐了小半年了，感性之人的通病就在于，会在一些奇怪的地方倾注自己的感情。比如我，比如这里。</p>
<p>在这里，我完成了我的第一个比赛作品，第一个项目，两件排名第一的课设。<br>在这里，我干掉了两箱可乐，五罐不同品牌的啤酒，难以计数的酸奶。<br>在这里，我认识了很多的人，萍水相逢者有之，志同道合者有之。</p>
<p>暑假将尽，就以此系列，来记录我的工作室时光，一段值得追忆的时光。</p>
<h1 id="贴图啦"><a href="#贴图啦" class="headerlink" title="贴图啦"></a>贴图啦</h1><ul>
<li><p>技术宅的快乐时光<br><a href="http://www.harumonia.top/image/IIl"><img src="http://www.harumonia.top/images/2019/08/06/IMG_2478.md.jpg" alt="IMG_2478.md.jpg" loading="lazy"></a></p>
</li>
<li><p>哦，my mac，my varmilo，my benQ<br><a href="http://www.harumonia.top/image/Rfo"><img src="http://www.harumonia.top/images/2019/08/06/IMG_2480.md.jpg" alt="IMG_2480.md.jpg" loading="lazy"></a></p>
</li>
<li><p>唯一能见证我曾经的整洁桌面的置物架<br><a href="http://www.harumonia.top/image/Pwc"><img src="http://www.harumonia.top/images/2019/08/06/IMG_2481.md.jpg" alt="IMG_2481.md.jpg" loading="lazy"></a></p>
</li>
<li><p>鲨雕头盔<br><a href="http://www.harumonia.top/image/i02"><img src="http://www.harumonia.top/images/2019/08/06/IMG_2470.md.jpg" alt="IMG_2470.md.jpg" loading="lazy"></a></p>
</li>
<li><p>你为什么戴着剑哥的耳机？<br><a href="http://www.harumonia.top/image/5hQ"><img src="http://www.harumonia.top/images/2019/08/06/IMG_2469.md.jpg" alt="IMG_2469.md.jpg" loading="lazy"></a></p>
</li>
<li><p>bug 改不出来辣，算了，豁酒<br><a href="http://www.harumonia.top/image/nOX"><img src="http://www.harumonia.top/images/2019/08/06/IMG_2471.md.jpg" alt="IMG_2471.md.jpg" loading="lazy"></a></p>
</li>
<li><p>我也曾挥斥方遒（然后现在在工作时间摸鱼啊%&gt;_&lt;%）(这个人怎么闭着眼睛说话？)<br><a href="http://www.harumonia.top/image/gos"><img src="http://www.harumonia.top/images/2019/08/06/IMG_2482.th.jpg" alt="IMG_2482.th.jpg" loading="lazy"></a></p>
</li>
</ul>
<div align=life> 
<iframe frameborder="no" marginwidth="0" marginheight="0" width=400 height=140 src="https://music.163.com/outchain/player?type=2&id=34341360&auto=1&height=66"></iframe>
</div>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
  </entry>
  <entry>
    <title>Be a better pythonista(1)</title>
    <url>/2019-08-06-Be-a-better-pythonista-1/</url>
    <content><![CDATA[<p>Be a better pythonista 是新开的一个坑，如其名，根本目的是为了成为一个更棒的 python 开发者。</p>
<p>如何成为一个 better pythonista？个人认为，是 python 的特性、高级语法还有对 python 形式的编程思维的理解和贯彻，这也是本系列的侧重点。</p>
<p>Be a better pythonista 计划用前四部分完成对 cookbook 的重读，中间会对一些代码进行修正处理，并且会穿插一些个人的理解。同时，还会加入一些在开发中所遇到的一些事情、写作同时遇到的一些值得分享的东西，以为 dessert。</p>
<a id="more"></a>

<p>修改记录：<br>2019 年 08 月 15 日，按照文档编写规划进行了规范修改。</p>
<h1 id="基础技巧"><a href="#基础技巧" class="headerlink" title="基础技巧"></a>基础技巧</h1><h2 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">p1 <span class="token operator">=</span> <span class="token punctuation">[</span>foo <span class="token keyword">for</span> foo <span class="token keyword">in</span> <span class="token builtin">list</span> <span class="token keyword">if</span> foo <span class="token operator">></span> ?<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="字典推导式"><a href="#字典推导式" class="headerlink" title="字典推导式"></a>字典推导式</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>key<span class="token punctuation">:</span> value <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> prices<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> value <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>
a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>切片的-1 值在使用不同的对象时有不同的效果,可以在 numpy 中进行尝试</p>
<h1 id="记数问题"><a href="#记数问题" class="headerlink" title="记数问题"></a>记数问题</h1><p>很多的记数问题可以归结为集合问题</p>
<h2 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h2><p>计算列表的每个值的出现次数</p>
<h2 id="交并补记数"><a href="#交并补记数" class="headerlink" title="交并补记数"></a>交并补记数</h2><p>使用位运算符 &amp; -</p>
<h1 id="排序问题"><a href="#排序问题" class="headerlink" title="排序问题"></a>排序问题</h1><h2 id="字典排序"><a href="#字典排序" class="headerlink" title="字典排序"></a>字典排序</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> operator <span class="token keyword">import</span> itemgetter
rows_by_fname <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token string">'fname'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
rows_by_uid <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token string">'uid'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>itemgetter() 函数也支持多个 keys，比如下面的代码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">rows_by_lfname <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span> key<span class="token operator">=</span>itemgetter<span class="token punctuation">(</span><span class="token string">'lname'</span><span class="token punctuation">,</span><span class="token string">'fname'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="排序不支持与原生比较的对象"><a href="#排序不支持与原生比较的对象" class="headerlink" title="排序不支持与原生比较的对象"></a>排序不支持与原生比较的对象</h2><h3 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> user_id<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>user_id <span class="token operator">=</span> user_id

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'User(&#123;&#125;)'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">sort_notcompare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    users <span class="token operator">=</span> <span class="token punctuation">[</span>User<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">,</span> User<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> User<span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> u<span class="token punctuation">:</span> u<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h3><p>选择使用 lambda 函数或者是 attrgetter() 可能取决于个人喜好。 但是， attrgetter() 函数通常会运行的快点，并且还能同时允许多个字段进行比较。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> operator <span class="token keyword">import</span> attrgetter
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> key<span class="token operator">=</span>attrgetter<span class="token punctuation">(</span><span class="token string">'user_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>同样需要注意的是，这一小节用到的技术同样适用于像 min() 和 max() 之类的函数。</p>
</blockquote>
<h1 id="字典相关问题"><a href="#字典相关问题" class="headerlink" title="字典相关问题"></a>字典相关问题</h1><h2 id="找出两个字典的公共键"><a href="#找出两个字典的公共键" class="headerlink" title="找出两个字典的公共键"></a>找出两个字典的公共键</h2><p>map() 得到所有字典<br>reduce(lambda a,b:a&amp;b,map(dict.viewkeys,[s1,s2,s3]))</p>
<h2 id="映射名称到序列元素"><a href="#映射名称到序列元素" class="headerlink" title="映射名称到序列元素"></a>映射名称到序列元素</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple
Subscriber <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Subscriber'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'addr'</span><span class="token punctuation">,</span> <span class="token string">'joined'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
sub <span class="token operator">=</span> Subscriber<span class="token punctuation">(</span><span class="token string">'jonesy@example.com'</span><span class="token punctuation">,</span> <span class="token string">'2012-10-19'</span><span class="token punctuation">)</span>
sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>命名元组另一个用途就是作为字典的替代，因为字典存储需要更多的内存空间。 如果你需要构建一个非常大的包含字典的数据结构，那么使用命名元组会更加高效。 但是需要注意的是，不像字典那样，一个命名元组是不可更改的。</p>
<p>如果你真的需要改变属性的值，那么可以使用命名元组实例的 <strong>_replace()</strong> 方法， 它会创建一个全新的命名元组并将对应的字段用新的值取代。比如：</p>
<p><strong>_replace()</strong> 方法还有一个很有用的特性就是当你的命名元组拥有可选或者缺失字段时候， 它是一个非常方便的填充数据的方法。 你可以先创建一个包含缺省值的原型元组，然后使用 _replace() 方法创建新的值被更新过的实例。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple

Stock <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">'Stock'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'shares'</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">,</span> <span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'time'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Create a prototype instance</span>
stock_prototype <span class="token operator">=</span> Stock<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>

<span class="token comment"># Function to convert a dictionary to a Stock</span>
<span class="token keyword">def</span> <span class="token function">dict_to_stock</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> stock_prototype<span class="token punctuation">.</span>_replace<span class="token punctuation">(</span><span class="token operator">**</span>s<span class="token punctuation">)</span>

<span class="token comment"># use</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token string">'shares'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span> <span class="token number">123.45</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> dict_to_stock<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
Stock<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> shares<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">123.45</span><span class="token punctuation">,</span> date<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> time<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'ACME'</span><span class="token punctuation">,</span> <span class="token string">'shares'</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">'price'</span><span class="token punctuation">:</span> <span class="token number">123.45</span><span class="token punctuation">,</span> <span class="token string">'date'</span><span class="token punctuation">:</span> <span class="token string">'12/17/2012'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> dict_to_stock<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
Stock<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'ACME'</span><span class="token punctuation">,</span> shares<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token number">123.45</span><span class="token punctuation">,</span> date<span class="token operator">=</span><span class="token string">'12/17/2012'</span><span class="token punctuation">,</span> time<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="让字典保持有序"><a href="#让字典保持有序" class="headerlink" title="让字典保持有序"></a>让字典保持有序</h2><p>OrderedDict()</p>
<h2 id="字典的合并或映射"><a href="#字典的合并或映射" class="headerlink" title="字典的合并或映射"></a>字典的合并或映射</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> ChainMap
c <span class="token operator">=</span> ChainMap<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Outputs 1 (from a)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Outputs 2 (from b)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token string">'z'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment"># Outputs 3 (from a)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一个 ChainMap 接受多个字典并将它们在逻辑上变为一个字典。 然后，这些字典并不是真的合并在一起了， ChainMap 类只是在内部创建了一个容纳这些字典的列表 并重新定义了一些常见的字典操作来遍历这个列表。大部分字典操作都是可以正常使用的</p>
<h1 id="字符串相关"><a href="#字符串相关" class="headerlink" title="字符串相关"></a>字符串相关</h1><h2 id="一些内置函数"><a href="#一些内置函数" class="headerlink" title="一些内置函数"></a>一些内置函数</h2><p>常用内置函数这里就不多做介绍,列举出来,有不认识的可以去查<br>find\repalce\startwith\endwith<br>strip\lstrip\rstrip<br>ljust\rjust\center<br>format()</p>
<h2 id="正则相关"><a href="#正则相关" class="headerlink" title="正则相关"></a>正则相关</h2><p>正则是字符串处理之中很重要的一环,不过已经讲的很多了,这里就只作简单讨论.</p>
<h3 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h3><h4 id="最短匹配-非贪婪"><a href="#最短匹配-非贪婪" class="headerlink" title="最短匹配(非贪婪)"></a>最短匹配(非贪婪)</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> str_pat <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'"(.*?)"'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> str_pat<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>text2<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">'no.'</span><span class="token punctuation">,</span> <span class="token string">'yes.'</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="多行匹配"><a href="#多行匹配" class="headerlink" title="多行匹配"></a>多行匹配</h4><ul>
<li>方案 1<br>修改模式字符串，增加对换行的支持。</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> comment <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'/\*((?:.|\n)*?)\*/'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> comment<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>text2<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">' this is a\n multiline comment '</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>方案 2<br>re.compile() 函数接受一个标志参数叫 re.DOTALL ，在这里非常有用。 它可以让正则表达式中的点(.)匹配包括换行符在内的任意字符。比如：</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> comment <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'/\*(.*?)\*/'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> comment<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>text2<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token string">' this is a\n multiline comment '</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="审查清理文本字符串"><a href="#审查清理文本字符串" class="headerlink" title="审查清理文本字符串"></a>审查清理文本字符串</h2><p>在非常简单的情形下，你可能会选择使用字符串函数(比如 str.upper() 和 str.lower() )将文本转为标准格式。 使用 str.replace() 或者 re.sub() 的简单替换操作能删除或者改变指定的字符序列。</p>
<p>然后，有时候你可能还想在清理操作上更进一步。比如，你可能想消除整个区间上的字符或者去除变音符。 为了这样做，你可以使用经常会被忽视的 str.translate() 方法。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token string">'pýtĥöñ\fis\tawesome\r\n'</span>

<span class="token comment">#第一步是清理空白字符。</span>
<span class="token operator">>></span><span class="token operator">></span> remap <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'\f'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">' '</span><span class="token punctuation">,</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'\r'</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token boolean">None</span> <span class="token comment"># Deleted</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> s<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>remap<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> a
<span class="token string">'pýtĥöñ is awesome\n'</span>

<span class="token comment">#空白字符 \t 和 \f 已经被重新映射到一个空格。回车字符r直接被删除。</span>

<span class="token comment"># 以这个表格为基础进一步构建更大的表格</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> unicodedata
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys
<span class="token operator">>></span><span class="token operator">></span> cmb_chrs <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">.</span>fromkeys<span class="token punctuation">(</span>c <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>maxunicode<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>                         <span class="token keyword">if</span> unicodedata<span class="token punctuation">.</span>combining<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> unicodedata<span class="token punctuation">.</span>normalize<span class="token punctuation">(</span><span class="token string">'NFD'</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> b
<span class="token string">'pýtĥöñ is awesome\n'</span>
<span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>cmb_chrs<span class="token punctuation">)</span>
<span class="token string">'python is awesome\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>对于简单的替换操作， str.replace() 方法通常是最快的，甚至在你需要多次调用的时候。</p>
</blockquote>
<h2 id="文本对齐"><a href="#文本对齐" class="headerlink" title="文本对齐"></a>文本对齐</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">'>20'</span><span class="token punctuation">)</span>
<span class="token string">'         Hello World'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">'&lt;20'</span><span class="token punctuation">)</span>
<span class="token string">'Hello World         '</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">format</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">'^20'</span><span class="token punctuation">)</span>
<span class="token string">'    Hello World     '</span>
<span class="token operator">>></span><span class="token operator">></span>

<span class="token comment"># 多值格式化</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'&#123;:>10s&#125; &#123;:>10s&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">'Hello'</span><span class="token punctuation">,</span> <span class="token string">'World'</span><span class="token punctuation">)</span>
<span class="token string">'     Hello      World'</span>
<span class="token operator">>></span><span class="token operator">></span>

<span class="token comment">#format() 函数的一个好处是它不仅适用于字符串。它可以用来格式化任何值，使得它非常的通用。 比如，你可以用它来格式化数字：</span>
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">1.2345</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'>10'</span><span class="token punctuation">)</span>
<span class="token string">'    1.2345'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">format</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'^10.2f'</span><span class="token punctuation">)</span>
<span class="token string">'   1.23   '</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="字节字符串上的字符串操作"><a href="#字节字符串上的字符串操作" class="headerlink" title="字节字符串上的字符串操作"></a>字节字符串上的字符串操作</h2><p>字节字符串支持大部分和文本字符串一样的内置操作</p>
<p>大多数情况下，在文本字符串上的操作均可用于字节字符串。 然而，这里也有一些需要注意的不同点。首先，字节字符串的索引操作返回整数而不是单独字符。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token string">'Hello World'</span> <span class="token comment"># Text string</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token string">'H'</span>
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token string">'e'</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token string">b'Hello World'</span> <span class="token comment"># Byte string</span>
<span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token number">72</span>
<span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token number">101</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="实现历史记录功能-python2-X"><a href="#实现历史记录功能-python2-X" class="headerlink" title="实现历史记录功能 python2.X"></a>实现历史记录功能 python2.X</h1><p>history = deque([],5)</p>
<blockquote>
<p>pickle 存取 python 对象<br>pickle.dump(q,open(‘history’,’w’)<br>pickle.load(open(‘history’))</p>
</blockquote>
<h1 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h1><p>考虑临时空间对性能的影响.即,要不要开辟临时空间.<br>当临时空间很大时,它的时间性能和空间性能往往不及分段处理.</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pythonista</tag>
      </tags>
  </entry>
  <entry>
    <title>2019医学信息创新工作室暑期个人总结</title>
    <url>/2019-08-08-2019summer-summary/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>探寻不到便猜测，猜测不到便想象。只有走在路上，才能摆脱局限，摆脱执着，让所有的选择、探寻、猜测、想象都生气勃勃。</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>自 7 月 1 日而今,39 天.</p>
<p>我收获了许多,知识\友情,还有更多不可名状的事物.</p>
<p>然,天下无不散的筵席,这段时光,终究是走到了尽头.</p>
<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>收获大致可以分为学习和生活两个方面吧.</p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>学习上的收获,说实话,在进行总结的时候,咋舌不已,原来在不知不觉之间,我已经学到了这么多的东西呢.</p>
<h4 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h4><ul>
<li>layui 后台模板,非常的强大,非常的傻瓜</li>
<li>echarts 百度的 api,非常亲民的绘图法</li>
<li>cytoscape 非常强大的前端绘图工具,灵活到诡谲的语法着实让我头疼了很久</li>
<li>animate 顾名思义这是一个动画 js,利用它可以制作出非常酷炫的动画效果</li>
<li>…</li>
</ul>
<p>前端学到的东西着实太多,太杂,这里对一些细枝末节的东西变不做的赘述了.</p>
<h4 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h4><ul>
<li>flask 一个轻量级的网站制作工具</li>
<li>python 语法 以高级语法为主,不在是停留在纸面,而是在真正的开发环境下去使用,获取良多.</li>
</ul>
<blockquote>
<p>有些技术，只有实际在生产中运用之后，才算是掌握。</p>
</blockquote>
<ul>
<li><p>逻辑</p>
<p>后端收获最大的当属后端逻辑.这是一个项目的物理灵魂.逻辑结构的好坏直接决定了项目的各个方面的评估.</p>
<ul>
<li><p>项目结构逻辑<br>项目之初,采用的是 MVC 架构,后来听从杨老师的建议,在网上查阅了很多的资料,更换为了 MVVM 架构.</p>
</li>
<li><p>项目业务逻辑<br>项目业务逻辑又可以细分为前端业务逻辑和后端业务逻辑</p>
<ul>
<li>前端:遵从用户优先原则,界面设计符合 lazy &amp; stupid 原则</li>
<li>后端:后端业务逻辑交叉于后端项目逻辑,同时,在考虑后端业务逻辑是,要以理解为核心,而不是一味地去搬前人旧例,要有自己的思考,联合自己的项目的实际情况.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h4><p>不知道这算不算是编外的知识,不过在项目的部署过程中,或多或少地学到了一些.</p>
<ul>
<li>linux:我并没有系统地学习过 linux 的相关知识,一直都是被迫式学习,即,要用到哪些,就去学哪些.</li>
<li>docker:docker 仍旧是一直半截,不过其展露的片麟已经足够让我震撼.</li>
<li>nginx:nginx 的理论知识学习了很多,等待后期的更多的实践操作.</li>
</ul>
<h4 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h4><ul>
<li>数据分析</li>
<li>sklearn</li>
<li>TensorFlow</li>
<li>etc.</li>
</ul>
<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><h4 id="一次宝贵的回忆"><a href="#一次宝贵的回忆" class="headerlink" title="一次宝贵的回忆"></a>一次宝贵的回忆</h4><blockquote>
<p>如果一个人想要做一件真正有意义的事情，那么往往只能一个人独自去做。 –革命之路</p>
</blockquote>
<p>聚餐\工作\学习,我习惯去一个人做一些事情,但也很享受这种很多人一起做一件事情的氛围.</p>
<h4 id="认识了一群不错的小伙伴"><a href="#认识了一群不错的小伙伴" class="headerlink" title="认识了一群不错的小伙伴"></a>认识了一群不错的小伙伴</h4><p>一开始,做这个项目的时候,footer 上只有一个名字,harumonia<br>后来,陆陆续续的加进来很多的人<br>后端组的冬瓜\flame\tsat<br>前端组的 diklios\九月\willin&amp;coco\猎人<br>大家的贡献有多有少,但对于每一个帮助过这个项目的人,我都要说一声,谢谢.</p>
<h4 id="对自己有了一个更深刻的认识"><a href="#对自己有了一个更深刻的认识" class="headerlink" title="对自己有了一个更深刻的认识"></a>对自己有了一个更深刻的认识</h4><p>我坚信,人是丑恶的,包括我.<br>不过这次的认识并不以罪己为主.<br>我认识到了自己的才能,我在团队之中可以有一个怎样的定位,这些都是在以往没有多少概念的东西,不过这次,拨云见日.<br>我也认识到了自己的器量,我可以做什么,我做不到什么,我将这些记录在本子上,多年以后再来翻阅,不知道会哭,还是会笑.</p>
<h4 id="看了两本书"><a href="#看了两本书" class="headerlink" title="看了两本书"></a>看了两本书</h4><ul>
<li>娜塔莎之旅</li>
<li>文化苦旅</li>
</ul>
<h2 id="遗憾"><a href="#遗憾" class="headerlink" title="遗憾"></a>遗憾</h2><p>也有很多的遗憾啊.</p>
<ul>
<li><p>我希望自己去做一个分布式的服务,不过最后证明,没那个本事呢.</p>
</li>
<li><p>我并不是一个很成功的项目经理,很多的事情,临阵磨枪,准备工作匮乏,过度以自己为中心,太多的缺点在这次的工作中暴露.</p>
</li>
<li><p>没能够去 cj,爽约了.</p>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总而言之吧,这次的暑期实践的基调是非常欢快的,像是一曲 canon,周回婉转,连绵不断,平淡之中却又充满了惊喜.</p>
<h1 id="结句"><a href="#结句" class="headerlink" title="结句"></a>结句</h1><p>“山河间的实际步履，使一切伟业变成了寻常风景，因此也使我们变得轻松。”</p>
<p>摘录来自: 余秋雨. “文化苦旅（新版）。” Apple Books.</p>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
  </entry>
  <entry>
    <title>计算机设计大赛国赛 and 芜湖游记（1）</title>
    <url>/2019-08-09-jsjds-travel-notes-of-wuhu-1/</url>
    <content><![CDATA[<p>一个很粗糙的作品，莫名其妙的就通过了省赛，然后莫名其妙地就到了国赛。。。算了，就好好享受一下吧，至少是要不 gong 虚 fei 此 chi 行 he，哈哈。</p>
<a id="more"></a>

<h1 id="第一日"><a href="#第一日" class="headerlink" title="第一日"></a>第一日</h1><p>第一天的下午大概 3.30 到达芜湖，然后就是报道开会等一系列繁琐的事务。</p>
<h2 id="在路上"><a href="#在路上" class="headerlink" title="在路上"></a>在路上</h2><p>高铁一路走来，从南京经马鞍山再至芜湖，可以很明显的感觉到环南京都市圈的变化。</p>
<p>这一路上，有山，有水。有炊烟袅袅，也有高楼林立。有一眼看去就让人感到闷热的城市的灰，也有独属于盛夏田园的沁人心脾的郁郁的绿。</p>
<p>也许是我习惯性地关注云要多一点。这一路上，最妙的景色莫过于云。</p>
<p>云幕低垂，一副将雨不雨的模样。</p>
<p>云朵的中央是铅灰色的，浓重的接近黑色的积雨云；内环，是淡银灰色的，接近普通云朵的模样；再往边缘，由于烈日的照射，产生了细微的丁达尔效应，给云朵镶上了一层淡彩的边，恍惚间竟然衬托出一种宝相庄严的感觉，而我们将要去的地方，有着地藏菩萨的道场–九华山，这倒是让我又生出一些妙想。</p>
<p>云之妙不止于此，刚刚所说的丁达尔效应，若是云朵太大，基本上不会出现这样的景象，没错，这些云，是一片一片的，无数的小云朵，高低错落有致，层次分明。这是一片云幕，而非一朵云幕。无数的彩云，连结成一片天空，组成了神圣而又壮观的奇景。</p>
<p>可惜由于一些原因没能够记录下来，可惜。</p>
<h2 id="安师大"><a href="#安师大" class="headerlink" title="安师大"></a>安师大</h2><p>安师大也算是历史悠久了（百年如中：╭(╯^╰)╮，比历史都是弟弟，没一个能打的）。</p>
<p>嵌进去一个住宅小区，比较羡慕啊。毕竟不是每个人都喜欢舍友的吵吵闹闹，也不是每个人都能习惯简朴艰苦的宿舍生活，多一个选择，挺好的。</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/from_hotel.jpg?Expires=1602301252" alt="IMG_2493.th.jpg" loading="lazy"></p>
<!-- 宿舍可以看到徽派建筑的一点影子呢，看看能不能走访一下徽州的古建筑群，这是最能体现人文景观的意象，我也想写一篇徽州古建筑考。
[![IMG_2495.th.jpg](http://www.harumonia.top/images/2019/08/09/IMG_2495.th.jpg)](http://www.harumonia.top/image/D08)

签名，zxj 到此一游？
[![caf542410c9c6a4ce329104fc3b76407.th.jpg](http://www.harumonia.top/images/2019/08/09/caf542410c9c6a4ce329104fc3b76407.th.jpg)](http://www.harumonia.top/image/doI)

大荷花池，大荷花池是一个环教学楼的半带状湖，如果能拍到鸟瞰图的话，相比会非常的壮观吧（没错，扬清池，你看看人家啊）
[![IMG_2498.th.jpg](http://www.harumonia.top/images/2019/08/09/IMG_2498.th.jpg)](http://www.harumonia.top/image/FA6)

小荷花池，小荷花池比之前者要逊色不少，不过，没错，扬清池，再挨一次打吧
[![6835d876f93077899ad2e64238546918.th.jpg](http://www.harumonia.top/images/2019/08/09/6835d876f93077899ad2e64238546918.th.jpg)](http://www.harumonia.top/image/UWe)

这里也有一个敬文图书馆，朱敬文也是个传奇人物啊。
[![d05cda8cb6b719438424196c71342f1e.th.jpg](http://www.harumonia.top/images/2019/08/09/d05cda8cb6b719438424196c71342f1e.th.jpg)](http://www.harumonia.top/image/j4p) -->

<h2 id="夜话"><a href="#夜话" class="headerlink" title="夜话"></a>夜话</h2><p>和导师谈了很多，详细不表。</p>
<h1 id="第二日"><a href="#第二日" class="headerlink" title="第二日"></a>第二日</h1><p>第二天就是比赛，然后嘛，吃吃玩玩咯。</p>
<h2 id="比赛开始"><a href="#比赛开始" class="headerlink" title="比赛开始"></a>比赛开始</h2><!-- 忐忑的入场照。
[![9d0c7896756d0a46e488b8618ac510f6.th.jpg](http://www.harumonia.top/images/2019/08/09/9d0c7896756d0a46e488b8618ac510f6.th.jpg)](http://www.harumonia.top/image/3Ig) -->

<p>先说说比赛答辩吧。</p>
<p>因为一些原因，开始答辩的时候是非常忐忑的，毕竟也算是钻了规则的漏洞。不过评委都很通情达理，尤其是那位年轻的女评委，实在是感谢她的强势助攻。</p>
<p>正式的答辩。个人感觉发挥出其的好啊，或者说，评委的提问都很地道。最终给我的感觉就是，与其说是答辩，不如说是讨论更为贴切。自从接触数据挖掘、机器学习、神经网络以来，很久没有遇到过这样的能够在技术方面一起讨论的酣畅淋漓的人了，评委给出的很多的修改意见，都是不错的，比省赛的外行人要得劲的多。</p>
<p>就像赛后在群里说的那样，舌战群儒的感觉，不过用舌战群儒过于不贴切了，诸葛是殴打小学生，而现在则是差不多水平的人的畅谈。</p>
<p>就是畅谈啊，最后时间到的时候，大家都是意犹未尽的感觉呢。</p>
<h3 id="答辩技巧"><a href="#答辩技巧" class="headerlink" title="答辩技巧"></a>答辩技巧</h3><p>略微总结一下答辩技巧吧。</p>
<ul>
<li>当然不能去怼评委，不过这是在 <strong>不涉及根本利益</strong> 的前提下的。</li>
<li><strong>注意话题的把控，掌握谈话的节奏。</strong> 这一点很重要，不能被评委牵着鼻子走，而是由你去引导评委，这是主要看一个人的器量，至少，你要能够在心底将自己和评委的地位等同，而不是感觉自己天然就矮一点。要记得将话题往有利于自己的方向引，要知道，什么样的话题能接，什么样的话题不能接，对于能接的话题，自然要畅所欲言，而对于不能接的话题，也不是就让他冷场，而是去尝试转移话题，这又是另一门技巧了。</li>
<li><strong>转移话题。</strong> 话题不对了，怎么转移？不能生硬的去强转，那样会留下很不好的印象。而是从评委的问题中提炼出第二层意思，这是一场文字游戏，很考验人的应变力。或者歪曲，或者断章，最终的目的是实现话题的转移，把握谈话的节奏。</li>
<li><strong>舔。</strong> 这一点是一个深谙政治的朋友告诉我的，不过这次没有这么做。可以有一个人专门拿着小本子去记录评委的建议，写什么不重要，但是要有写的动作，这样做的目的是让评委感觉到他的建议有被认真采纳了，任何人，哪怕身居高位，都会因为自己被别人重视、被别人尊敬，而高兴。</li>
<li>暂时哈没有想到……</li>
</ul>
<h2 id="下午谈心"><a href="#下午谈心" class="headerlink" title="下午谈心"></a>下午谈心</h2><p>又和导师谈论了很多，不过这次更为深入吧。</p>
<p>知道了导师的宏伟构想，怎么说呢，毕竟是从这个学院出来的学生，可以看出他对学院还是倾注了很多的感情的，他大概是学院高层少数的真心想将这个学院办好（而不是为了所谓的政绩）的人，更敬佩了，哈哈。</p>
<p>知道了周金海老师的一些传奇故事，我从另一个方面，看到并体悟了 80 年代、90 年代、00 年代的历史的大潮，这是与我从父亲那里听到的不一样的，那个时代里的高级知识分子的故事。</p>
<p>知道了信息技术学院的一些故事，有时候真的对自己在某些方面的敏锐直觉而感到害怕，也许是书读的多了自然就在这方面有着可怖的嗅觉，我希望自己的将来，只会将这份敏锐用来保护自己，而不是像故事中那样，去伤害他人。</p>
<p>……………………</p>
<!-- ## 吃喝玩玩

并没有吃什么本地特色，吃了一顿多伦多，比较失望。。。

芜湖的夜景还是不错的。

与中山桥的合影。。。本来是让同行的人拍个中山桥全景的，结果。。。
[![IMG_2525.th.jpg](http://www.harumonia.top/images/2019/08/09/IMG_2525.th.jpg)](http://www.harumonia.top/image/w3Y)

下榻的酒店
[![IMG_2518.th.jpg](http://www.harumonia.top/images/2019/08/09/IMG_2518.th.jpg)](http://www.harumonia.top/image/Zxi)

芜湖夜景
[![IMG_2520.th.jpg](http://www.harumonia.top/images/2019/08/09/IMG_2520.th.jpg)](http://www.harumonia.top/image/XJw)
[![IMG_2521.th.jpg](http://www.harumonia.top/images/2019/08/09/IMG_2521.th.jpg)](http://www.harumonia.top/image/t1H) [![IMG_2519.th.jpg](http://www.harumonia.top/images/2019/08/09/IMG_2519.th.jpg)](http://www.harumonia.top/image/vWF) [![IMG_2523.th.jpg](http://www.harumonia.top/images/2019/08/09/IMG_2523.th.jpg)](http://www.harumonia.top/image/W6T) [![IMG_2522.th.jpg](http://www.harumonia.top/images/2019/08/09/IMG_2522.th.jpg)](http://www.harumonia.top/image/pPN) [![IMG_2524.th.jpg](http://www.harumonia.top/images/2019/08/09/IMG_2524.th.jpg)](http://www.harumonia.top/image/yAU) -->

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这两天经历了很多，听到了很多的道理，我不知道我真正明白了多少。</p>
<p>果然，我还是喜欢与人交流，与上一代的人交流，与上上一代的人交流，这是了解历史，了解人文的最好的、最方便的途径。</p>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
  </entry>
  <entry>
    <title>计算机设计大赛国赛 and 芜湖游记（2）</title>
    <url>/2019-08-10-jsjds-travel-notes-of-wuhu-2/</url>
    <content><![CDATA[<h1 id="第三日"><a href="#第三日" class="headerlink" title="第三日"></a>第三日</h1><p>没有想到这会是我在芜湖的最后一天.</p>
<p>因为台风过境,大部分的动车班次都被停运.</p>
<p>我还没有知道比赛的结果如何,我还没有去参观芜湖的人文景致,却就要回去了.</p>
<p>正巧读到余秋雨所写的王朝更迭与自然变化的那一段,感触愈深.</p>
<h2 id="游记"><a href="#游记" class="headerlink" title="游记"></a>游记</h2><!-- [![IMG_2527.md.jpg](http://www.harumonia.top/images/2019/08/10/IMG_2527.md.jpg)](http://www.harumonia.top/image/Vlx) -->

<p>18 级的台风是何等的伟力?这之前无人知道,只不过,仅仅是它的先锋,就已经扼住了这个古老的城市的咽喉,处处都是萧索,处处都是愁容.</p>
<p>我是极不愿意出门的,但是无奈已经答应了给他们带一些纪念品,便只得拎着雨伞出门了.</p>
<p>涛哥听说我要买纪念品,显得十分热心,当即就开始查一些芜湖的资料了,倒也省去了我不少的功夫.</p>
<p>风雨里的芜湖别有一番滋味,我只能苦中作乐地这样去说.</p>
<!-- [![IMG_2530.md.jpg](http://www.harumonia.top/images/2019/08/10/IMG_2530.md.jpg)](http://www.harumonia.top/image/JsxO) -->

<p>芜湖的发展是极不均衡的,这一点当我第一次从 27 楼眺望时就已经发现了.</p>
<p>一条长江,分开了两个世界.</p>
<p>新城区的高楼大厦与旧城区的破败棚户形成了极鲜明的对比.中山桥从物理的层面将两边关联,但是很显然,它无法从精神层面让这两者达成统一,无论是从当事人的角度,还是从旁观者的角度.</p>
<p>新百以南,新百以北,城中村.<br>新百以东,新百以西,沿中山桥画一条线,这是这个城市真正的中心,汇集了这个城市大部分的财富.</p>
<!--
[![IMG_2529.md.jpg](http://www.harumonia.top/images/2019/08/10/IMG_2529.md.jpg)](http://www.harumonia.top/image/J7oL) -->

<p>对比,就是这么鲜明.</p>
<p>我没有买到特产,却也得到了特产.这是我在其他的城市所没有过的体悟,这是这个城市为数不多的让我感到特殊的地方.</p>
<p>这个城市被称为美食之城,被称为半山半水,但是很可惜,它在南京的旁边,它在合肥的旁边,这样的映衬下,它所谓的特色显得那么地单薄,那么地无力.若它有灵,想必也会像千年之前在此地点将的那位一样,发出”既生瑜,何生亮”之叹吧.</p>
<p>没错,它的特色,就是没有特色.</p>
<p>一座城市不能没有特色,虚无点说,这是一座城市的灵魂,现实点说,这是一个城市服务业发展的必然需求.就像听到如皋,第一个想到的便是长寿;提到南通,第一个想到的便是近代第一城.</p>
<p>查找它的城市名人,却是”赵薇”&quot;成龙之父”&quot;大司马”之流,着实可怜而又可悲,并不是说这些人有什么不好,只是,戏子自己尚且无法恒久,又如何让城市恒久?戏子自身尚且不够高格,又如何让城市高格?如果想将城市的文化内涵底蕴寄托于这些人,呵呵.</p>
<p>其实不仅仅是这座城市,近代化以来,中国的城市同质化十分严重,南京的古城墙,如皋的古城区,城市化的滚滚车轮下,没有谁能够幸免,等到大家醒悟过来,站在废墟前忏悔,将废墟重建,只是,形似,而神,十不存一.</p>
<p>这个城市充满了矛盾,我见识浅薄,无法对于这个现象给出什么根本的解决办法,但它毕竟是我所走过的城市,就只能去祝愿它迎来一位真正能够将它风采挖掘出的领导者吧.</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>真正的问题还是没有解决…我总不能带着这篇文章去跟他们说”这是我带回来的纪念品,你们看看吧”,</li>
</ul>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
  </entry>
  <entry>
    <title>文化苦旅</title>
    <url>/2019-08-12-9787806276983-note/</url>
    <content><![CDATA[<p>《文化苦旅》这本书在高中时已经读过一次，不过当时终究是阅历尚浅，不少的所谓的体会颇有“为赋新词强说愁”之感。</p>
<p>2019 年的暑假，正巧颇有闲暇，所以再次翻开此书。</p>
<a id="more"></a>

<h1 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h1><p>2019 年 8 月 8 日</p>
<p>“读万卷书，行万里路，两者关系如何？”这是我碰到最多的提问。</p>
<p>我回答：“没有两者。路，就是书。”</p>
<p>2019 年 8 月 8 日</p>
<p>“是天地，给了我们生存基座，因此也给了我们文化基座。”</p>
<p>2019 年 8 月 8 日</p>
<p>“在严严实实的封闭结构中，中华文化拥有三条最大的天地之线，那也可以说是中华文化的基本经纬。按照重要程度排列，第一条线是黄河；第二条线是长江；第三条线比较复杂，在前两条的北方，是四百毫米降雨量的分界线，也就是区分农耕文明和游牧文明的天地之线。”</p>
<p>2019 年 8 月 8 日</p>
<p>“这种批判忽视了一个宏观前提：地球不存在一种“全能文化”。中国在封闭环境中埋头耕作，自给自足，既没有必要，也没有可能对外远征掳掠。但是对内，却需要对辽阔的黄河、长江流域进行统一治理，以免不同河段间在灌溉和防灾上的互戕。这种农耕生态沉淀成了一种文化心理，追求稳定、统一、保守、集权，即使拥有了郑和这样的航海技术，也无心海洋战略。”</p>
<p>2019 年 8 月 8 日</p>
<p>“探寻不到便猜测，猜测不到便想象。只有走在路上，才能摆脱局限，摆脱执着，让所有的选择、探寻、猜测、想象都生气勃勃。”</p>
<p>2019 年 8 月 8 日</p>
<p>“再宏大的权力也留不住，只剩下与之相关的无言山河。”</p>
<p>2019 年 8 月 8 日</p>
<p>“山河间的实际步履，使一切伟业变成了寻常风景，因此也使我们变得轻松。”</p>
<p>2019 年 8 月 8 日</p>
<p>“道教汲取了老子和庄子的哲学，把水作为教义的象征。水，看似柔顺无骨，却能变得气势滚滚，波涌浪叠，无比强大；看似无色无味，却能挥洒出茫茫绿野，累累硕果，万紫千红；看似自处低下，却能蒸腾九霄，为云为雨，为虹为霞……”</p>
<p>2019 年 8 月 8 日</p>
<p>“再小的个子，也能给沙漠留下长长的身影；再小的人物，也能让历史吐出重重的叹息。”</p>
<p>2019 年 8 月 8 日</p>
<p>“宗教的力量和时间的力量足以让那些燥热的心灵冷却下来，产生几分敬畏。他们突然变得像个孩子，一路撒野下来，到这里却睁大了眼睛，希望获得宗教裁判和时间裁判。”</p>
<p>2019 年 8 月 8 日</p>
<p>“当峨冠博带早已零落成泥，崇楼华堂也都沦为草泽之后，那一杆竹管毛笔偶尔涂画的诗文，却有可能镌刻山河、雕镂人心，永不漫漶”</p>
<p>2019 年 8 月 9 日</p>
<p>“王维诗画皆称一绝，莱辛等西方哲人反复论述过的诗与画的界限，在他是可以随脚出入的。但是，长安的宫殿只为艺术家们开了一个狭小的边门，只允许他们以文化侍从的身份躬身而入。这里，不需要艺术闹出太大的人文局面，不需要对美有太深的人性寄托。”</p>
<p>2019 年 8 月 9 日</p>
<p>“历史很漠然，在多数情况下不讲曲直，不讲感情。比历史更漠然的是自然”</p>
<p>2019 年 8 月 9 日</p>
<p>“中国历史，历来“两多一少”：一是多妖，以及与此近似的魔、鬼、奸、逆；二是多仙，以及与此近似的神、圣、忠、贤。这两个群落看似界限森严却时时可以转换。少的是人，与妖与仙都不同的人。”</p>
<p>2019 年 8 月 9 日</p>
<p>“像《白蛇传》的故事一样，杭州的要义是追求人间之美。人间之美的基础，是生态之美，尤其是自然生态之美。”</p>
<p>2019 年 8 月 9 日</p>
<p>“有了伟大与渺小的比照，有了时间和空间的倒错，因此也就有了冥思的价值。”</p>
<p>2019 年 8 月 9 日</p>
<p>“越是超时代的文化名人，往往越不能相容于他所处的具体时代”</p>
<p>2019 年 8 月 9 日</p>
<p>“它一方面愿意播扬和哄传一位文化名人的声誉，利用他、榨取他、引诱他，另一方面从本质上却把他视为异类，迟早会排拒他、糟践他、毁坏他。起哄式的传扬，转化为起哄式的贬损，两种起哄都起源于自卑而狡黠的觊觎心态，两种起哄都与健康的文化氛围南辕北辙。”</p>
<p>2019 年 8 月 9 日</p>
<p>“小人牵着大师，大师牵着历史。小人顺手把绳索重重一抖，于是大师和历史全都成了罪孽的化身。一部中国文化史，有很长时间一直把诸多文化大师捆押在被告席上，而法官和原告大多是一群挤眉弄眼的小人。”</p>
<p>2019 年 8 月 9 日</p>
<p>“我相信这些朋友都不是坏人，但正因为不是坏人，更让我深长地叹息。”</p>
<p>2019 年 8 月 9 日</p>
<p>“他，真正地成熟了——与古往今来许多大家一样，成熟于一场灾难之后，成熟于灭寂后的再生，成熟于穷乡僻壤，成熟于几乎没有人在他身边的时刻。”</p>
<p>2019 年 8 月 9 日</p>
<p>“成熟是一种明亮而不刺眼的光辉，一种圆润而不腻耳的音响，一种不再需要对别人察言观色的从容，一种终于停止向周围申述求告的大气，一种不理会哄闹的微笑，一种洗刷了偏激的淡漠，一种无须声张的厚实，一种并不陡峭的高度。勃郁的豪情发过了酵，尖利的山风收住了劲，湍急的溪流汇成了湖”</p>
<p>2019 年 8 月 9 日</p>
<p>“汉族当然非常伟大，没有理由要受到外族的屠杀和欺凌。问题是，不能由此而把汉族等同于中华，把中华历史的正义、光亮、希望全部压在汉族一边。与其他民族一样，汉族也有大量的污浊、昏聩和丑恶，它的统治者曾一再地把整个中国历史推入死胡同。在这种情况下，历史有可能做出超越汉族正统论的选择，而这种选择又未必是倒退。”</p>
<p>不以为然</p>
<p>2019 年 8 月 9 日</p>
<p>“社会改革家们总是充满了理想和愤怒，一再宣称要在血火之中闯出一条壮丽的道路。他们不知道，这条道路如果是正道，终究还要与民生接轨”</p>
<p>2019 年 8 月 9 日</p>
<p>“他们立誓要带领民众摆脱贫困，而要用革命的手段摆脱贫困，最简单的办法就是剥夺富裕。要使剥夺富裕的行为变得合理，又必须把富裕和罪恶画上等号。当富裕和罪恶真的画上等号了，他们的努力也就失去了通向富裕的目标，因为那里全是罪恶。这样一来，社会改革的船舶也就成了无处靠岸的孤舟，时时可能陷入沼泽，甚至沉没。”</p>
<p>2019 年 8 月 10 日</p>
<p>“历史要当时的中国出一个杰出的藏书家，于是把他放在一个颠覆九州的官位上来成全他”</p>
<p>2019 年 8 月 10 日</p>
<p>“一生都在忙碌的所谓公务和事业，很可能不是你对这个世界最主要的贡献；请密切留意你自己也觉得是不务正业却又很感兴趣的那些小事”</p>
<p>2019 年 8 月 10 日</p>
<p>“家族传代，本身是一个不断分裂、异化、自立的生命过程，让后代接受一个需要终生投入的强硬指令，十分违背生命的自在状态。”</p>
<p>笔记摘自: 余秋雨. “文化苦旅（新版）。” Apple Books.</p>
<h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><p>无意中,在收拾一些以前写的文章的时候,发现了一篇关于&lt;文化苦旅&gt;的读书稿,一时想起那段时光,思绪不已,便决定再读一读这本书, <strong>以一个纯粹的读者的身份</strong> .</p>
<p>第一次读这本书,那大概是在初中的时候,那时少年人心性,尤其不爱这类充斥着呻吟之语的散文.</p>
<p>再后来第二次读这本书,那时高中了,却又是为了升学而疲于奔命.</p>
<p>及至今日,我经历了许多，很多我觉得自己已经明悟的道理，却又在后续的生活之中迷雾渐隐.</p>
<p>十年之前,我经历了生死,我明白了生命的脆弱,我看到了人性的善与人性的恶.向死而生,并以此认为我已经明了”人生”的终极道理.</p>
<p>五年之前,我进入了如中,我与很多优秀的人同行,我明白了什么叫做”天才”,我也终于明白,自己不过是芸芸众生之中平凡的之一罢了.<br>也是那一年,我经历了别离,我明白了”生死”并非人生的终极,总有东西能够与它并驾.从此之后,长夜漫漫,我第一次感受到了,落魄.</p>
<p>两年之前,我进入了大学,带着失败者的不甘,痛苦,迷茫.不知道是幸运还是不幸,我所牵系的已经不再是单独的一个人,我的身后不知何时已经多了无数双手,他们推动着我,前进,哪怕我并不知道前方的路通向哪里.</p>
<p>正如很久以前教授&lt;中西方文化&gt;的徐建云老师所说的,”<u>没有哭过长夜的人不足以语人生</u>“.每当我觉得,我已经足够资格去理解”人生”二字的时候,他又会展现非凡力,让我明白这两个字所蕴含的壮阔波澜.</p>
<p>这篇夹在&lt;文化苦旅&gt;的笔记之中,却又不仅是&lt;文化苦旅&gt;的读后感.并不是针对某一篇章,而是针对这一本书,针对一群人,针对一个过去的时代.</p>
<p>这是一趟苦旅,在山河间,在文化里.<br>我听到了宁古塔下被流放百年的吟哦.曾经我佩服他们深陷如此险境却能以文学自娱的乐观旷达,但是现在我明白了,那只是在文字冤狱下人性的最后的抗争.<br>我看到了屹立千年而不倒的都江堰.曾经我认为这是人类与自然对抗的一个伟大的胜利,但是现在再看,我却觉得,都江堰,是道法自然却又挑起大势的倔强坚守.<br>我读到巴金百年时总会为这位老人的遭遇而唏嘘不平.但是现在我却又生出些许的无力.因为我明白,这就是历史的大势,被这片名为政治的洪流所裹挟的人们,可敬而又可悲,但是既然选择了,便不必去同情.</p>
<p>凡此种种,不胜枚举.</p>
<p>人生的境遇不同,生出的感悟自然也就不同.无所谓对与错,”一百个读者有一百个哈姆雷特”.即使是现在的所思所想,在数年之后回首,也许不过是笑谈罢了.</p>
<p>上面又说道解读一个时代.优秀的文学作品之所以优秀,与那些无病呻吟的文章不同,会反映它所在的时代的社会问题,而后来人,可以从中汲取到解决现在的问题的办法.</p>
<p>文化苦旅虽然是一部散文集,但是它的社科意味是非常浓厚的,大多是隐喻,不过在&lt;鱼尾山屋&gt;&lt;谢家门孔&gt;等文章中更是有所直言,这也是我称之为”优秀”的原因.</p>
<p>他向我们真实地展示了那个时代,从乡村到城市,从白丁到鸿儒,处处的乱象.<br>&lt;巴金百年&gt;中,文革前后一众所谓的文学家对巴金态度的巨大转变;<br>&lt;左临遗言&gt;中,展现出的近代中国戏剧艺术界的浮躁;<br>&lt;谢家门孔&gt;中匠心独具文人与不识点墨的官员之间的剧烈的冲突.<br>当然不止我说的这些,这些不过是我体会最为深刻地几篇罢了.</p>
<p>人心在利益面前是如此的不堪一击,文革之前对大家的敬仰,在文字狱下贱之若草,这又让我联想到了一些事情.</p>
<p>以前读朱光潜的书.&lt;谈美&gt;,文章汪洋恣肆,指点江山,对美学有着自己的独到的令人击节赞叹的见解;再看&lt;谈美书简&gt;,通篇是对社会主义的赞美,我对美学的理解不深,这本不是我能置喙的问题,不过从朱光潜的自序可以看出,那个年代对知识分子的迫害,其所造成的影响,不仅在当时,更在后世.</p>
<p>由此,又想到了现代社会的一些怪状.</p>
<p>常有人说,中国文学艺术的发展停滞了,确有几分道理的.文革之后,虽然有所平反,不过仍然是人人自危,自我阉割一般的审核机制,更是给中国的文学创作套上了一层枷锁.所谓的反思的”伤痕文学”,也不过是在千篇一律的去讨论一些”枷锁”循序范围之内的事情罢了.<em>中国现在的伤痕文学,不过是在伤口的周边挠痒,不敢将伤口挖开去体会那升入骨髓的痛楚,又如何能写出真正的伤痕呢?</em> 我阅读至今,惟两人可以有这种酣畅的痛感,莫言与陈忠实罢了.这也是诺奖至今只有一人的根本原因,不敢去正视过去,又或者说,不敢让人去正视过去.我也不知道该作何评论,只是千头万绪,最终只剩下一句牢骚,<strong>不是出不了第二个鲁迅,只是不能出罢了</strong> .</p>
<p>我们读者,也一直都在体会着文化的苦旅,并且,会继续苦旅.</p>
]]></content>
      <categories>
        <category>桂苑酌记</category>
      </categories>
  </entry>
  <entry>
    <title>scikit-learn 入门建议</title>
    <url>/2019-08-12-scikit-learn-suggestion/</url>
    <content><![CDATA[<p>在七月中旬,我曾经问过涛哥,sklearn 的学习侧重,他给的建议是先学习应用.这与我重应用,补理论的观点不谋而合.</p>
<p>这是针对零基础的入门方法.对于数学功底一般(如果没有,那就还是先补一补数学吧…)的人,先看应用,在应用的过程中理解理论知识,这是比较稳妥的办法,也可以避免但看理论的枯燥,避开中期乏力的问题.</p>
<p>而如果数学\统计学底子好的,可以由理论入实践,这样会更快.</p>
<p>以下是一些资源:<br><a href="https://www.icourse163.org/learn/BIT-1001872001?tid=1001965001">python 机器学习应用</a></p>
<p>这是涛哥推荐的应用型学习网站,我已经全都看完,并且对其中的一些代码进行了优化,这里的优化是指性能优化,并不是说原来的不好,原来的为了照顾新人,所以有些地方写得太难看了.当然,原来的代码有些地方是有问题的,如果遇到了,可以问我.</p>
<p><a href="https://www.datacamp.com/">datacamp</a></p>
<p>datacamp,不知道你能不能连上去,这里面的课程是收费的,不过你可以蹭一节 sklearn 的应用先导课,这门可的第一节免费的,可以通过这个知道一下 sklearn 的入门方式.这是我目前看到的最好的实践教学网站(穷穷不说话).</p>
<p><a href="https://www.datacamp.com/courses/supervised-learning-with-scikit-learn/continue">这是我所说的那门课程</a></p>
<p><a href="https://sklearn.apachecn.org/">sklearn 的中文翻译</a><br>sklearn 的中文翻译对数学底子不好的新手实在过于不友好了.作为低配的官方文档使用.</p>
<p><a href="https://scikit-learn.org/stable/">sklearn 官方文档</a><br>sklearn 的官方文档是我少见的良心文档之一,只把它作为”工具书”来用实在过于屈才,但是如果只靠它来学习 sklearn(反正我是撑不下去…)</p>
<p>以上是主要的资源,以前发给你们的电子书,那本&lt;数据挖掘导论&gt;可以看一下,毕竟是导论嘛.我这里是有书后习题的答案的,当时好像没有给你们.</p>
<p>其余的一些不是很重要的资源,等我想到了再做补充吧~</p>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
  </entry>
  <entry>
    <title>Be a better pythonista(2)</title>
    <url>/2019-08-14-Be-a-better-pythonista-2/</url>
    <content><![CDATA[<p>分为迭代器、文件读写、函数式编程三个部分，其中，前二者来源于 cookbook，其中加入了一些个人的理解和补正。函数式编程作为个人的扩充添加进来，主要参考了一些文章和书籍，因为很杂，就不一一列出。</p>
<a id="more"></a>

<h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><h2 id="使用生成器创建新的迭代模式"><a href="#使用生成器创建新的迭代模式" class="headerlink" title="使用生成器创建新的迭代模式"></a>使用生成器创建新的迭代模式</h2><p>自定义 yield 生成器</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">frange</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> increment<span class="token punctuation">)</span><span class="token punctuation">:</span>
    x <span class="token operator">=</span> start
    <span class="token keyword">while</span> x <span class="token operator">&lt;</span> stop<span class="token punctuation">:</span>
        <span class="token keyword">yield</span> x
        x <span class="token operator">+=</span> increment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><a href="https://pyzh.readthedocs.io/en/latest/the-python-yield-keyword-explained.html">yield 的解释(stackoverflow 高赞)</a></p>
<h2 id="反向迭代"><a href="#反向迭代" class="headerlink" title="反向迭代"></a>反向迭代</h2><p>在自定义类上实现 __reversed__() 方法<br>这样做能让执行效率更高,因为省略了创建 list 的步骤</p>
<h2 id="带有外部状态的生成器函数"><a href="#带有外部状态的生成器函数" class="headerlink" title="带有外部状态的生成器函数"></a>带有外部状态的生成器函数</h2><p>这一节讲示例的类似于我之前实现的一个历史记录的功能(这也是我看了好久才看出来的)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque

<span class="token keyword">class</span> <span class="token class-name">linehistory</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lines<span class="token punctuation">,</span> histlen<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>lines <span class="token operator">=</span> lines
        self<span class="token punctuation">.</span>history <span class="token operator">=</span> deque<span class="token punctuation">(</span>maxlen<span class="token operator">=</span>histlen<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__iter__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> lineno<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>lines<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>history<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>lineno<span class="token punctuation">,</span> line<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">yield</span> line

    <span class="token keyword">def</span> <span class="token function">clear</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>history<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somefile.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    lines <span class="token operator">=</span> linehistory<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">'python'</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>
            <span class="token keyword">for</span> lineno<span class="token punctuation">,</span> hline <span class="token keyword">in</span> lines<span class="token punctuation">.</span>history<span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;&#125;:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>lineno<span class="token punctuation">,</span> hline<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="索引值迭代"><a href="#索引值迭代" class="headerlink" title="索引值迭代"></a>索引值迭代</h3><p>上面的实例中还可以看到一个有趣的东西,就是索引迭代</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> lineno<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以使用上面的代码,来更加优雅地定义记数器,而非是像以前一样去使用 index.</p>
<h2 id="迭代器切片"><a href="#迭代器切片" class="headerlink" title="迭代器切片"></a>迭代器切片</h2><p>迭代器和生成器不能使用标准的切片操作，因为它们的长度事先我们并不知道(并且也没有实现索引)。 函数 islice() 返回一个可以生成指定元素的迭代器，它通过遍历并丢弃直到切片开始索引位置的所有元素。 然后才开始一个个的返回元素，并直到切片结束索引位置。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Now using islice()</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> itertools
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> x <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>islice<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>这里要着重强调的一点是 islice() 会消耗掉传入的迭代器中的数据。 必须考虑到迭代器是不可逆的这个事实。 所以如果你需要之后再次访问这个迭代器的话，那你就得先将它里面的数据放入一个列表中。</strong></p>
<h2 id="跳过可迭代对象的开始部分"><a href="#跳过可迭代对象的开始部分" class="headerlink" title="跳过可迭代对象的开始部分"></a>跳过可迭代对象的开始部分</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#跳过开始的注释行</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> itertools <span class="token keyword">import</span> dropwhile
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">for</span> line <span class="token keyword">in</span> dropwhile<span class="token punctuation">(</span><span class="token keyword">lambda</span> line<span class="token punctuation">:</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对比下面的功能,dropwhile 可以保留非开头部分的注释行</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    lines <span class="token operator">=</span> <span class="token punctuation">(</span>line <span class="token keyword">for</span> line <span class="token keyword">in</span> f <span class="token keyword">if</span> <span class="token keyword">not</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="排列组合的迭代"><a href="#排列组合的迭代" class="headerlink" title="排列组合的迭代"></a>排列组合的迭代</h2><p>之所以将这一节记录下来,是因为想到了 C++的 next_permutations()函数, python 中的 itertools.permutations()实现了类似的功能</p>
<p>并且,也是一个启示.</p>
<blockquote>
<p>当我们碰到看上去有些复杂的迭代问题时，最好可以先去看看 itertools 模块。 如果这个问题很普遍，那么很有可能会在里面找到解决方案！</p>
</blockquote>
<h2 id="zip-迭代多序列"><a href="#zip-迭代多序列" class="headerlink" title="zip 迭代多序列"></a>zip 迭代多序列</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> itertools <span class="token keyword">import</span> zip_longest
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> zip_longest<span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>zip 长度遵从 <strong>最短序列</strong><br>zip 支持多序列(不仅仅是两个)</p>
<h2 id="不同集合的迭代"><a href="#不同集合的迭代" class="headerlink" title="不同集合的迭代"></a>不同集合的迭代</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">]</span>

<span class="token comment"># awo</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> active_items<span class="token punctuation">:</span>
    <span class="token comment"># Process item</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token keyword">for</span> item <span class="token keyword">in</span> inactive_items<span class="token punctuation">:</span>
    <span class="token comment"># Process item</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment"># Inefficent</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> a <span class="token operator">+</span> b<span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment"># Better</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> chain<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这三种方法都能实现不同集合的迭代<br>第一种方法明显有失优雅<br>第二种方法开辟了额外的空间并且时间消耗更大<br>第三种方法就是本节介绍的方法,消耗更低,更优雅</p>
<h2 id="展开嵌套序列"><a href="#展开嵌套序列" class="headerlink" title="展开嵌套序列"></a>展开嵌套序列</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Iterable

<span class="token keyword">def</span> <span class="token function">flatten</span><span class="token punctuation">(</span>items<span class="token punctuation">,</span> ignore_types<span class="token operator">=</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> items<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> Iterable<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> ignore_types<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> <span class="token keyword">from</span> flatten<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">yield</span> x

items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>
<span class="token comment"># Produces 1 2 3 4 5 6 7 8</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> flatten<span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里的重点在于 <strong>yield from</strong> 的使用.<br>可以使用下面的代码来替代,不过,美观嘛.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> flatten<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">yield</span> i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>isinstance(x, Iterable)</strong> 检查某个元素是否是可迭代的。 如果是的话， <strong>yield from</strong> 就会返回所有子例程的值。最终返回结果就是一个没有嵌套的简单序列了。</p>
<blockquote>
<p>之前提到的对于字符串和字节的额外检查是为了防止将它们再展开成单个字符。 如果还有其他你不想展开的类型，修改参数 ignore_types 即可。</p>
</blockquote>
<h1 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h1><h2 id="打印输出到文件"><a href="#打印输出到文件" class="headerlink" title="打印输出到文件"></a>打印输出到文件</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'d:/work/test.txt'</span><span class="token punctuation">,</span> <span class="token string">'wt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token operator">=</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这里特别提一下,可以用作 log 记录,配合上文中的历史记录,可以制作一个自动化的 log 文件.</p>
<h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><h3 id="获取文件路径"><a href="#获取文件路径" class="headerlink" title="获取文件路径"></a>获取文件路径</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> os
<span class="token operator">>></span><span class="token operator">></span> path <span class="token operator">=</span> <span class="token string">'/Users/beazley/Data/data.csv'</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Get the last component of the path</span>
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token string">'data.csv'</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Get the directory name</span>
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token string">'/Users/beazley/Data'</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Join path components together</span>
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'tmp'</span><span class="token punctuation">,</span> <span class="token string">'data'</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token string">'tmp/data/data.csv'</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Expand the user's home directory</span>
<span class="token operator">>></span><span class="token operator">></span> path <span class="token operator">=</span> <span class="token string">'~/Data/data.csv'</span>
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>expanduser<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token string">'/Users/beazley/Data/data.csv'</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Split the file extension</span>
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>splitext<span class="token punctuation">(</span>path<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">'~/Data/data'</span><span class="token punctuation">,</span> <span class="token string">'.csv'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="测试文件是否存在"><a href="#测试文件是否存在" class="headerlink" title="测试文件是否存在"></a>测试文件是否存在</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> os
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'/tmp/spam'</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>
<span class="token operator">>></span><span class="token operator">></span>

<span class="token comment">#进一步,测试是否为某一个特定形式的文件</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Is a regular file</span>
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Is a directory</span>
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">)</span>
<span class="token boolean">False</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Is a symbolic link</span>
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>islink<span class="token punctuation">(</span><span class="token string">'/usr/local/bin/python3'</span><span class="token punctuation">)</span>
<span class="token boolean">True</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token comment"># Get the file linked to</span>
<span class="token operator">>></span><span class="token operator">></span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span><span class="token string">'/usr/local/bin/python3'</span><span class="token punctuation">)</span>
<span class="token string">'/usr/local/bin/python3.3'</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="列出目录下的文件-非递归"><a href="#列出目录下的文件-非递归" class="headerlink" title="列出目录下的文件(非递归)"></a>列出目录下的文件(非递归)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">.</span>path

os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="结合应用-筛选文件"><a href="#结合应用-筛选文件" class="headerlink" title="结合应用:筛选文件"></a>结合应用:筛选文件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token punctuation">.</span>path

<span class="token comment"># Get all regular files</span>
names <span class="token operator">=</span> <span class="token punctuation">[</span>name <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># Get all dirs</span>
dirnames <span class="token operator">=</span> <span class="token punctuation">[</span>name <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># 也可以使用后缀名判定</span>
pyfiles <span class="token operator">=</span> <span class="token punctuation">[</span>name <span class="token keyword">for</span> name <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'somedir'</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> name<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'.py'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="获取文件的元信息"><a href="#获取文件的元信息" class="headerlink" title="获取文件的元信息"></a>获取文件的元信息</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Example of getting a directory listing</span>

<span class="token keyword">import</span> os
<span class="token keyword">import</span> os<span class="token punctuation">.</span>path
<span class="token keyword">import</span> glob

pyfiles <span class="token operator">=</span> glob<span class="token punctuation">.</span>glob<span class="token punctuation">(</span><span class="token string">'*.py'</span><span class="token punctuation">)</span>

<span class="token comment"># Get file sizes and modification dates</span>
name_sz_date <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getsize<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>getmtime<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">for</span> name <span class="token keyword">in</span> pyfiles<span class="token punctuation">]</span>
<span class="token keyword">for</span> name<span class="token punctuation">,</span> size<span class="token punctuation">,</span> mtime <span class="token keyword">in</span> name_sz_date<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> size<span class="token punctuation">,</span> mtime<span class="token punctuation">)</span>

<span class="token comment"># Alternative: Get file metadata</span>
file_metadata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> os<span class="token punctuation">.</span>stat<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> name <span class="token keyword">in</span> pyfiles<span class="token punctuation">]</span>
<span class="token keyword">for</span> name<span class="token punctuation">,</span> meta <span class="token keyword">in</span> file_metadata<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> meta<span class="token punctuation">.</span>st_size<span class="token punctuation">,</span> meta<span class="token punctuation">.</span>st_mtime<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="序列化对象"><a href="#序列化对象" class="headerlink" title="序列化对象"></a>序列化对象</h2><p><strong>pickle</strong> 是一种 Python 特有的自描述的数据编码。 通过自描述，被序列化后的数据包含每个对象开始和结束以及它的类型信息。 因此，你无需担心对象记录的定义，它总是能工作。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># pickle处理多个对象</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pickle
<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somedata'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Pear'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'somedata'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token string">'hello'</span>
<span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token string">'Pear'</span><span class="token punctuation">,</span> <span class="token string">'Banana'</span><span class="token punctuation">&#125;</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>千万不要对不信任的数据使用 pickle.load()。<br>pickle 在加载时有一个副作用就是它会自动加载相应模块并构造实例对象。<br>但是某个坏人如果知道 pickle 的工作原理，<br>他就可以创建一个恶意的数据导致 Python 执行随意指定的系统命令。<br>因此，一定要保证 pickle 只在相互之间可以认证对方的解析器的内部使用。</p>
</blockquote>
<p>pickle 对于大型的数据结构比如使用 array 或 numpy 模块创建的二进制数组效率并不是一个高效的编码方式。 如果你需要移动大量的数组数据，你最好是先在一个文件中将其保存为数组数据块或使用更高级的标准编码方式如 HDF5 (需要第三方库的支持)。</p>
<p>由于 pickle 是 Python 特有的并且附着在源码上，所有如果需要长期存储数据的时候不应该选用它。 例如，如果源码变动了，你所有的存储数据可能会被破坏并且变得不可读取。 坦白来讲，对于在数据库和存档文件中存储数据时，你最好使用更加标准的数据编码格式如 XML，CSV 或 JSON。 这些编码格式更标准，可以被不同的语言支持，并且也能很好的适应源码变更。</p>
<p>最后一点要注意的是 pickle 有大量的配置选项和一些棘手的问题。</p>
<h1 id="函数式编程——初见"><a href="#函数式编程——初见" class="headerlink" title="函数式编程——初见"></a>函数式编程——初见</h1><p>也许继”面向对象编程”之后，”函数式编程”会成为下一个编程的主流范式（paradigm）。</p>
<p>函数式编程与命令式编程最大的不同其实在于：<br><strong>函数式编程关心数据的映射，命令式编程关心解决问题的步骤</strong></p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>简单说，”函数式编程”是一种”编程范式”（programming paradigm），也就是如何编写程序的方法论。<br>它属于”结构化编程”的一种，主要思想是把运算过程尽量写成一系列嵌套的函数调用.</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>函数是”第一等公民”<br>函数与其他数据类型一样，处于平等地位，可以赋值给其他变量，也可以作为参数，传入另一个函数，或者作为别的函数的返回值。</li>
<li>只用”表达式”，不用”语句”<br>函数式编程只要求把 I/O 限制到最小，不要有不必要的读写行为，保持计算过程的单纯性。</li>
<li>没有”副作用”<br>函数要保持独立，所有功能就是返回一个新的值，没有其他行为，尤其是不得修改外部变量的值。</li>
<li>不修改状态</li>
<li>引用透明<br>函数的运行不依赖于外部变量或”状态”，只依赖于输入的参数，任何时候只要参数相同，引用函数所得到的返回值总是相同的。</li>
</ul>
<h2 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h2><ul>
<li>代码简洁，开发快速</li>
<li>接近自然语言，易于理解</li>
<li>更方便的代码管理<br>函数式编程不依赖、也不会改变外界的状态，只要给定输入参数，返回的结果必定相同。因此，每一个函数都可以被看做独立单元，很有利于进行单元测试（unit testing）和除错（debugging），以及模块化组合。<br>易于复用.</li>
<li>易于”并发编程”</li>
<li>代码的热升级</li>
</ul>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pythonista</tag>
      </tags>
  </entry>
  <entry>
    <title>Introduction to data mining(1)</title>
    <url>/2019-08-17-Introduction_to_data_mining-1/</url>
    <content><![CDATA[<p>本篇是笔者在学习 “Introduction to data mining”(《数据挖掘导论》)的英文最新版所记录的一些学习笔记。</p>
<p>2020.10.10 更新</p>
<p>很可惜的是，在多次迁移的过程中，本章的图片都丢失了。</p>
<p>食之无味，弃之可惜。所以暂且先保留在这里，以后再补全吧。</p>
<a id="more"></a>

<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><h2 id="什么是数据挖掘"><a href="#什么是数据挖掘" class="headerlink" title="什么是数据挖掘"></a>什么是数据挖掘</h2><p>数据挖掘是在大型数据库中，自动发现有用信息的过程。</p>
<blockquote>
<p>Data mining is the processof automatically discoveringuseful information in large data repositories.</p>
</blockquote>
<h3 id="数据挖掘与知识发现"><a href="#数据挖掘与知识发现" class="headerlink" title="数据挖掘与知识发现"></a>数据挖掘与知识发现</h3><p><a href="http://www.harumonia.top/image/JVRe"><img src="http://www.harumonia.top/images/2019/08/17/image.md.png" alt="image.md.png" loading="lazy"></a></p>
<h2 id="数据挖掘要解决的问题"><a href="#数据挖掘要解决的问题" class="headerlink" title="数据挖掘要解决的问题"></a>数据挖掘要解决的问题</h2><ul>
<li>可伸缩</li>
<li>高维性</li>
<li>异种数据和复杂数据</li>
<li>数据的所有权与分布</li>
<li>非传统的分析</li>
</ul>
<h2 id="数据挖掘的任务"><a href="#数据挖掘的任务" class="headerlink" title="数据挖掘的任务"></a>数据挖掘的任务</h2><ul>
<li>预测变量<blockquote>
<p>The objective of thesetasks is to predict the value of a par- ticular attribute basedon the valuesof other attributes. The attribute to be predicted is commonly known as the target or dependent vari- able, while the attributes used for making the prediction are known as the explanatory or independent variables.</p>
</blockquote>
</li>
<li>描述任务<blockquote>
<p>Here, the objective is to derive patterns (correlations, trends, clusters, trajectories, and anomalies) that summarize the un- derlying relationships in data. Descriptive data mining tasks are often exploratory in nature and frequently require postprocessingtechniques to validate and explain the results</p>
</blockquote>
</li>
</ul>
<h3 id="四大任务"><a href="#四大任务" class="headerlink" title="四大任务"></a>四大任务</h3><h4 id="预测建模"><a href="#预测建模" class="headerlink" title="预测建模"></a>预测建模</h4><ul>
<li>分类：用于预测 <strong>离散</strong> 的目标变量 (二值型)</li>
<li>回归：…… <strong>连续</strong> ……</li>
</ul>
<p><em>应用</em> ：可以用来确定顾客对产品促销的反应、预测地球生态系统的扰动、根据检查结果判断病人是否具有某种疾病<br><em>典型案例</em> ：预测花的类型</p>
<h4 id="关系分析"><a href="#关系分析" class="headerlink" title="关系分析"></a>关系分析</h4><p>用来发现描述数据中强关联特征的模式<br><em>应用</em> : 找出具有相关功能的基因组、识别用户一起访问的 Web 页面、理解地球气候系统不同元素之间的联系<br><em>典型案例</em> : 购物篮分析(牛奶——尿布)</p>
<h4 id="聚类分析"><a href="#聚类分析" class="headerlink" title="聚类分析"></a>聚类分析</h4><p>发现紧密相关的 <strong>观测值组群</strong> ，使得与属于不同簇的观测值相比,属于同一簇的观测值尽可能地相似.</p>
<p><em>应用</em> : 对相关的客户分组 , 找出显著影响地球气候的海洋区域以及压缩数据等<br><em>典型案例</em> : 文档聚类(词之间的相似性)</p>
<h4 id="异常检测"><a href="#异常检测" class="headerlink" title="异常检测"></a>异常检测</h4><p>识别特征显著不同于其他数据的观测值,这样的值称为 <strong>异常点</strong> 或 <strong>离群点</strong> .<br>好的异常检测器必然具有高检测率和低误报率.</p>
<p><em>应用</em> : 检测欺诈\网络攻击\疾病的不寻常模式\生态系统扰动<br><em>典型案例</em> :信用卡欺诈检测</p>
<h1 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>数据对象 : 记录\点\向量\模式\事件\案例\样本\观测或实体</p>
<h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><p>四种属性类型:标称 序数 区间 比率<br><a href="http://www.harumonia.top/image/N7Zp"><img src="http://www.harumonia.top/images/2019/08/17/image04e5c16df6c5ea4b.md.png" alt="image04e5c16df6c5ea4b.md.png" loading="lazy"></a><br>标称和序数统称 <strong>分类的</strong> (categorical) 或 <strong>定性的</strong> (qualitative) 属性.顾名思义,定性属性(如雇员 ID)不具有数的大部分性质,应当像对待符号一样对待他们.其余两种属性,即区间和比率,统称 <strong>定量的</strong> (quantitative) 或 <strong>数值的</strong> (numeric) 属性,用数表示,并且具有数的大部分性质.</p>
<pre><code>                        定义属性层次的变换</code></pre>
<p><a href="http://www.harumonia.top/image/NNYg"><img src="http://www.harumonia.top/images/2019/08/17/image1f4bfe8f69e2395b.md.png" alt="image1f4bfe8f69e2395b.md.png" loading="lazy"></a></p>
<h3 id="数据集的类型"><a href="#数据集的类型" class="headerlink" title="数据集的类型"></a>数据集的类型</h3><ul>
<li>记录数据</li>
<li>基于图形的数据</li>
<li>有序的数据</li>
</ul>
<h4 id="数据集的一般特性"><a href="#数据集的一般特性" class="headerlink" title="数据集的一般特性"></a>数据集的一般特性</h4><ul>
<li>维度<br>对象具有的属性的数目.分析高维数据有时会陷入 <strong>维灾难(curse of dimensionality)</strong> 所以要先预处理.</li>
<li>稀疏性</li>
<li>分辨率</li>
</ul>
<h4 id="记录数据"><a href="#记录数据" class="headerlink" title="记录数据"></a>记录数据</h4><ul>
<li>事物数据或购物篮数据</li>
<li>数据矩阵</li>
<li>稀疏数据矩阵</li>
</ul>
<p><a href="http://www.harumonia.top/image/Nqn6"><img src="http://www.harumonia.top/images/2019/08/17/image59be1d41fb6ceff6.md.png" alt="image59be1d41fb6ceff6.md.png" loading="lazy"></a></p>
<h4 id="基于图形的数据"><a href="#基于图形的数据" class="headerlink" title="基于图形的数据"></a>基于图形的数据</h4><p>这里考虑两种特殊情况:图形捕获数据对象之间的联系\数据对象本身用图形表示</p>
<h4 id="有序数据"><a href="#有序数据" class="headerlink" title="有序数据"></a>有序数据</h4><p>属性具有涉及时间或空间序的联系</p>
<ul>
<li>时序数据</li>
<li>序列数据</li>
<li>时间序列数据</li>
<li>空间数据</li>
</ul>
<h4 id="处理非记录数据"><a href="#处理非记录数据" class="headerlink" title="处理非记录数据"></a>处理非记录数据</h4><h2 id="数据质量"><a href="#数据质量" class="headerlink" title="数据质量"></a>数据质量</h2><p>(1)数据质量问题的检测和纠正<br>(2)使用可以容忍低质量数据的算法</p>
<h3 id="测量和数据收集问题"><a href="#测量和数据收集问题" class="headerlink" title="测量和数据收集问题"></a>测量和数据收集问题</h3><ul>
<li>噪声</li>
<li>伪象</li>
<li>偏倚</li>
<li>精度</li>
<li>准确率</li>
</ul>
<h4 id="测量误差和数据收集错误-Measurement-and-Data-Collection-Errors"><a href="#测量误差和数据收集错误-Measurement-and-Data-Collection-Errors" class="headerlink" title="测量误差和数据收集错误 Measurement and Data Collection Errors"></a>测量误差和数据收集错误 Measurement and Data Collection Errors</h4><p>通过人工干预来纠正(比如在数据录入的时候)</p>
<h4 id="噪声和伪象-Noise-and-Artifacts"><a href="#噪声和伪象-Noise-and-Artifacts" class="headerlink" title="噪声和伪象 Noise and Artifacts"></a>噪声和伪象 Noise and Artifacts</h4><p>噪声 Noise : 通常用于包含时间或空间分量的数据，这种情况下，通常可以使用信号或图像处理技术来降低噪声<br>伪象 Artifacts : 确定性失真</p>
<pre><code>鲁棒算法：
    在噪声干扰下也能产生可以接受的结果。</code></pre>
<h4 id="精度-偏倚和准确率-Precision-Bias-and-Accuracy"><a href="#精度-偏倚和准确率-Precision-Bias-and-Accuracy" class="headerlink" title="精度\偏倚和准确率 Precision, Bias, and Accuracy"></a>精度\偏倚和准确率 Precision, Bias, and Accuracy</h4><p>精度 Precision : (同一个量的)重复测量值之间的接近程度<br>偏倚 Bias : 测量值与被测量值之间的系统的变差<br>准确率 Accuracy :被测量的测量值与实际值之间的接近度</p>
<pre><code>准确度依赖于精度和偏倚</code></pre>
<p>异常值 Outliers</p>
<h4 id="离群点-Outliers"><a href="#离群点-Outliers" class="headerlink" title="离群点 Outliers"></a>离群点 Outliers</h4><p>与典型值不同的值，即“异常”<br>区别噪声和离群点</p>
<h4 id="遗漏值-Missing-Values"><a href="#遗漏值-Missing-Values" class="headerlink" title="遗漏值 Missing Values"></a>遗漏值 Missing Values</h4><p>条件选择型填空常见<br>处理方法：</p>
<ul>
<li>删除数据对象或属性</li>
<li>估计遗漏值 平滑——连续</li>
<li>在分析时忽略遗漏值</li>
</ul>
<h4 id="不一致的值-Inconsistent-Values"><a href="#不一致的值-Inconsistent-Values" class="headerlink" title="不一致的值 Inconsistent Values"></a>不一致的值 Inconsistent Values</h4><p>错误的值、不在允许范围内的值</p>
<h4 id="重复数据-Duplicate-Data"><a href="#重复数据-Duplicate-Data" class="headerlink" title="重复数据 Duplicate Data"></a>重复数据 Duplicate Data</h4><h3 id="关于应用的问题"><a href="#关于应用的问题" class="headerlink" title="关于应用的问题"></a>关于应用的问题</h3><p>理想情况下,数据集附有描述数据的文档</p>
<h2 id="数据预处理-Data-Preprocessing"><a href="#数据预处理-Data-Preprocessing" class="headerlink" title="数据预处理 Data Preprocessing"></a>数据预处理 Data Preprocessing</h2><p>分为两大类:选择分析所需要的数据对象和属性 以及 创建/改变属性.</p>
<blockquote>
<p>根据习惯,使用特征(feature)或变量(variable)指代属性</p>
</blockquote>
<h3 id="聚集-Aggregation"><a href="#聚集-Aggregation" class="headerlink" title="聚集 Aggregation"></a>聚集 Aggregation</h3><p>将两个或多个对象合并成单个对象</p>
<p><u> <strong>定量</strong> 属性(如价格)通常通过求和或求平均值进行聚集</u><br><u> <strong>定性</strong> 属性(如商品)可以忽略或汇总成在一个商店销售的所有商品的集合</u></p>
<p>聚集的动机有多种:<br>首先,数据归约导致的较小数据集需要较少的内存和处理时间,因此,可以使用开销更大的数据挖掘算法.<br>其次,通过高层而不是低层数据视图,聚集起到了范围或标度转换的作用.<br>最后,对象或属性群的行为通常比单对象或属性的行为更稳定.</p>
<blockquote>
<p>聚集的缺点可能是丢失有趣的细节(如极值)</p>
</blockquote>
<h3 id="抽样-Sampling-Approaches"><a href="#抽样-Sampling-Approaches" class="headerlink" title="抽样 Sampling Approaches"></a>抽样 Sampling Approaches</h3><p>抽样是一种选择数据对象子集进行分析的常用方法.<br>在统计学中,抽样长期用于数据的事先调查和最终的数据分析.</p>
<p><strong>有效抽样的</strong> 原理:<br>如果样本是有代表性的,则使用样本与使用整个数据集的效果几乎一样.<br>而样本是有代表性的,前提是它近似地具有与原数据集相同的(感兴趣的)性质</p>
<h4 id="抽样方法-Sampling-Approaches"><a href="#抽样方法-Sampling-Approaches" class="headerlink" title="抽样方法 Sampling Approaches"></a>抽样方法 Sampling Approaches</h4><ul>
<li><p>简单随机抽样</p>
<ul>
<li>无放回抽样</li>
<li>有放回抽样</li>
</ul>
</li>
<li><p>分层抽样</p>
</li>
</ul>
<h4 id="渐进抽样"><a href="#渐进抽样" class="headerlink" title="渐进抽样"></a>渐进抽样</h4><p>从一个小样本开始,增加样本容量直到得到足够容量的样本.</p>
<h3 id="维归约-Dimensionality-Reduction"><a href="#维归约-Dimensionality-Reduction" class="headerlink" title="维归约 Dimensionality Reduction"></a>维归约 Dimensionality Reduction</h3><p>好处:</p>
<ul>
<li>如果维度较低,许多数据挖掘的算法的效果会更好.</li>
<li>可以使模型更容易理解</li>
<li>可以更容易让数据可视化</li>
<li>降低了数据挖掘算法的时间和内存需求</li>
</ul>
<blockquote>
<p>通过选择旧属性的子集得到新属性,这种归约称为 <strong>特征子集选择</strong> 或 <strong>特征选择</strong></p>
</blockquote>
<h4 id="维灾难-The-Curse-of-Dimensionality"><a href="#维灾难-The-Curse-of-Dimensionality" class="headerlink" title="维灾难 The Curse of Dimensionality"></a>维灾难 The Curse of Dimensionality</h4><p>维灾难:随着数据维度的增加,许多数据分析变得非常困难.特别是随着维度增加,数据在它所占据的空间中越来越稀疏.</p>
<p>结果是对于高维数据,许多分类和聚类算法(以及其他数据分析算法)都麻烦缠身–分类准确率低,聚类质量下降</p>
<h4 id="维归约的线性代数技术-Linear-Algebra-Techniques-for-Dimensionality-Reduction"><a href="#维归约的线性代数技术-Linear-Algebra-Techniques-for-Dimensionality-Reduction" class="headerlink" title="维归约的线性代数技术 Linear Algebra Techniques for Dimensionality Reduction"></a>维归约的线性代数技术 Linear Algebra Techniques for Dimensionality Reduction</h4><p>将数据从高维 <strong>投影</strong> 到低维空间,特别是对于 <strong>连续</strong> 数据</p>
<ul>
<li>主成分分析 Principal Components Analysis (PCA)<br>用于连续属性的线性代数技术,她找出新的属性(主成分),这些属性数原属性的线性组合,是相互 <strong>正交的 (orthogonal)</strong>,并且捕获了数据的最大变差.</li>
<li>奇异值分解 Singular Value Decomposition (SVD)</li>
</ul>
<h3 id="特征子集选择-Feature-Subset-Selection"><a href="#特征子集选择-Feature-Subset-Selection" class="headerlink" title="特征子集选择 Feature Subset Selection"></a>特征子集选择 Feature Subset Selection</h3><p>降低维度的另一种方法是只是用特征的一个子集</p>
<p><strong>Redundant features</strong> (冗余特征) duplicate much or all of the information contained in one or more other attributes.</p>
<p><strong>Irrelevant features</strong> (不相干特征) Oontain almost no useful information for the data mining task at hand.</p>
<p>冗余和不相干特征可能降低分类的准确率,影响所发现的聚类的质量.</p>
<p>特征选择的理想方法:将所有可能的特征子集作为感兴趣的数据挖掘算法的输入,然后选择产生最好结果的子集.</p>
<p>三种标准的特征选择方法:嵌入,过滤,包装</p>
<ul>
<li>嵌入方法 Embedded approaches<br>作为数据挖掘算法的一部分</li>
<li>过滤方法 Filter approaches<br>使用某种独立于数据挖掘的方法</li>
<li>包装方法 Wrapper approaches<br>这些方法将目标数据挖掘算法作为黑盒,使用类似与前面介绍的理想算法</li>
</ul>
<h4 id="特征子集选择体系结构"><a href="#特征子集选择体系结构" class="headerlink" title="特征子集选择体系结构"></a>特征子集选择体系结构</h4><p>子集评估度量,控制新的特征子集产生的搜索策略,停止搜索判断,验证过程</p>
<p><a href="http://www.harumonia.top/image/NsSt"><img src="http://www.harumonia.top/images/2019/08/17/imagea43b43449d9493db.md.png" alt="imagea43b43449d9493db.md.png" loading="lazy"></a></p>
<h4 id="特征加权-Feature-Weighting"><a href="#特征加权-Feature-Weighting" class="headerlink" title="特征加权 Feature Weighting"></a>特征加权 Feature Weighting</h4><h3 id="特征创建-Feature-Creation"><a href="#特征创建-Feature-Creation" class="headerlink" title="特征创建 Feature Creation"></a>特征创建 Feature Creation</h3><h4 id="特征提取-Feature-Extraction"><a href="#特征提取-Feature-Extraction" class="headerlink" title="特征提取 Feature Extraction"></a>特征提取 Feature Extraction</h4><p>最常使用的特征提取都是高度针对具体领域的<br>一旦数据挖掘用于一个新的领域,一个关键任务就是开发新的特征和特征提取方法</p>
<h4 id="映射到新的空间-Mapping-the-Data-to-a-New-Space"><a href="#映射到新的空间-Mapping-the-Data-to-a-New-Space" class="headerlink" title="映射到新的空间 Mapping the Data to a New Space"></a>映射到新的空间 Mapping the Data to a New Space</h4><p>使用一种完全不同的视角挖掘数据可能揭示出重要和有趣的特征.</p>
<p><strong>傅里叶变换 Fourier transform</strong></p>
<blockquote>
<p>对于时间序列和其他类型的数据,<strong>小波变换 wavelet transform</strong> 也非常有用</p>
</blockquote>
<h4 id="特征构造-Feature-Construction"><a href="#特征构造-Feature-Construction" class="headerlink" title="特征构造 Feature Construction"></a>特征构造 Feature Construction</h4><p>一个或多个由元特征构造的新特征可能比原特征更有用</p>
<h3 id="离散化和二元化-Discretization-and-Binarization"><a href="#离散化和二元化-Discretization-and-Binarization" class="headerlink" title="离散化和二元化 Discretization and Binarization"></a>离散化和二元化 Discretization and Binarization</h3><h4 id="二元化"><a href="#二元化" class="headerlink" title="二元化"></a>二元化</h4><p>如果有 m 个分类值,则将每个原始值唯一的赋予区间[0,m-1]中的一个整数.</p>
<p>这样的变换可能导致复杂化,如无意之中建立了转换后的属性之间的联系.</p>
<p>关联分析需要非对称的二元属性,其中只有属性的出现(值为 1)才是重要的.</p>
<p>对于关联问题,可能需要用两个非对称的二元属性替换单个二元属性.</p>
<h4 id="连续属性离散化"><a href="#连续属性离散化" class="headerlink" title="连续属性离散化"></a>连续属性离散化</h4><p>两个子任务:决定需多少个分类值,以及确定如何将连续属性值映射到这些分类值.</p>
<p>离散化问题就是决定选择多少个分割点和确定分割点位置的问题.</p>
<h5 id="非监督离散化-unSupervised-Discretization"><a href="#非监督离散化-unSupervised-Discretization" class="headerlink" title="非监督离散化 unSupervised Discretization"></a>非监督离散化 unSupervised Discretization</h5><p>聚类?</p>
<h5 id="监督离散化-Supervised-Discretization"><a href="#监督离散化-Supervised-Discretization" class="headerlink" title="监督离散化 Supervised Discretization"></a>监督离散化 Supervised Discretization</h5><p>基于统计学的方法用每个属性值来分区间,并通过过类似于根据统计检验得出的相邻区间来创建较大的区间.</p>
<p>基于熵的方法是最有前途的离散化方法之一.<br><a href="http://www.harumonia.top/image/NHsI"><img src="http://www.harumonia.top/images/2019/08/17/imageb9a8cc3bce2b2a12.md.png" alt="imageb9a8cc3bce2b2a12.md.png" loading="lazy"></a></p>
<p><a href="http://www.harumonia.top/image/NfMY"><img src="http://www.harumonia.top/images/2019/08/17/image418cf8e9aaebd1f7.md.png" alt="image418cf8e9aaebd1f7.md.png" loading="lazy"></a></p>
<h4 id="具有过多值的分类属性"><a href="#具有过多值的分类属性" class="headerlink" title="具有过多值的分类属性"></a>具有过多值的分类属性</h4><h3 id="变量变换-Variable-Tlansformation"><a href="#变量变换-Variable-Tlansformation" class="headerlink" title="变量变换 Variable Tlansformation"></a>变量变换 Variable Tlansformation</h3><p>指用于变量的所有值的变换</p>
<p>简单函数变换和规范化</p>
<h4 id="简单函数-Simple-Functions"><a href="#简单函数-Simple-Functions" class="headerlink" title="简单函数 Simple Functions"></a>简单函数 Simple Functions</h4><blockquote>
<p>A variable transformation refers to a transformation that is applied to all thevaluesofavariable.</p>
</blockquote>
<p>在统计学中,变量变换常用来将不具有高斯分布的数据变换成具有高斯分布的数据.<br>在数据挖掘中,可以用来压缩值域</p>
<h4 id="规范化和标准化-Normalization-or-Standardization"><a href="#规范化和标准化-Normalization-or-Standardization" class="headerlink" title="规范化和标准化 Normalization or Standardization"></a>规范化和标准化 Normalization or Standardization</h4><p>使整个值得集合具有特定的性质</p>
<h2 id="相似性和相异性的度量-Measures-of-Similarity-and-Dissimilarity"><a href="#相似性和相异性的度量-Measures-of-Similarity-and-Dissimilarity" class="headerlink" title="相似性和相异性的度量 Measures of Similarity and Dissimilarity"></a>相似性和相异性的度量 Measures of Similarity and Dissimilarity</h2><p>许多情况下,一旦计算出相似性或相异性就不再需要原始数据了.</p>
<p>使用属于 <strong>邻近度 proximity</strong> 来表示相似性或相异性</p>
<h3 id="基础-Basics"><a href="#基础-Basics" class="headerlink" title="基础 Basics"></a>基础 Basics</h3><h4 id="定义-Definitions"><a href="#定义-Definitions" class="headerlink" title="定义 Definitions"></a>定义 Definitions</h4><blockquote>
<p>the similarity between two objects is a numerical measure of the degreeto which the two objects are alike.</p>
</blockquote>
<blockquote>
<p>The dissimilarity betweentwo objects is a numerical measureof the de- gree to which the two objects are different.</p>
</blockquote>
<p>通常术语”距离”用作相异度的同义词.<br>有时相异度在[0,1]中取值,但是相异度在 0 和 ♾ 之间取值也很常见.</p>
<h4 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h4><p>通常使用变换将相似度从相异转为相反.</p>
<h4 id="简单属性之间的相似度和相异度"><a href="#简单属性之间的相似度和相异度" class="headerlink" title="简单属性之间的相似度和相异度"></a>简单属性之间的相似度和相异度</h4><p><a href="http://www.harumonia.top/image/NlDw"><img src="http://www.harumonia.top/images/2019/08/17/imagee59e593bbcfd3120.md.png" alt="imagee59e593bbcfd3120.md.png" loading="lazy"></a></p>
<h4 id="数据对象之间的相异度-Dissimilarities-between-Data-Objects"><a href="#数据对象之间的相异度-Dissimilarities-between-Data-Objects" class="headerlink" title="数据对象之间的相异度 Dissimilarities between Data Objects"></a>数据对象之间的相异度 Dissimilarities between Data Objects</h4><ul>
<li>距离<br><strong>欧几里得距离</strong> Euclidean distance<br><a href="http://www.harumonia.top/image/NrLi"><img src="http://www.harumonia.top/images/2019/08/17/image09c78ec0185a1ef1.png" alt="image09c78ec0185a1ef1.png" loading="lazy"></a><br>其中,n 是维数,而 <strong>x</strong> k 和 <strong>y</strong> k 分别是 x 和 y 的第 k 个属性值(分量)</li>
</ul>
<p><strong>闵可夫斯基距离</strong> Minkowski distance<br><a href="http://www.harumonia.top/image/NzaH"><img src="http://www.harumonia.top/images/2019/08/17/image4bfd8ac1d8b3156f.png" alt="image4bfd8ac1d8b3156f.png" loading="lazy"></a></p>
<ul>
<li>r=1,城市街区(也称曼哈顿,出租车,L1 范数)距离</li>
<li>r=2,欧几里得距离</li>
<li>r=♾,上确界距离</li>
</ul>
<p>度量与非度量</p>
<h4 id="数据对象之间的相似度-Similarities-between-Data-Objects"><a href="#数据对象之间的相似度-Similarities-between-Data-Objects" class="headerlink" title="数据对象之间的相似度 Similarities between Data Objects"></a>数据对象之间的相似度 Similarities between Data Objects</h4><h4 id="邻近性度量的例子-Examples-of-Proximity-Measures"><a href="#邻近性度量的例子-Examples-of-Proximity-Measures" class="headerlink" title="邻近性度量的例子 Examples of Proximity Measures"></a>邻近性度量的例子 Examples of Proximity Measures</h4><h5 id="二元数据的相似性度量"><a href="#二元数据的相似性度量" class="headerlink" title="二元数据的相似性度量"></a>二元数据的相似性度量</h5><ul>
<li>简单匹配系数 simple matching coefficient (SMC)<br><a href="http://www.harumonia.top/image/N2RF"><img src="http://www.harumonia.top/images/2019/08/17/imagec78fb1c028be231c.png" alt="imagec78fb1c028be231c.png" loading="lazy"></a></li>
</ul>
<p>SMC 可以在一个仅包含是非题的测验中来发现回答问题相似的学生</p>
<ul>
<li>Jaccard 系数 Jaccard Coefficient<br><a href="http://www.harumonia.top/image/N4tT"><img src="http://www.harumonia.top/images/2019/08/17/image709b0bba0e810a01.png" alt="image709b0bba0e810a01.png" loading="lazy"></a><br>常常用来处理非对称的二元属性对象</li>
</ul>
<h5 id="余弦相似度-Cosine-Similarity"><a href="#余弦相似度-Cosine-Similarity" class="headerlink" title="余弦相似度 Cosine Similarity"></a>余弦相似度 Cosine Similarity</h5><p>常用来度量文档相似度<br><img src="http://www.harumonia.top/images/2019/08/17/imagee4c8afe3e4e60ecf.png" alt="imagee4c8afe3e4e60ecf.png" loading="lazy"><br><a href="http://www.harumonia.top/image/NGnU"><img src="http://www.harumonia.top/images/2019/08/17/image950d41dec2581905.png" alt="image950d41dec2581905.png" loading="lazy"></a></p>
<h5 id="广义-Jaccard-系数-Extended-Jaccard-Coefficient-Tanimoto-Coefficient"><a href="#广义-Jaccard-系数-Extended-Jaccard-Coefficient-Tanimoto-Coefficient" class="headerlink" title="广义 Jaccard 系数 Extended Jaccard Coefficient (Tanimoto Coefficient)"></a>广义 Jaccard 系数 Extended Jaccard Coefficient (Tanimoto Coefficient)</h5><p><a href="http://www.harumonia.top/image/Nacx"><img src="http://www.harumonia.top/images/2019/08/17/image8002f990119f2a64.png" alt="image8002f990119f2a64.png" loading="lazy"></a></p>
<h5 id="相关性-Correlation"><a href="#相关性-Correlation" class="headerlink" title="相关性 Correlation"></a>相关性 Correlation</h5><p>皮尔森相关 Pearson’s correlation<br>判定是否存在线性关系</p>
<p><a href="http://www.harumonia.top/image/NhsL"><img src="http://www.harumonia.top/images/2019/08/17/imagefa2b122d3c3982db.png" alt="imagefa2b122d3c3982db.png" loading="lazy"></a></p>
<p>Bregman 散度<br>Bregman 散度是损失或失真函数.损失函数的目的是度量用 x 近似 y 导致的失真或损失.<br>x 和 y 越类似,失真或损失就越小,因而 Bregman 散度可以用作相异性函数</p>
<h4 id="邻近度计算问题"><a href="#邻近度计算问题" class="headerlink" title="邻近度计算问题"></a>邻近度计算问题</h4><ol>
<li>当属性具有不同的尺度(scale)或相关时如何处理</li>
<li>当对象包含不同类型的属性(例如,定量属性和定性属性)是如何计算对象之间的邻近度</li>
<li>当属性具有不同的权重(即并非所有的属性都对对象的邻近度具有相等的贡献)时,如何处理邻近度计算</li>
</ol>
<h5 id="距离度量的标准化和相关性"><a href="#距离度量的标准化和相关性" class="headerlink" title="距离度量的标准化和相关性"></a>距离度量的标准化和相关性</h5><h1 id="wander-season"><a href="#wander-season" class="headerlink" title="wander season"></a>wander season</h1><h2 id="kaggle"><a href="#kaggle" class="headerlink" title="kaggle"></a>kaggle</h2><ul>
<li>The number of columns in the DataFrame is not equal to the number of features. One of the columns - ‘party’ is the target variable.</li>
</ul>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Data Mining</category>
      </categories>
  </entry>
  <entry>
    <title>数据分析拾遗(不定期补充)</title>
    <url>/2019-08-23-DA-intro-1/</url>
    <content><![CDATA[<p>记录在实际操作过程中遇到遇到的一些有意思的使用法.</p>
<a id="more"></a>

<h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><h2 id="Serise"><a href="#Serise" class="headerlink" title="Serise"></a>Serise</h2><h3 id="获取最小值的-index"><a href="#获取最小值的-index" class="headerlink" title="获取最小值的 index"></a>获取最小值的 index</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">Serise<span class="token punctuation">.</span>idxmin<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><h3 id="csv-读取扩充"><a href="#csv-读取扩充" class="headerlink" title="csv 读取扩充"></a>csv 读取扩充</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读取unix log</span>
popcon <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../data/popularity-contest'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token punctuation">)</span>
<span class="token comment"># 下载网站数据读取</span>
weather_mar2012 <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>url<span class="token punctuation">,</span> skiprows<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> index_col<span class="token operator">=</span><span class="token string">'Date/Time'</span><span class="token punctuation">,</span> parse_dates<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'latin1'</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="自定义-dataframe-的显示"><a href="#自定义-dataframe-的显示" class="headerlink" title="自定义 dataframe 的显示"></a>自定义 dataframe 的显示</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Make the graphs a bit prettier, and bigger</span>
pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.mpl_style'</span><span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">)</span>

<span class="token comment"># This is necessary to show lots of columns in pandas 0.12.</span>
<span class="token comment"># Not necessary in pandas 0.13.</span>
pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.width'</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>
pd<span class="token punctuation">.</span>set_option<span class="token punctuation">(</span><span class="token string">'display.max_columns'</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="对不标准数据集的读取"><a href="#对不标准数据集的读取" class="headerlink" title="对不标准数据集的读取"></a>对不标准数据集的读取</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">raw_dataset <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>dataset_path<span class="token punctuation">,</span> names<span class="token operator">=</span>column_names<span class="token punctuation">,</span>na_values <span class="token operator">=</span> <span class="token string">"?"</span><span class="token punctuation">,</span> comment<span class="token operator">=</span><span class="token string">'\t'</span><span class="token punctuation">,</span>sep<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">,</span> skipinitialspace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="pop-函数的返回值"><a href="#pop-函数的返回值" class="headerlink" title="pop 函数的返回值"></a>pop 函数的返回值</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_labels <span class="token operator">=</span> train_dataset<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'MPG'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="对-dataframe-手动拆分为训练集和测试集"><a href="#对-dataframe-手动拆分为训练集和测试集" class="headerlink" title="对 dataframe 手动拆分为训练集和测试集"></a>对 dataframe 手动拆分为训练集和测试集</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">train_dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>frac<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
test_dataset <span class="token operator">=</span> dataset<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>train_dataset<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="频次统计"><a href="#频次统计" class="headerlink" title="频次统计"></a>频次统计</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">complaints<span class="token punctuation">[</span><span class="token string">'Complaint Type'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="对日期进行聚类"><a href="#对日期进行聚类" class="headerlink" title="对日期进行聚类"></a>对日期进行聚类</h3><h4 id="纵向聚类"><a href="#纵向聚类" class="headerlink" title="纵向聚类"></a>纵向聚类</h4><p>问题简述:对一年中的 <strong>每个星期一\星期二...</strong> 进行聚类,如此,一年划分为 7 类</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">berri_bikes<span class="token punctuation">.</span>index<span class="token punctuation">.</span>weekday
<span class="token comment"># 注:当index为日期时,day\weekday\month\year</span>
<span class="token comment"># 使用非index无法进行该操作 AttributeError: 'Series' object has no attribute 'year'</span>

berri_bikes<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'weekday'</span><span class="token punctuation">]</span> <span class="token operator">=</span> berri_bikes<span class="token punctuation">.</span>index<span class="token punctuation">.</span>weekday

weekday_counts <span class="token operator">=</span> berri_bikes<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'weekday'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="横向聚类"><a href="#横向聚类" class="headerlink" title="横向聚类"></a>横向聚类</h4><p>问题简述:对一年中的每个星期进行聚类,如此,一年划分的类的数目为该年的星期数</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">bikes<span class="token punctuation">.</span>resample<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>该方法不限于 index 为日期</strong></p>
<h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><p>问题简述: 对 Weather 进行筛选,摘出包含 Snow 的行</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">weather_description <span class="token operator">=</span> weather_2012<span class="token punctuation">[</span><span class="token string">'Weather'</span><span class="token punctuation">]</span>
is_snowing <span class="token operator">=</span> weather_description<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'Snow'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在读取数据时进行清洗过滤</span>
<span class="token comment"># 清洗na数据,更改Incident Zip列的类型</span>
na_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'NO CLUE'</span><span class="token punctuation">,</span> <span class="token string">'N/A'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">]</span>
requests <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'../data/311-service-requests.csv'</span><span class="token punctuation">,</span> na_values<span class="token operator">=</span>na_values<span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Incident Zip'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h1><h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># seaborn</span>
<span class="token comment"># 将Dataframe中的指定列(复数级)两两绘制图像</span>
sns<span class="token punctuation">.</span>pairplot<span class="token punctuation">(</span>train_dataset<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"MPG"</span><span class="token punctuation">,</span> <span class="token string">"Cylinders"</span><span class="token punctuation">,</span> <span class="token string">"Displacement"</span><span class="token punctuation">,</span> <span class="token string">"Weight"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> diag_kind<span class="token operator">=</span><span class="token string">"kde"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><strong>Trends</strong> - A trend is defined as a pattern of change.<br>sns.lineplot - Line charts are best to show trends over a period of time, and multiple lines can be used to show trends in more than one group.</li>
<li><strong>Relationship</strong> - There are many different chart types that you can use to understand relationships between variables in your data.<br><em>sns.barplot</em> - Bar charts are useful for comparing quantities corresponding to different groups.<br><em>sns.heatmap</em> - Heatmaps can be used to find color-coded patterns in tables of numbers.<br><em>sns.scatterplot</em> - Scatter plots show the relationship between two continuous variables; if color-coded, we can also show the relationship with a third categorical variable.<br><em>sns.regplot</em> - Including a regression line in the scatter plot makes it easier to see any linear relationship between two variables.<br><em>sns.lmplot</em> - This command is useful for drawing multiple regression lines, if the scatter plot contains multiple, color-coded groups.<br><em>sns.swarmplot</em> - Categorical scatter plots show the relationship between a continuous variable and a categorical variable.</li>
<li><strong>Distribution</strong> - We visualize distributions to show the possible values that we can expect to see in a variable, along with how likely they are.<br><em>sns.distplot</em> - Histograms show the distribution of a single numerical variable.<br><em>sns.kdeplot</em> - KDE plots (or 2D KDE plots) show an estimated, smooth distribution of a single numerical variable (or two numerical variables).<br><em>sns.jointplot</em> - This command is useful for simultaneously displaying a 2D KDE plot with the corresponding KDE plots for each individual variable.</li>
</ul>
<h2 id="seaborn"><a href="#seaborn" class="headerlink" title="seaborn"></a>seaborn</h2><h3 id="X-轴日期合并"><a href="#X-轴日期合并" class="headerlink" title="X 轴日期合并"></a>X 轴日期合并</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>由于 x 轴上的日期太过密集(年-月),所以显示很不好看<br><img src="evernotecid://633A359B-908B-4B09-BD14-4B8DC1F44EF5/appyinxiangcom/18822571/ENResource/p255" alt="a54db97987cc85a6a735eaf5772e969d.png" loading="lazy"></p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>将日期再分类,以年为单位</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime

plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
date_ticks <span class="token operator">=</span> museum_data<span class="token punctuation">.</span>index <span class="token comment">#x轴坐标列表</span>

g <span class="token operator">=</span> sns<span class="token punctuation">.</span>lineplot<span class="token punctuation">(</span>data<span class="token operator">=</span>museum_data<span class="token punctuation">)</span>
g<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span>date_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 核心代码</span>
<span class="token comment"># g.set_xticklabels(labels = [foo.year for foo in [datetime.strptime(text, '%Y-%m-%d') for text in date_ticks[::12]]])   # 对于不标准的时间格式，先进行格式化</span>
g<span class="token punctuation">.</span>set_xticklabels<span class="token punctuation">(</span>labels <span class="token operator">=</span> <span class="token punctuation">[</span>foo<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> foo <span class="token keyword">in</span> date_ticks<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># 对于标准的时间格式，直接使用分割</span>
<span class="token comment"># 注：直接分割的效率远远高于格式化</span>

g<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Date'</span><span class="token punctuation">)</span>
<span class="token comment"># Add title</span>
plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"Monthly Visitors to Los Angeles City Museums"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="evernotecid://633A359B-908B-4B09-BD14-4B8DC1F44EF5/appyinxiangcom/18822571/ENResource/p256" alt="d87feeba601ddcacb482cb2c62f206b6.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Data Mining</category>
      </categories>
  </entry>
  <entry>
    <title>Be a better pythonista(3)</title>
    <url>/2019-08-28-Be_a_better_pythonista-3/</url>
    <content><![CDATA[<p>本节主要是函数和类的一些技巧操作.</p>
<p>当然,函数和类二者任意一个拿出来都是很巨量的篇幅,所以这里就只是选取了在项目中经常用到的一些技巧,并根据个人的实战经验来进行详细的阐述.</p>
<p>后续可能会进行增改(如果还记得的话</p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="可接受任意数量参数的函数"><a href="#可接受任意数量参数的函数" class="headerlink" title="可接受任意数量参数的函数"></a>可接受任意数量参数的函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">anyargs</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token comment"># A tuple</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span> <span class="token comment"># A dict</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>一个*参数只能出现在函数定义中最后一个位置参数后面，而 **参数只能出现在最后一个参数。 有一点要注意的是，在 *参数后面仍然可以定义其他参数。</strong></p>
<h2 id="只接受关键字参数的函数"><a href="#只接受关键字参数的函数" class="headerlink" title="只接受关键字参数的函数"></a>只接受关键字参数的函数</h2><p>将强制关键字参数放到某个*参数或者单个*后面就能达到这种效果。</p>
<p>**很多情况下，使用强制关键字参数会比使用位置参数表意更加清晰，程序也更加具有可读性。 **</p>
<h2 id="给函数参数增加元信息"><a href="#给函数参数增加元信息" class="headerlink" title="给函数参数增加元信息"></a>给函数参数增加元信息</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注解不会改变 python 的语义</p>
<p>ps.在很多的开发环境中,都有自己的添加注解的方法,这种方法往往有着更高的可读性.<br>如 pycharm 的 <em>‘’’+enter</em> 快捷键.</p>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>lambda 函数广泛地存在于许多的语言之中,个人认为最经典的是 C++中的 lambda 函数,有 C++ lambda 基础的可以直接对照本文章看;如果对匿名函数不了解的,建议阅读 <em>python cookbook</em> 原文,同时,参照其他的的资料.</p>
<h3 id="定义匿名函数"><a href="#定义匿名函数" class="headerlink" title="定义匿名函数"></a>定义匿名函数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> add <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y
<span class="token operator">>></span><span class="token operator">></span> add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">5</span>
<span class="token operator">>></span><span class="token operator">></span> add<span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span>
<span class="token string">'helloworld'</span>

<span class="token comment"># 效果等同于</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>尽管 lambda 表达式允许你定义简单函数，但是它的使用是有限制的。 你只能指定单个表达式，它的值就是最后的返回值。也就是说不能包含其他的语言特性了， 包括多个语句、条件表达式、迭代以及异常处理等等。</strong></p>
<h3 id="匿名函数捕获变量值"><a href="#匿名函数捕获变量值" class="headerlink" title="匿名函数捕获变量值"></a>匿名函数捕获变量值</h3><p><strong>lambda 表达式中的 x 是一个自由变量， 在运行时绑定值，而不是定义时就绑定，这跟函数的默认值参数定义是不同的</strong></p>
<p>如果你想让某个匿名函数在定义时就捕获到值，可以将那个参数值定义成默认参数即可</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">10</span>
<span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token keyword">lambda</span> y<span class="token punctuation">,</span> x<span class="token operator">=</span>x<span class="token punctuation">:</span> x <span class="token operator">+</span> y
<span class="token operator">>></span><span class="token operator">></span> x <span class="token operator">=</span> <span class="token number">20</span>
<span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token keyword">lambda</span> y<span class="token punctuation">,</span> x<span class="token operator">=</span>x<span class="token punctuation">:</span> x <span class="token operator">+</span> y
<span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token number">20</span>
<span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token number">30</span>

<span class="token comment"># 列表循环中的lambda</span>
<span class="token operator">>></span><span class="token operator">></span> funcs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> n<span class="token operator">=</span>n<span class="token punctuation">:</span> x<span class="token operator">+</span>n <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> f <span class="token keyword">in</span> funcs<span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token number">0</span>
<span class="token number">1</span>
<span class="token number">2</span>
<span class="token number">3</span>
<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="带额外状态信息的回调函数"><a href="#带额外状态信息的回调函数" class="headerlink" title="带额外状态信息的回调函数"></a>带额外状态信息的回调函数</h2><p>法一:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">apply_async</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Compute the result</span>
    result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>

    <span class="token comment"># Invoke the callback with the result</span>
    callback<span class="token punctuation">(</span>result<span class="token punctuation">)</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">print_result</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Got:'</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">return</span> x <span class="token operator">+</span> y
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">>></span><span class="token operator">></span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>print_result<span class="token punctuation">)</span>
Got<span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token operator">>></span><span class="token operator">></span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>print_result<span class="token punctuation">)</span>
Got<span class="token punctuation">:</span> helloworld
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注:apply*async 中的 <em>\</em>_ 是必要关键字参数指定.</p>
<p>法二:作为类的替代，可以使用一个闭包捕获状态值</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sequence <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">def</span> <span class="token function">handler</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">nonlocal</span> sequence
        sequence <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[&#123;&#125;] Got: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> handler

<span class="token operator">>></span><span class="token operator">></span> handler <span class="token operator">=</span> make_handler<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>handler<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> Got<span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token operator">>></span><span class="token operator">></span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>handler<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Got<span class="token punctuation">:</span> helloworld
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>法三:协程</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    sequence <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> <span class="token keyword">yield</span>
        sequence <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[&#123;&#125;] Got: &#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>sequence<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 对于协程，你需要使用它的 send() 方法作为回调函数</span>

<span class="token operator">>></span><span class="token operator">></span> handler <span class="token operator">=</span> make_handler<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">next</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token comment"># Advance to the yield</span>
<span class="token operator">>></span><span class="token operator">></span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>handler<span class="token punctuation">.</span>send<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> Got<span class="token punctuation">:</span> <span class="token number">5</span>
<span class="token operator">>></span><span class="token operator">></span> apply_async<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token operator">=</span>handler<span class="token punctuation">.</span>send<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> Got<span class="token punctuation">:</span> helloworld
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>基于回调函数的软件通常都有可能变得非常复杂。一部分原因是回调函数通常会跟请求执行代码断开。 因此，请求执行和处理结果之间的执行环境实际上已经丢失了。如果你想让回调函数连续执行多步操作， 那你就必须去解决如何保存和恢复相关的状态信息了。</p>
<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><p>首先,要了解类的几个常用的内置方法</p>
<pre><code>__init__()
__str__()
__repr__()
__enter__() *
__exit__() *</code></pre>
<h2 id="chaos-season"><a href="#chaos-season" class="headerlink" title="chaos season"></a>chaos season</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'Pair(&#123;0.x!r&#125;, &#123;0.y!r&#125;)'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span>
<span class="token comment"># 这里的 0 就是 self,等价于下面的代码</span>
<span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'Pair(%r, %r)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="自定义字符串格式化"><a href="#自定义字符串格式化" class="headerlink" title="自定义字符串格式化"></a>自定义字符串格式化</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">_formats <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'ymd'</span> <span class="token punctuation">:</span> <span class="token string">'&#123;d.year&#125;-&#123;d.month&#125;-&#123;d.day&#125;'</span><span class="token punctuation">,</span>
    <span class="token string">'mdy'</span> <span class="token punctuation">:</span> <span class="token string">'&#123;d.month&#125;/&#123;d.day&#125;/&#123;d.year&#125;'</span><span class="token punctuation">,</span>
    <span class="token string">'dmy'</span> <span class="token punctuation">:</span> <span class="token string">'&#123;d.day&#125;/&#123;d.month&#125;/&#123;d.year&#125;'</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Date</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>year <span class="token operator">=</span> year
        self<span class="token punctuation">.</span>month <span class="token operator">=</span> month
        self<span class="token punctuation">.</span>day <span class="token operator">=</span> day

    <span class="token keyword">def</span> <span class="token function">__format__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> code <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
            code <span class="token operator">=</span> <span class="token string">'ymd'</span>
        fmt <span class="token operator">=</span> _formats<span class="token punctuation">[</span>code<span class="token punctuation">]</span>
        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token operator">=</span>self<span class="token punctuation">)</span>

<span class="token comment"># 使用</span>
<span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> Date<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token string">'2012-12-21'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token string">'mdy'</span><span class="token punctuation">)</span>
<span class="token string">'12/21/2012'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'The date is &#123;:ymd&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token string">'The date is 2012-12-21'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'The date is &#123;:mdy&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token string">'The date is 12/21/2012'</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>__format__() 方法给 Python 的字符串格式化功能提供了一个钩子。 这里需要着重强调的是格式化代码的解析工作完全由类自己决定。因此，格式化代码可以是任何值。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">from</span> datetime <span class="token keyword">import</span> date
<span class="token operator">>></span><span class="token operator">></span> d <span class="token operator">=</span> date<span class="token punctuation">(</span><span class="token number">2012</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token string">'2012-12-21'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token string">'%A, %B %d, %Y'</span><span class="token punctuation">)</span>
<span class="token string">'Friday, December 21, 2012'</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token string">'The end is &#123;:%d %b %Y&#125;. Goodbye'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>
<span class="token string">'The end is 21 Dec 2012. Goodbye'</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="在类中封装属性名"><a href="#在类中封装属性名" class="headerlink" title="在类中封装属性名"></a>在类中封装属性名</h2><p>Python 程序员不去依赖语言特性去封装数据，而是通过遵循一定的属性和方法命名规约来达到这个效果。 第一个约定是任何以单下划线_开头的名字都应该是内部实现。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>_internal <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># An internal attribute</span>
        self<span class="token punctuation">.</span>public <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment"># A public attribute</span>

    <span class="token keyword">def</span> <span class="token function">public_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">'''
        A public method
        '''</span>
        <span class="token keyword">pass</span>

    <span class="token keyword">def</span> <span class="token function">_internal_method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>使用双下划线开始会导致访问名称变成其他形式。这在继承的时候会被重命名.</p>
</blockquote>
<p><strong>大多数而言，你应该让你的非公共名称以单下划线开头。但是，如果你清楚你的代码会涉及到子类， 并且有些内部属性应该在子类中隐藏起来，那么才考虑使用双下划线方案。</strong></p>
<p>还有一点要注意的是，有时候你定义的一个变量和某个保留关键字冲突，这时候可以使用单下划线作为后缀. <del>这里我们并不使用单下划线前缀的原因是它避免误解它的使用初衷 (如使用单下划线前缀的目的是为了防止命名冲突而不是指明这个属性是私有的)。</del></p>
<h2 id="创建可管理的属性"><a href="#创建可管理的属性" class="headerlink" title="创建可管理的属性"></a>创建可管理的属性</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>你想给某个实例 attribute 增加除访问与修改之外的其他处理逻辑，比如类型检查或合法性验证。</p>
<p>比如验证赋值是否正确</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>自定义某个属性的一种简单方法是将它定义为一个 property。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first_name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>first_name <span class="token operator">=</span> first_name

    <span class="token comment"># Getter function</span>
    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">first_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_first_name

    <span class="token comment"># Setter function</span>
    <span class="token decorator annotation punctuation">@first_name<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">first_name</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'Expected a string'</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>_first_name <span class="token operator">=</span> value

    <span class="token comment"># Deleter function (optional)</span>
    <span class="token decorator annotation punctuation">@first_name<span class="token punctuation">.</span>deleter</span>
    <span class="token keyword">def</span> <span class="token function">first_name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> AttributeError<span class="token punctuation">(</span><span class="token string">"Can't delete attribute"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Properties 还是一种定义动态计算 attribute 的方法。 这种类型的 attributes 并不会被实际的存储，而是在需要的时候计算出来。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> math
<span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> radius

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> self<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">diameter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>radius <span class="token operator">*</span> <span class="token number">2</span>

    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">perimeter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> self<span class="token punctuation">.</span>radius<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这里，我们通过使用 properties，将所有的访问接口形式统一起来， 对半径、直径、周长和面积的访问都是通过属性访问，就跟访问简单的 attribute 是一样的。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> c <span class="token operator">=</span> Circle<span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>radius
<span class="token number">4.0</span>
<span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>area  <span class="token comment"># Notice lack of ()</span>
<span class="token number">50.26548245743669</span>
<span class="token operator">>></span><span class="token operator">></span> c<span class="token punctuation">.</span>perimeter  <span class="token comment"># Notice lack of ()</span>
<span class="token number">25.132741228718345</span>
<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用延迟计算属性"><a href="#使用延迟计算属性" class="headerlink" title="使用延迟计算属性"></a>使用延迟计算属性</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 定义一个延迟属性的一种高效方法是通过使用一个描述器类</span>
<span class="token keyword">class</span> <span class="token class-name">lazyproperty</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func

    <span class="token keyword">def</span> <span class="token function">__get__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> instance <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            value <span class="token operator">=</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
            <span class="token builtin">setattr</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> self<span class="token punctuation">.</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
            <span class="token keyword">return</span> value

<span class="token comment"># 使用</span>
<span class="token keyword">import</span> math

<span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>radius <span class="token operator">=</span> radius

    <span class="token decorator annotation punctuation">@lazyproperty</span>
    <span class="token keyword">def</span> <span class="token function">area</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Computing area'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> self<span class="token punctuation">.</span>radius <span class="token operator">**</span> <span class="token number">2</span>

    <span class="token decorator annotation punctuation">@lazyproperty</span>
    <span class="token keyword">def</span> <span class="token function">perimeter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Computing perimeter'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">2</span> <span class="token operator">*</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> self<span class="token punctuation">.</span>radius<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>很多时候，构造一个延迟计算属性的主要目的是为了提升性能。 例如，你可以避免计算这些属性值，除非你真的需要它们。</p>
<p>本质上是在实例上添加了 __name__ 属性</p>
<blockquote>
<p>一个很简单的测试方法是,此时再讲半径改为 10,但是面积是不变的</p>
</blockquote>
<h2 id="定义抽象基类"><a href="#定义抽象基类" class="headerlink" title="定义抽象基类"></a>定义抽象基类</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> abc <span class="token keyword">import</span> ABCMeta<span class="token punctuation">,</span> abstractmethod

<span class="token keyword">class</span> <span class="token class-name">IStream</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">read</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> maxbytes<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span>

    <span class="token decorator annotation punctuation">@abstractmethod</span>
    <span class="token keyword">def</span> <span class="token function">write</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>可以使用预定义的抽象类来执行更通用的类型检查</strong></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> collections

<span class="token comment"># Check if x is a sequence</span>
<span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> collections<span class="token punctuation">.</span>Sequence<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment"># Check if x is iterable</span>
<span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> collections<span class="token punctuation">.</span>Iterable<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment"># Check if x has a size</span>
<span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> collections<span class="token punctuation">.</span>Sized<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token comment"># Check if x is a mapping</span>
<span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> collections<span class="token punctuation">.</span>Mapping<span class="token punctuation">)</span><span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pythonista</tag>
      </tags>
  </entry>
  <entry>
    <title>使用随机森林解决&quot;泰坦尼克幸存&quot;问题(1)——小试牛刀</title>
    <url>/2019-09-01-Titanic-solution-via-RF/</url>
    <content><![CDATA[<p>The sinking of the RMS Titanic is one of the most infamous shipwrecks in history. On April 15, 1912, during her maiden voyage, the Titanic sank after colliding with an iceberg, killing 1502 out of 2224 passengers and crew. This sensational tragedy shocked the international community and led to better safety regulations for ships.</p>
<p>One of the reasons that the shipwreck led to such loss of life was that there were not enough lifeboats for the passengers and crew. Although there was some element of luck involved in surviving the sinking, some groups of people were more likely to survive than others, such as women, children, and the upper-class.</p>
<a id="more"></a>

<h2 id="渣翻译"><a href="#渣翻译" class="headerlink" title="渣翻译"></a>渣翻译</h2><p>RMS 泰坦尼克号沉没是历史上最惨重的海难之一。 1912 年 4 月 15 日，在它的第一次航行中，泰坦尼克号与冰山相撞后沉没，2224 名乘客和机组人员中有 1502 人死亡。这场耸人听闻的悲剧震惊了国际社会，同时,也促进了更好的船只安全规定的制定。</p>
<p>造成海难失事的原因之一是乘客和机组人员没有足够的救生艇。尽管幸存有一些运气因素，但有些人比其他人更容易生存，例如妇女，儿童和上流社会。</p>
<h1 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h1><p>先进行数据集的处理,然后进行分类学习.</p>
<h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><p>泰坦尼克问题是 <em>类实际问题</em> ,与 sklearn 中的 dataset 的数据不同,存在缺失值等干扰项,所以第一步是要对数据集进行预处理.</p>
<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p>存在以下的 12 个属性,其中,Survived 是 <strong>结果</strong>.</p>
<pre><code>PassengerId -  Unique ID of the passenger
Survived -  Survived (1) or died (0)
Pclass -  Passenger&#39;s class (1st, 2nd, or 3rd)
Name -  Passenger&#39;s name
Sex - Passenger&#39;s sex
Age -  Passenger&#39;s age
SibSp -  Number of siblings/spouses aboard the Titanic
Parch -  Number of parents/children aboard the Titanic
Ticket -  Ticket number
FareFare -  paid for ticket
Cabin - Cabin number
Embarked -  Where the passenger got on the ship (C - Cherbourg, S - Southampton, Q = Queenstown)</code></pre>
<h2 id="处理思路"><a href="#处理思路" class="headerlink" title="处理思路"></a>处理思路</h2><p>在了解了属性的具体含义之后就可以进行数据集的处理了.</p>
<p>这里先列一下最终的目标:</p>
<ul>
<li>数值化,随机森林不支持非数值的数据</li>
<li>消除残缺值</li>
</ul>
<h3 id="数值化"><a href="#数值化" class="headerlink" title="数值化"></a>数值化</h3><p>输出 <em>Dataframe.info()</em></p>
<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
RangeIndex: 891 entries, 0 to 890
Data columns (total 12 columns):
PassengerId    891 non-null int64
Survived       891 non-null int64
Pclass         891 non-null int64
Name           891 non-null object
Sex            891 non-null object
Age            714 non-null float64
SibSp          891 non-null int64
Parch          891 non-null int64
Ticket         891 non-null object
Fare           891 non-null float64
Cabin          204 non-null object
Embarked       889 non-null object
dtypes: float64(2), int64(5), object(5)
memory usage: 83.6+ KB</code></pre>
<p>可以看出,要处理的是 <em>name</em> \ <em>Sex</em> \ <em>Ticket</em> \ <em>Cabin</em> \ <em>Embarked</em> 这几项.</p>
<p>根据常识, <em>name</em> 对是否幸存并没有决定性影响</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">df1<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后,对 sex\Embarked 这类有限数量的数据进行数值化.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">df1<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'male'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
df1<span class="token punctuation">[</span><span class="token string">'Sex'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'female'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>

df1<span class="token punctuation">[</span><span class="token string">'Embarked'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'S'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
df1<span class="token punctuation">[</span><span class="token string">'Embarked'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
df1<span class="token punctuation">[</span><span class="token string">'Embarked'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Q'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注:由于 <em>Embarked</em> 存在残缺值,所以数据类型为 float</p>
<p>这里对 <em>Ticket</em> 的处理有点犹豫,暂缺同 <em>name</em> 进行处理</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">df1<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Ticket'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>最后,到最关键的 cabin 处理</strong><br>有两种方法</p>
<ul>
<li>直接删除,因为 cabin 的缺失值太多(这在后面的缺失值处理中会介绍,缺失率为 77%)</li>
<li>填补</li>
</ul>
<p>直接删除的好处在于方便(废话<br>填补是一项巨大的工程,并且依据方法的不同,出错的概率很高.</p>
<p>这里我选择去填补(修正残缺值).</p>
<h1 id="修正残缺值"><a href="#修正残缺值" class="headerlink" title="修正残缺值"></a>修正残缺值</h1><p>查看各属性的残缺值比例,并按照降序排列</p>
<pre><code>Cabin       0.771044
Age         0.198653
Embarked    0.002245
Fare        0.000000
Parch       0.000000
SibSp       0.000000
Sex         0.000000
Pclass      0.000000
Survived    0.000000
dtype: float64</code></pre>
<p>我准备先从残缺值比低的开始修正(又是废话….</p>
<p>目前我所掌握的两种方法:</p>
<ul>
<li>人工分析</li>
<li>随机森林填补</li>
</ul>
<h2 id="人工分析"><a href="#人工分析" class="headerlink" title="人工分析"></a>人工分析</h2><p>人工分析的好处在于准确度相对较高.<br>缺点当然就是费时.</p>
<h3 id="修正-Embarked"><a href="#修正-Embarked" class="headerlink" title="修正 Embarked"></a>修正 Embarked</h3><p>先列出残缺值的具体行,得到数据</p>
<table>
<thead>
<tr>
<th>PassengerId</th>
<th>Survived</th>
<th>Pclass</th>
<th>Sex</th>
<th>Age</th>
<th>SibSp</th>
<th>Parch</th>
<th>Fare</th>
<th>Cabin</th>
<th>Embarked</th>
</tr>
</thead>
<tbody><tr>
<td>62</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>38.0</td>
<td>0</td>
<td>0</td>
<td>80.0</td>
<td>B28</td>
<td>NaN</td>
</tr>
<tr>
<td>830</td>
<td>1</td>
<td>1</td>
<td>0</td>
<td>62.0</td>
<td>0</td>
<td>0</td>
<td>80.0</td>
<td>B28</td>
<td>NaN</td>
</tr>
</tbody></table>
<p>再从数据表中摘出可能会影响该值的因素 – Pclass(阶层)\Fare(票价)</p>
<p>然后绘制箱线图,发现极大概率落在 C 域内,所以两者赋值为<br><a href="http://www.harumonia.top/image/lSbU"><img src="http://www.harumonia.top/images/2019/08/31/image.png" alt="image.png" loading="lazy"></a></p>
<p>聚类得出各个水平的 Cabin 的平均值,并划分区间</p>
<pre><code>Cabin
G     14.205000
F     18.079367
N     19.132707
T     35.500000
A     41.244314
D     53.007339
E     54.564634
C    107.926598
B    122.383078
Name: Fare, dtype: float64</code></pre>
<p>然后使用自定义的换算函数,将 Fare 依据其所在的区间换算为对应的大写字母,然后数值化.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cabin_to_num</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#&#123;'G': 0, 'C': 1, 'E': 2, 'F': 3, 'T': 4, 'D': 5, 'A': 6, 'B': 7&#125;</span>
    dic <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token builtin">zip</span><span class="token punctuation">(</span>Cabin_list<span class="token punctuation">,</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>Cabin_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> dic<span class="token punctuation">[</span>a<span class="token punctuation">]</span>

df_manutal_1<span class="token punctuation">.</span>Cabin <span class="token operator">=</span> df_manutal_1<span class="token punctuation">.</span>Cabin<span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>cabin_to_num<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后剩下的空值是年龄,但是凭借主观经验判断,年龄对是否生存具有十分重要的影响,不应该使用一些粗糙的方法(如上)去填充(人工分析的严谨性),所以暂时先删除.</p>
<p>到这里,人工分析的数据集的处理就可以告一段落了.然后进行模型的建立和评估.</p>
<p>这里由于 <em>结果不太好</em> ,就不单独列一节了.<br>使用十折交叉验证法,最后得出</p>
<table>
<thead>
<tr>
<th>训练均分</th>
<th>测试均分</th>
</tr>
</thead>
<tbody><tr>
<td>0.9909744528907043</td>
<td>0.7901017214397495</td>
</tr>
</tbody></table>
<p>(没错,过拟合了,树模型是非常容易过拟合的,出现这种情况之后就要调参,来优化模型</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 调参选择(渐进优化)</span>
param <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'min_samples_leaf'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"min_samples_split"</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'max_features'</span><span class="token punctuation">:</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'criterion'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'gini'</span><span class="token punctuation">,</span><span class="token string">'entropy'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>优化之后,test 分数变为 0.8207282913165266</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Data Mining</category>
      </categories>
      <tags>
        <tag>随机森林</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈特征工程 Feature  Engineering</title>
    <url>/2019-09-08-Feature-Engineering/</url>
    <content><![CDATA[<p>至此,看过了很多的机器学习的文章,发现大多是重于算法的讲解,但是机器学习是 <em>对数据集进行算法处理</em> ,数据集的重要地位不言而喻.<br>个人认为,优质的数据集可以极大地提高模型精度和运算效率.一个很好的例子就是 sklearn 的 dataset,处理起来顺滑无比,但是在对上一篇文章所讲的泰坦尼克数据集进行机器学习时,如果也像在鸢尾花集上那样,结果自然是惨不忍睹.<br>所以这里单开一篇讲一下特征工程.</p>
<p>参考资料:<br>kaggle-sina\Anisotropic<br>$Feature\ Engineering$<br>Tsai</p>
<p>ps.<br>基础的一些处理可以直接使用 numpy+pandas,灵活小巧.<br>不过如果涉及到一些统计方法,那么建议使用 sklearn 封装好的类.</p>
<h1 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h1><h2 id="无量纲化"><a href="#无量纲化" class="headerlink" title="无量纲化"></a>无量纲化</h2><p>在机器学习算法实践中，我们往往有着将不同规格的数据转换到同一规格，或不同分布的数据转换到某个特定分布 的需求，这种需求统称为将数据“无量纲化”。譬如梯度和矩阵为核心的算法中，譬如逻辑回归，支持向量机，神经 网络，无量纲化可以加快求解速度.</p>
<p>数据的无量纲化可以是线性的，也可以是非线性的。<br>线性的无量纲化包括中心化(Zero-centered 或者 Mean- subtraction)处理和缩放处理(Scale)。</p>
<h3 id="数据归一化"><a href="#数据归一化" class="headerlink" title="数据归一化"></a>数据归一化</h3><p>当数据(x)按照最小值中心化后，再按极差(最大值 - 最小值)缩放，数据移动了最小值个单位，并且会被收敛到[0,1]之间，而这个过程，就叫做数据归一化(Normalization，又称 Min-Max Scaling)。 <em>归一化之后的数据服从正态分布.</em></p>
<blockquote>
<p>MinMaxScaler 在不涉及距离度量、梯度、协方差计算以及数据需要被压缩到特定区间时使用广泛，比如数字图像<br>处理中量化像素强度时，都会使用 MinMaxScaler 将数据压缩于[0,1]区间之中。</p>
</blockquote>
<p>ps.使用 numpy 也可以快速实现归一化,不过在对大量数据进行处理时效率不及 sklearn</p>
<h3 id="数据标准化"><a href="#数据标准化" class="headerlink" title="数据标准化"></a>数据标准化</h3><p>当数据(x)按均值(μ)中心化后，再按标准差(σ)缩放，数据就会服从为均值为 0，方差为 1 的正态分布(即标准正态分 布)，而这个过程，就叫做数据标准化(Standardization，又称 Z-score normalization).</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>大多数机器学习算法中，会选择 StandardScaler 来进行特征缩放，因为 MinMaxScaler 对异常值非常敏<br>感。在 PCA，聚类，逻辑回归，支持向量机，神经网络这些算法中，StandardScaler 往往是最好的选择。</p>
<!-- [![image.md.png](http://www.harumonia.top/images/2019/09/08/image.md.png)](http://www.harumonia.top/image/lXOG) -->

<h2 id="缺失值-SimpleImputer"><a href="#缺失值-SimpleImputer" class="headerlink" title="缺失值 SimpleImputer"></a>缺失值 SimpleImputer</h2><p>在 <strong>使用随机森林解决”泰坦尼克幸存”问题(1)</strong> 一文中,我使用了 replace 来进行缺失值的填补,不过 sklearn 中内置了 SimpleImputer 来完成这项工作.</p>
<h2 id="编码与哑变量"><a href="#编码与哑变量" class="headerlink" title="编码与哑变量"></a>编码与哑变量</h2><p>为了让数据适应算法和库，我们必须将数据进行编码，即是说，将文字型数据转换为数值型。</p>
<h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><ul>
<li>LabelEncoder:标签专用，能够将分类转换为分类数值</li>
<li>OrdinalEncoder:特征专用，能够将分类特征转换为分类数值</li>
</ul>
<h3 id="哑变量"><a href="#哑变量" class="headerlink" title="哑变量"></a>哑变量</h3><p>把分类转换成数字的时候，忽略了数字中自带的数学性质，所以给算法传达了一些不准确的信息，而这会影响我们的建模。<br>OrdinalEncoder 可以用来处理有序变量，但对于名义变量，我们只有使用哑变量的方式来处理，才能够尽量向算法传达最准确的信息</p>
<h2 id="二值化与分段"><a href="#二值化与分段" class="headerlink" title="二值化与分段"></a>二值化与分段</h2><p>用来处理连续型特征.</p>
<h3 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h3><p>根据阈值将数据二值化(将特征值设置为 0 或 1)，用于处理连续型变量。大于阈值的值映射为 1，而小于或等于阈值的值映射为 0.</p>
<h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><p>将连续型变量划分为分类变量,也就是常说的分箱.</p>
<p><strong>注意分箱的编码方式和定义箱宽的方式</strong></p>
<h1 id="特征选择-feature-selection"><a href="#特征选择-feature-selection" class="headerlink" title="特征选择 feature_selection"></a>特征选择 feature_selection</h1><table>
<thead>
<tr>
<th>特征提取(feature extraction)</th>
<th>特征创造(feature creation)</th>
<th>特征选择(feature selection)</th>
</tr>
</thead>
<tbody><tr>
<td>从文字，图像，声音等其他非结构化数据中提取新信息作为特征。比如说，从淘宝宝贝的名称中提取出产品类别，产品颜色，是否是网红产品等等。</td>
<td>把现有特征进行组合，或互相计算，得到新的特征。比如说，我们有一列特征是速度，一列特征是距离，我们就可以通过让两列相处，创造新的特征:通过距离所花的时间。</td>
<td>从所有的特征中，选择出有意义，对模型有帮助的特征，以避免必须将所有特征都导入模型去训练的情况。</td>
</tr>
</tbody></table>
<h2 id="过滤法-Filter"><a href="#过滤法-Filter" class="headerlink" title="过滤法 Filter"></a>过滤法 Filter</h2><p>过滤方法通常用作预处理步骤，特征选择完全独立于任何机器学习算法。它是根据各种统计检验中的分数以及相关性的各项指标来选择特征。</p>
<p>过滤法的主要对象是:需要遍历特征或升维的算法们，而过滤法的主要目的是:在维持算法表现的前提下，帮助算法们降低计算成本。</p>
<h3 id="方差过滤"><a href="#方差过滤" class="headerlink" title="方差过滤"></a>方差过滤</h3><p>这是通过特征本身的方差来筛选特征的类。比如一个特征本身的方差很小，就表示样本在这个特征上基本没有差异，可能特征中的大多数值都一样，甚至整个特征的取值都相同，那这个特征对于样本区分没有什么作用。所以无论接下来的特征工程要做什么，都要优先消除方差为 0 的特征。</p>
<h3 id="相关性过滤"><a href="#相关性过滤" class="headerlink" title="相关性过滤"></a>相关性过滤</h3><p>我们希望选出与标签相关且有意义的特征，因为这样的特征能够为我们提供大量信息。如果特征与标签无关，那只会白白浪费我们的计算内存，可能还会给模型带来噪音。</p>
<h4 id="卡方过滤"><a href="#卡方过滤" class="headerlink" title="卡方过滤"></a>卡方过滤</h4><p>卡方过滤是专门针对离散型标签(即分类问题)的相关性过滤。<br>再结合 <strong>feature_selection.SelectKBest</strong> 这个可以输入”评分标准“来选出前 K 个分数最高的特征的类，我们可以借此除去最可能独立于标签，与我们分类目的无关的特征。</p>
<p>卡方检验的本质是推测两组数据之间的差异，其检验的原假设是”两组数据是相互独立的”。卡方检验返回卡方值和 P 值两个统计量，其中卡方值很难界定有效的范围，而 p 值，我们一般使用 0.01 或 0.05 作为显著性水平，即 p 值判断的边界.</p>
<h4 id="F-检验"><a href="#F-检验" class="headerlink" title="F 检验"></a>F 检验</h4><p>F 检验，又称 ANOVA，方差齐性检验，是用来捕捉每个特征与标签之间的线性关系的过滤方法。</p>
<p>F 检验的本质是寻找两组数据之间的线性关系，其原假设是”数据不存在显著的线性关系“。它返回 F 值和 p 值两个统计量。<br>和卡方过滤一样，我们希望选取 p 值小于 0.05 或 0.01 的特征，这些特征与标签时显著线性相关的，而 p 值大于 0.05 或 0.01 的特征则被我们认为是和标签没有显著线性关系的特征，应该被删除。</p>
<h4 id="互信息法"><a href="#互信息法" class="headerlink" title="互信息法"></a>互信息法</h4><p>互信息法是用来捕捉每个特征与标签之间的任意关系(包括线性和非线性关系)的过滤方法。<br>不过 互信息法比 F 检验更加强大，F 检验只能够找出线性关系，而互信息法可以找出任意关系。</p>
<h2 id="嵌入法-Embedded"><a href="#嵌入法-Embedded" class="headerlink" title="嵌入法 Embedded"></a>嵌入法 Embedded</h2><p>嵌入法是一种让算法自己决定使用哪些特征的方法，即特征选择和算法训练同时进行。在使用嵌入法时，我们先使 用某些机器学习的算法和模型进行训练，得到各个特征的权值系数，根据权值系数从大到小选择特征。</p>
<p><em>相比于过滤法，嵌入法的结果会更加精确到模型的效用本身，对于提高模型效力有更好的效果。并且，由于考虑特 征对模型的贡献，因此无关的特征(需要相关性过滤的特征)和无区分度的特征(需要方差过滤的特征)都会因为 缺乏对模型的贡献而被删除掉，可谓是过滤法的进化版。</em></p>
<p>嵌入法引入了算法来挑选特征，因此其计算速度也会和应用的算法有很大的关系。如果采用计算量很大，计算缓慢的算法，嵌入法本身也会非常耗时耗力。并且，在选择完毕之后，我们还是需要自己来评估模型。</p>
<p><strong>在算法本身很复杂的时候，过滤法的计算远远比嵌入法要 快，所以大型数据中，我们还是会优先考虑过滤法。</strong></p>
<h2 id="包装法-Wrapper"><a href="#包装法-Wrapper" class="headerlink" title="包装法 Wrapper"></a>包装法 Wrapper</h2><p>包装法也是一个特征选择和算法训练同时进行的方法，与嵌入法十分相似，它也是依赖于算法自身的选择,但不同的是，我们往往使用一个目标函数作为黑盒来帮 助我们选取特征，而不是自己输入某个评估指标或统计量的阈值。</p>
<p><strong>包装法要使用特征子集进行多次训练，因此它所需要的计算成本是最高的。</strong></p>
<p>最典型的目标函数是递归特征消除法(Recursive feature elimination, 简写为 RFE)。它是一种贪婪的优化算法， 旨在找到性能最佳的特征子集。 它反复创建模型，并在每次迭代时保留最佳特征或剔除最差特征，下一次迭代时， 它会使用上一次建模中没有被选中的特征来构建下一个模型，直到所有特征都耗尽为止。 然后，它根据自己保留或 剔除特征的顺序来对特征进行排名，最终选出一个最佳子集。包装法的效果是所有特征选择方法中最利于提升模型 表现的，它可以使用很少的特征达到很优秀的效果。除此之外，在特征数目相同时，包装法和嵌入法的效果能够匹 敌，不过它比嵌入法算得更见缓慢，所以也不适用于太大型的数据。相比之下， <strong>包装法是最能保证模型效果的特征 选择方法</strong> 。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>特征工程</tag>
      </tags>
  </entry>
  <entry>
    <title>No.34 在排序数组中查找元素的第一个和最后一个位置:二分法</title>
    <url>/2019-09-26-find-first-and-last-position-of-element-in-sorted-array/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/">No.34 在排序数组中查找元素的第一个和最后一个位置</a></p>
<p>给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。</p>
<p>你的算法时间复杂度必须是  O(log n) 级别。</p>
<p>如果数组中不存在目标值，返回  [-1, -1]。</p>
<a id="more"></a>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/663092629.png?Expires=1602302080" alt="result.jpg" loading="lazy"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>No.34 是一个典型的二分法问题，不过在二分法的基础上做出了一个延伸。</p>
<p>这里有两种选择。</p>
<p>第一种是使用二段二分法，分别求出两点，这样的算法复杂度是常数*log(N)</p>
<p>第二种，也就是我所使用的方法，是先使用二分法求出 target 所在的位置，然后再使用双指针法去锁定区间。这个方法的复杂度最差是 N+log(N)，最好可以是常数+log(N)，这一题考虑到 target 的区间以小区间为主，所以选用此方法。</p>
<p>个人认为，二分法是非常简单但是高效的一个方法，但是重点在于因为太容易了所以忽略一些细节方面的东西，比如+1，比如+1，比如+1。。。</p>
<h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">searchRange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> left<span class="token operator">=</span>mid<span class="token punctuation">,</span>right<span class="token operator">=</span>mid<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    left<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> size <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    right<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>left<span class="token punctuation">,</span>right<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                r <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>二分法</tag>
      </tags>
  </entry>
  <entry>
    <title>No.39\40\216\377 组合总和1-4</title>
    <url>/2019-09-27-summary-of-combination-1-4/</url>
    <content><![CDATA[<p>待补充</p>
<a id="more"></a>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/831551212.png?Expires=1602302116&" alt="p1" loading="lazy"></p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/892166055.png?Expires=1602302131&" alt="p2" loading="lazy"></p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/752151732.png?Expires=1602302141&" alt="p3" loading="lazy"></p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/1726500526.png?Expires=1602302152&" alt="p4" loading="lazy"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>待补充，先睡会儿</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>No.49 字母异位词分组:哈希表</title>
    <url>/2019-09-30-group-anagrams/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/group-anagrams/">No.49 字母异位词分组</a></p>
<p><strong>难度:中等</strong></p>
<p>给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。</p>
<a id="more"></a>

<p>示例:</p>
<p>输入: [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]</p>
<p>输出:<br> [<br> [“ate”,”eat”,”tea”],<br> [“nat”,”tan”],<br> [“bat”]<br> ]</p>
<p>说明：</p>
<p>所有输入均为小写字母。<br>不考虑答案输出的顺序。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/1697465325.png?Expires=1602302176&" alt="p1-res" loading="lazy"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/1451376165.png?Expires=1602302195&" alt="p1" loading="lazy"><br><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/2143093241.png?Expires=1602302202&" alt="p2" loading="lazy"></p>
<p>时间复杂度为 O(n)</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token operator">></span> ma<span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> res<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> str<span class="token operator">:</span>strs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            string tmp <span class="token operator">=</span> str<span class="token punctuation">;</span>
            <span class="token function">sort</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tmp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ma<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> m<span class="token operator">:</span>ma<span class="token punctuation">)</span>
            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>理论上这是 c++的最少代码的实现方式吧（我所能想到的）</p>
<p>极简的代价是数据结构的滥用，代码量的减少并不意味着性能的飞跃，这一点从运行的结果可以看出，时间和空间的消耗都没有达到最佳的程度。</p>
<p>其中的取舍请自行判断。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>哈希表</tag>
      </tags>
  </entry>
  <entry>
    <title>No.56 合并区间:双迭代器 &amp;&amp; 国庆快乐</title>
    <url>/2019-10-01-merge-intervals/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/merge-intervals/">No.56 合并区间</a></p>
<p><strong>难度：中等</strong></p>
<p>给出一个区间的集合，请合并所有重叠的区间。</p>
<a id="more"></a>

<pre><code>示例 1:

输入: intervals = [[1,3],[2,6],[8,10],[15,18]]
输出: [[1,6],[8,10],[15,18]]
解释: 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].

示例  2:

输入: intervals = [[1,4],[4,5]]
输出: [[1,5]]
解释: 区间 [1,4] 和 [4,5] 可被视为重叠区间。</code></pre>
<h2 id="国庆快乐"><a href="#国庆快乐" class="headerlink" title="国庆快乐~"></a>国庆快乐~</h2><p>我有什么办法，国庆节又没人一起出去玩，只能做做题目杀杀时间这个样子。(碎碎念)</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/3185598335.png?Expires=1602302257&" alt="res" loading="lazy"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>因为实在是闲的，所以就有了这个效率奇低的代码（能这么慢也是一种本事好不好）。</p>
<p>那么问题来了，凭什么他的效率能这么低呢？</p>
<p>答案是 <strong>使用了 erase()</strong></p>
<p>在看到这个题目的时候，我就有了使用双迭代器解决这个问题的构想。(双迭代器的解法堪称炫技,没有一定的基础不要轻易尝试。)<br>为什么不直接使用索引呢？因为使用索引必然会引入新的 vector 来装载。而使用双迭代器，一切都在原始的 vector 上完成，这几乎完全避免了开辟新空间所造成的消耗。<br>理论上是这样，不过在实际使用 erase 的时候，我发现似乎每一次 erase 都会造成数组的重排。这和我想象中的似乎不太一样，但是仔细一想，确实如此，这就是 <strong>数组</strong> 和 <strong>链表</strong> 的区别所在。<br>于是，引出这一题最佳的解法，链表+双迭代器解法。但是由于 LeetCode 给出的本身就是 vector，所以使用链表还是需要额外开辟空间，这岂不是与初衷背道而驰了（%&gt;_&lt;%）。</p>
<p>所以就这样咯，下面的代码看个乐呵就行了，可以作为链表法的结构模板。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> intervals<span class="token punctuation">;</span>

        <span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>intervals<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp1<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">auto</span> j <span class="token operator">=</span> intervals<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> i <span class="token operator">=</span> j<span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>intervals<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
                j<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                intervals<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> intervals<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>烟花也没看成，国庆的安排了很多，结果又是窝在工作室敲代码= =</li>
<li>唉</li>
<li>《攀登者》体验一般般，不过吴京和章子怡的感情戏看得快哭了。。。完美戳中我的痛点。。。</li>
<li>胡歌天下第一！！！</li>
</ul>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>鲨雕青年欢乐多</tag>
      </tags>
  </entry>
  <entry>
    <title>No.48 旋转图像:数学</title>
    <url>/2019-10-04-rotate-image/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/rotate-image/">No.48 旋转图像</a></p>
<p>给定一个 n × n 的二维矩阵表示一个图像。</p>
<p>将图像顺时针旋转 90 度。</p>
<a id="more"></a>

<p>说明：</p>
<p>你必须在原地旋转图像，这意味着你需要直接修改输入的二维矩阵。请不要使用另一个矩阵来旋转图像。</p>
<p>示例 1:</p>
<pre><code>给定 matrix =
[
    [1,2,3],
    [4,5,6],
    [7,8,9]
],

原地旋转输入矩阵，使其变为:
[
    [7,4,1],
    [8,5,2],
    [9,6,3]
]</code></pre>
<p>示例 2:</p>
<pre><code>给定 matrix =
[
    [ 5, 1, 9,11],
    [ 2, 4, 8,10],
    [13, 3, 6, 7],
    [15,14,12,16]
],

原地旋转输入矩阵，使其变为:
[
    [15,13, 2, 5],
    [14, 3, 4, 1],
    [12, 6, 8, 9],
    [16, 7,10,11]
]</code></pre>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/4061840715.png?Expires=1602302278&" alt="res" loading="lazy"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这一题只要找对了思路，就非常的简单。</p>
<p>一开始，我是想使用洋葱循环法来实现的，不过，C++这个语言不像 python，思路越是复杂往往就意味着代码量会呈几何倍增加。</p>
<p>所以，毫无疑问，洋葱循环是可以实现的，但是我比较懒。</p>
<p>于是想换一个思路。这一题的 tag 是数学，那么，如何从数学的角度来解决这个问题呢？</p>
<p>学过线性代数的应该还是有些印象的，矩阵旋转 90°，可以通过转置和翻转来达成相同的目的。这样一来，代码量无疑就简化了很多了。（洋葱法我大概构想了一下，会用到一个三重的 for 循环。。。）</p>
<p>这也是一个很浅显的道理，<strong>做事情不要总想着一蹴而就，换个角度，找对跳板，往往能够事半功倍</strong> 。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> len <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token function">swap</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token function">reverse</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>附上 5 月份以来的提交记录。<br>一天提交 12 次是真的疯狂啊。。。不知道这一次的刷题能够坚持多久呢？</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/3392892346.png?Expires=1602302292&" alt="p1" loading="lazy"></p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/1441194081.png?Expires=1602302327&" alt="p2" loading="lazy"></p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>周赛157</title>
    <url>/2019-10-06-week-157/</url>
    <content><![CDATA[<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/1437205549.png?Expires=1602302340&" alt="res" loading="lazy"></p>
<p>只做了三题。。。<br>前两题使用哈希表解，不过第一题应该有更简单的数学解法，不过当时时间紧迫，就没有多去考虑。<br>第三题是深搜。。。好久没写深搜了，卡了好久，不过还好最后做出来了= =</p>
<h2 id="玩筹码"><a href="#玩筹码" class="headerlink" title="玩筹码"></a>玩筹码</h2><blockquote>
<p>数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。</p>
<p>你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：</p>
<p>将第 i 个筹码向左或者右移动 2 个单位，代价为 0。<br>将第 i 个筹码向左或者右移动 1 个单位，代价为 1。<br>最开始的时候，同一位置上也可能放着两个或者更多的筹码。</p>
<p>返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">minCostToMoveChips</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> chips<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> ma<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chips<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            ma<span class="token punctuation">[</span>chips<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">int</span> qi <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ou <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>qi_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>ou_max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> m<span class="token operator">:</span>ma<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>first <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>second <span class="token operator">></span> ou_max<span class="token punctuation">)</span> ou_max <span class="token operator">=</span> m<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
                ou <span class="token operator">+=</span> m<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>second <span class="token operator">></span> qi_max<span class="token punctuation">)</span> qi_max <span class="token operator">=</span> m<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
                qi <span class="token operator">+=</span> m<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>qi<span class="token operator">-</span>qi_max <span class="token operator">></span> ou<span class="token operator">-</span>ou_max<span class="token punctuation">)</span>
                <span class="token keyword">return</span> ou<span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token keyword">return</span> qi<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>qi<span class="token punctuation">,</span>ou<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="最长定差子序列"><a href="#最长定差子序列" class="headerlink" title="最长定差子序列"></a>最长定差子序列</h2><blockquote>
<p>给你一个整数数组 arr 和一个整数 difference，请你找出 arr 中所有相邻元素之间的差等于给定 difference 的等差子序列，并返回其中最长的等差子序列的长度。</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">longestSubsequence</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> difference<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> ma<span class="token punctuation">;</span>
        <span class="token keyword">int</span> max_len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ar<span class="token operator">:</span>arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>ma<span class="token punctuation">[</span>ar<span class="token operator">-</span>difference<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                ma<span class="token punctuation">[</span>ar<span class="token punctuation">]</span> <span class="token operator">=</span> ma<span class="token punctuation">[</span>ar<span class="token operator">-</span>difference<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>max_len <span class="token operator">&lt;</span> ma<span class="token punctuation">[</span>ar<span class="token punctuation">]</span><span class="token punctuation">)</span> max_len <span class="token operator">=</span> ma<span class="token punctuation">[</span>ar<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ma<span class="token punctuation">[</span>ar<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                ma<span class="token punctuation">[</span>ar<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> max_len<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="黄金矿工"><a href="#黄金矿工" class="headerlink" title="黄金矿工"></a>黄金矿工</h2><blockquote>
<p>你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 m * n 的网格 grid 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 0。</p>
<p>为了使收益最大化，矿工需要按以下规则来开采黄金：</p>
<p>每当矿工进入一个单元，就会收集该单元格中的所有黄金。<br>矿工每次可以从当前位置向上下左右四个方向走。<br>每个单元格只能被开采（进入）一次。<br>不得开采（进入）黄金数目为 0 的单元格。<br>矿工可以从网格中 任意一个 有黄金的单元格出发或者是停止。</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> visited<span class="token punctuation">;</span>
    <span class="token keyword">int</span> res_fin<span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">getMaximumGold</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        m<span class="token operator">=</span>grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        n<span class="token operator">=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        visited<span class="token operator">=</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        res_fin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
                <span class="token function">recursion</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> res_fin<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">,</span><span class="token keyword">int</span> startx<span class="token punctuation">,</span><span class="token keyword">int</span> starty<span class="token punctuation">,</span><span class="token keyword">int</span> res<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        visited<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>res_fin <span class="token operator">&lt;</span> res<span class="token punctuation">)</span> res_fin <span class="token operator">=</span> res<span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> newx<span class="token operator">=</span>startx<span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> newy<span class="token operator">=</span>starty<span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>newx<span class="token punctuation">,</span>newy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">recursion</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>newx<span class="token punctuation">,</span>newy<span class="token punctuation">,</span>res<span class="token operator">+</span>grid<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        visited<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> x<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x<span class="token operator">&lt;</span>m <span class="token operator">&amp;&amp;</span> y<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="统计元音字母序列的数目"><a href="#统计元音字母序列的数目" class="headerlink" title="统计元音字母序列的数目"></a>统计元音字母序列的数目</h2><p><strong>没时间做的第四题啊 残念</strong></p>
<blockquote>
<p>给你一个整数 n，请你帮忙统计一下我们可以按下述规则形成多少个长度为 n 的字符串：</p>
<p>字符串中的每个字符都应当是小写元音字母（’a’, ‘e’, ‘i’, ‘o’, ‘u’）<br>每个元音 ‘a’ 后面都只能跟着 ‘e’<br>每个元音 ‘e’ 后面只能跟着 ‘a’ 或者是 ‘i’<br>每个元音 ‘i’ 后面 不能 再跟着另一个 ‘i’<br>每个元音 ‘o’ 后面只能跟着 ‘i’ 或者是 ‘u’<br>每个元音 ‘u’ 后面只能跟着 ‘a’<br>由于答案可能会很大，所以请你返回 模 10^9 + 7 之后的结果。</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countVowelPermutation</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> e <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> o <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> u <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> mod <span class="token operator">=</span> <span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">long</span> a1<span class="token punctuation">,</span> e1<span class="token punctuation">,</span> i1<span class="token punctuation">,</span> o1<span class="token punctuation">,</span> u1<span class="token punctuation">;</span>
		a1 <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">+</span> i <span class="token operator">+</span> u<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
		e1 <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
		i1 <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">+</span> o<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
		o1 <span class="token operator">=</span> i<span class="token punctuation">;</span>
		u1 <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> o<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
		a <span class="token operator">=</span> a1<span class="token punctuation">,</span> e <span class="token operator">=</span> e1<span class="token punctuation">,</span> i <span class="token operator">=</span> i1<span class="token punctuation">,</span> o <span class="token operator">=</span> o1<span class="token punctuation">,</span> u <span class="token operator">=</span> u1<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	res <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> e <span class="token operator">+</span> i <span class="token operator">+</span> o <span class="token operator">+</span> u<span class="token punctuation">)</span> <span class="token operator">%</span> mod<span class="token punctuation">;</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><ul>
<li><p>这道题可以说非常的鬼畜，不知道官方出于什么想法把它安排在第四条归类为困难。。。</p>
</li>
<li><p>为什么对 10^9+7 取模？再查了一些资料后，得出结论</p>
<ol>
<li>1000000007 是一个质数（素数），对质数取余能最大程度避免冲突～</li>
<li>int32 位的最大值为 2147483647，所以对于 int32 位来说 1000000007 足够大</li>
<li>int64 位的最大值为 2^63-1，对于 1000000007 来说它的平方不会在 int64 中溢出<br>所以在大数相乘的时候，因为(a∗b)%c=((a%c)∗(b%c))%c，所以相乘时两边都对 1000000007 取模，再保存在 int64 里面不会溢出</li>
</ol>
</li>
<li><p>这一题还有进阶的快速幂解法，没有听说过，研究研究。</p>
</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>于是周赛打掉了我好不容易攒出来的一页绿%&gt;_&lt;%</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/2855058512.png?Expires=1602302380&" alt="p1" loading="lazy"></p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>周赛</tag>
      </tags>
  </entry>
  <entry>
    <title>No.64 最小路径和:动态规划</title>
    <url>/2019-10-10-minimum-path-sum/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/minimum-path-sum/">No.64 最小路径和</a></p>
<p>给定一个包含非负整数的 m x n  网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p>
<a id="more"></a>

<p>说明：每次只能向下或者向右移动一步。</p>
<p>示例:</p>
<p>输入:</p>
<pre><code>[
  [1,3,1],
    [1,5,1],
    [4,2,1]
]</code></pre>
<p>输出: 7</p>
<p>解释: 因为路径 1→3→1→1→1 的总和最小。</p>
<p><strong>偶然做到这一篇，发现这题极适合动态规划的入门。</strong></p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/2569288342.png?Expires=1602310753&" alt="res" loading="lazy"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/3301511821.jpg?Expires=1602310771&" alt="p1" loading="lazy"></p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/455756629.jpg?Expires=1602310780&" alt="p2" loading="lazy"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">min</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">,</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> grid<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>慢慢来吧，饭后甜点。</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/847507095.png?Expires=1602310797&" alt="p3" loading="lazy"></p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>No.65 有效数字</title>
    <url>/2019-10-12-valid-number/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/valid-number/">No.65 有效数字</a></p>
<p><strong>难度：困难</strong></p>
<p>验证给定的字符串是否可以解释为十进制数字。</p>
<a id="more"></a>

<p>例如:</p>
<pre><code>&quot;0&quot; =&gt; true
&quot; 0.1 &quot; =&gt; true
&quot;abc&quot; =&gt; false
&quot;1 a&quot; =&gt; false
&quot;2e10&quot; =&gt; true
&quot; -90e3   &quot; =&gt; true
&quot; 1e&quot; =&gt; false
&quot;e3&quot; =&gt; false
&quot; 6e-1&quot; =&gt; true
&quot; 99e2.5 &quot; =&gt; false
&quot;53.5e93&quot; =&gt; true
&quot; --6 &quot; =&gt; false
&quot;-+3&quot; =&gt; false
&quot;95a54e53&quot; =&gt; false</code></pre>
<p>说明:  我们有意将问题陈述地比较模糊。在实现代码之前，你应当事先思考所有可能的情况。这里给出一份可能存在于有效十进制数字中的字符列表：</p>
<p>数字 0-9<br>指数 - “e”<br>正/负号 - “+”/“-“<br>小数点 - “.”<br>当然，在输入中，这些字符的上下文也很重要。</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/387135797.png?Expires=1602310817&" alt="res" loading="lazy"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>如 tag 所标注的那样，这是一道很烦人的题目，因为有各种各样的情况需要考虑。</p>
<p>同样，这是一道适合心情不好的时候做的题目。他需要冷静而清晰的思路去梳理种种的情况，所以，当这道题目做完，心情也就平复了。</p>
<p>主要是集几种特殊情况的考虑。比如”.-“,”-.”,”+e”等等。通过条件判断语句的约束，就可以解决这道问题。在官方没有给出具体的需要考虑的情况的前提下，主要还是看做题人的数学素养如何。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">bool</span> <span class="token function">isNumber</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">find_first_not_of</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find_last_not_of</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">bool</span> point_exist <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">,</span> e_exist <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"+."</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"-."</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>


        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'e'</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> e_exist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> n<span class="token operator">-</span><span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isdigit</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                point_exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                e_exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> point_exist<span class="token punctuation">)</span>
                point_exist <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>No.68 文本左右对齐:字符串题目总结(1)</title>
    <url>/2019-10-13-text-justification/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/text-justification/">No.68 文本左右对齐</a></p>
<p><strong>难度：困难</strong></p>
<p>给定一个单词数组和一个长度  maxWidth，重新排版单词，使其成为每行恰好有  maxWidth  个字符，且左右两端对齐的文本。</p>
<p>你应该使用“贪心算法”来放置给定的单词；也就是说，尽可能多地往每行中放置单词。必要时可用空格  ‘ ‘  填充，使得每行恰好有 maxWidth  个字符。</p>
<p>要求尽可能均匀分配单词间的空格数量。如果某一行单词间的空格不能均匀分配，则左侧放置的空格数要多于右侧的空格数。</p>
<p>文本的最后一行应为左对齐，且单词之间不插入额外的空格。</p>
<a id="more"></a>

<p>说明:</p>
<p>单词是指由非空格字符组成的字符序列。<br>每个单词的长度大于 0，小于等于  maxWidth。<br>输入单词数组 words  至少包含一个单词。</p>
<p>示例:</p>
<p>输入:<br>words = [“This”, “is”, “an”, “example”, “of”, “text”, “justification.”]<br>maxWidth = 16<br>输出:</p>
<pre><code>[
   &quot;This    is    an&quot;,
   &quot;example  of text&quot;,
   &quot;justification.  &quot;
]</code></pre>
<p>示例  2:</p>
<p>输入:<br>words = [“What”,”must”,”be”,”acknowledgment”,”shall”,”be”]<br>maxWidth = 16<br>输出:</p>
<pre><code>[
  &quot;What   must   be&quot;,
  &quot;acknowledgment  &quot;,
  &quot;shall be        &quot;
]</code></pre>
<p>解释: 注意最后一行的格式应为 “shall be “ 而不是 “shall be”,<br>  因为最后一行应为左对齐，而不是左右两端对齐。<br> 第二行同样为左对齐，这是因为这行只包含一个单词。</p>
<p>示例  3:</p>
<p>输入:<br>words = [“Science”,”is”,”what”,”we”,”understand”,”well”,”enough”,”to”, “explain”,<br>  “to”,”a”,”computer.”,”Art”,”is”,”everything”,”else”,”we”,”do”]<br>maxWidth = 20<br>输出:</p>
<pre><code>[
  &quot;Science  is  what we&quot;,
&quot;understand      well&quot;,
  &quot;enough to explain to&quot;,
  &quot;a  computer.  Art is&quot;,
  &quot;everything  else  we&quot;,
  &quot;do                  &quot;
]</code></pre>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/220978777.png?Expires=1602310896&" alt="res" loading="lazy"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>到现在做了很多的字符串处理的题目了。这是现有的标记为困难的字符串题，所以拿出来作为对字符串题目的一个小结。</p>
<p>大多数的字符串处理都是数学题，最重要的是找到对应的处理流程。</p>
<p>No.65 中的处理方式是 <strong>有限状态机（DFA）</strong> ，这一题的处理方式是 <strong>逻辑分析</strong> 。这些被标记为 <em>“困难”</em> 的字符串题目，只要找到对应的处理方式，解起来就丝滑无比。</p>
<p>方法归总(第一阶段)：</p>
<ul>
<li>双指针法。双指针法可以极大地降低搜索的时间。</li>
<li>滑块法。滑块法在对于 substr 类的字符串题目有着很高的适用性。</li>
<li>二分法。这是基础中的基础了，不做赘述。</li>
<li>有限状态机（DFA）。DFA 重在思路，实际上这么多题做下来，DFA 直接套用的也就一题= =</li>
<li>哈希表。万能的哈希表，在处理记数类型的问题时可以极大地压缩时间消耗。</li>
<li>STL 库的基本应用。这是半基础吧，不熟悉也能做题目，但是很多方法直接调用库里的比手写一遍要节约很多时间。</li>
<li>Algorithm \ Data Structure 库。同上。</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">fullJustify</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">,</span> <span class="token keyword">int</span> maxWidth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> start_word <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            sum <span class="token operator">+=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">></span> maxWidth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> interval <span class="token operator">=</span> i <span class="token operator">-</span> start_word <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
                string tmp_s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> start_word <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token function">blank_generate</span><span class="token punctuation">(</span>maxWidth<span class="token operator">-</span>words<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>interval <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> start_word<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                        tmp_s <span class="token operator">+=</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>
                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp_s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>maxWidth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    <span class="token keyword">int</span> now_sum <span class="token operator">=</span> sum <span class="token operator">-</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> interval <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> blank_h <span class="token operator">=</span> <span class="token punctuation">(</span>maxWidth <span class="token operator">-</span> now_sum<span class="token punctuation">)</span> <span class="token operator">%</span> interval<span class="token punctuation">,</span> blank_low <span class="token operator">=</span> <span class="token punctuation">(</span>maxWidth <span class="token operator">-</span> now_sum<span class="token punctuation">)</span> <span class="token operator">/</span> interval<span class="token punctuation">;</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> start_word<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> blank_h <span class="token operator">+</span> start_word<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                        tmp_s <span class="token operator">+=</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">blank_generate</span><span class="token punctuation">(</span>blank_low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    tmp_s <span class="token operator">=</span> tmp_s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> tmp_s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> start_word<span class="token operator">+</span>blank_h<span class="token operator">+</span><span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                        tmp_s <span class="token operator">+=</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token function">blank_generate</span><span class="token punctuation">(</span>blank_low<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    tmp_s <span class="token operator">=</span> tmp_s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token punctuation">,</span> tmp_s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> blank_low<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp_s<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                sum <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                start_word <span class="token operator">=</span> i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            sum<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        string tmp_s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start_word<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            tmp_s <span class="token operator">+=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>
        tmp_s <span class="token operator">+=</span> <span class="token function">blank_generate</span><span class="token punctuation">(</span>maxWidth <span class="token operator">-</span> tmp_s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp_s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>maxWidth<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    string <span class="token function">blank_generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> x <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            res <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>“汪汪汪”。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>周赛158</title>
    <url>/2019-10-13-week-158/</url>
    <content><![CDATA[<h2 id="分割平衡字符串"><a href="#分割平衡字符串" class="headerlink" title="分割平衡字符串"></a>分割平衡字符串</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/">传送门</a></p>
<blockquote>
<p>在一个「平衡字符串」中，’L’ 和 ‘R’ 字符的数量是相同的。<br>给出一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。<br>返回可以通过分割得到的平衡字符串的最大数量。</p>
</blockquote>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>典型的栈思路。<br>不过本体只取思路，不用结构。因为完全可以省下这部分的空间消耗。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">balancedStringSplit</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> count<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>时间消耗:O(n)<br>空间消耗:O(1)</p>
<h2 id="可以攻击国王的皇后"><a href="#可以攻击国王的皇后" class="headerlink" title="可以攻击国王的皇后"></a>可以攻击国王的皇后</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/queens-that-can-attack-the-king/">传送门</a></p>
<blockquote>
<p>在一个 8x8 的棋盘上，放置着若干「黑皇后」和一个「白国王」。</p>
<p>「黑皇后」在棋盘上的位置分布用整数坐标数组 queens 表示，「白国王」的坐标用数组 king 表示。</p>
<p>「黑皇后」的行棋规定是：横、直、斜都可以走，步数不受限制，但是，不能越子行棋。</p>
<p>请你返回可以直接攻击到「白国王」的所有「黑皇后」的坐标（任意顺序）。</p>
</blockquote>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>构建稀疏矩阵，然后从国王的位置向 8 个方向查找，找到即停止。<br>一个值得注意的地方是，矩阵的边界应该由 queens 和 king 共同决定。<br>存在数学解法。</p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">queensAttacktheKing</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> queens<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> king<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>queens<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&lt;</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> m <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> n <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&lt;</span> king<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> m <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> king<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> n <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        m<span class="token operator">++</span><span class="token punctuation">;</span>
        n<span class="token operator">++</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">tmp</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> res<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>queens<span class="token punctuation">)</span>
            tmp<span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> i <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>m<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        i <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        i <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        i <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        i <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>m <span class="token operator">&amp;&amp;</span> j<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        i <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        i <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>m <span class="token operator">&amp;&amp;</span> j<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token operator">--</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">++</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        i <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j <span class="token operator">=</span> king<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;</span>n<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span><span class="token operator">++</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">--</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span>j<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="最大相等频率"><a href="#最大相等频率" class="headerlink" title="最大相等频率"></a>最大相等频率</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><a href="https://leetcode-cn.com/problems/maximum-equal-frequency/">传送门</a></p>
<blockquote>
<p>给出一个正整数数组 nums，请你帮忙从该数组中找出能满足下面要求的 最长 前缀，并返回其长度：<br>从前缀中 删除一个 元素后，使得所剩下的每个数字的出现次数相同。<br>如果删除这个元素后没有剩余元素存在，仍可认为每个数字都具有相同的出现次数（也就是 0 次）。</p>
</blockquote>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>构建双哈希表，第一张表存放每个元素出现的次数，第二张表存放每个次数(第一张表的元素)出现的次数。</p>
<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maxEqualFreq</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> ma<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
            ma<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ma<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">>=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span> matmp<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> m<span class="token operator">:</span>ma<span class="token punctuation">)</span>
                matmp<span class="token punctuation">[</span>m<span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            std<span class="token operator">::</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">::</span>iterator iter<span class="token operator">=</span>matmp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>iter<span class="token punctuation">;</span>iter<span class="token operator">!=</span>matmp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>iter<span class="token operator">-></span>first<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
                    matmp<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    iter<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            ma<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> matmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> ma<span class="token punctuation">[</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>matmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec1<span class="token punctuation">,</span>vec2<span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">auto</span><span class="token operator">&amp;</span> m<span class="token operator">:</span>matmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                vec1<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
                vec2<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">int</span> min <span class="token operator">=</span> vec1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> vec1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>vec2<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">abs</span><span class="token punctuation">(</span>vec1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>vec1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>vec1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> vec2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>又是快要饿死的一天。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>No.71 简化路径:shashasha</title>
    <url>/2019-10-14-simplify-path/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/simplify-path/">No.71 简化路径</a></p>
<p>以 Unix 风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。</p>
<p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..）  表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：Linux / Unix 中的绝对路径 vs 相对路径</p>
<p>请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。最后一个目录名（如果存在）不能以 / 结尾。此外，规范路径必须是表示绝对路径的最短字符串。</p>
<a id="more"></a>

<p>示例 1：</p>
<p>输入：”/home/“<br>输出：”/home”<br>解释：注意，最后一个目录名后面没有斜杠。</p>
<p>示例 2：</p>
<p>输入：”/../“<br>输出：”/“<br>解释：从根目录向上一级是不可行的，因为根是你可以到达的最高级。</p>
<p>示例 3：</p>
<p>输入：”/home//foo/“<br>输出：”/home/foo”<br>解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</p>
<p>示例 4：</p>
<p>输入：”/a/./b/../../c/“<br>输出：”/c”</p>
<p>示例 5：</p>
<p>输入：”/a/../../b/../c//.//“<br>输出：”/c”</p>
<p>示例 6：</p>
<p>输入：”/a//b////c/d//././/..”<br>输出：”/a/b/c”</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>放在诸多的字符串题目中，这一题可以说平平无奇。<br>不过在优化答案的过程中，有了一些很有意思的感想，所以就把它单独列为一篇 blog 吧。</p>
<p>** 我们应该俯视问题，而不是仰视问题。同样推广到人生之中也是在这样，眼界决定境界，布局决定结局。 by. 日常犯二的 zxj **</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/3050857160.png?Expires=1602312305&" alt="res" loading="lazy"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>经典的栈使用法。<br>关键是思路要正确。<br>如果选择每次校验是”.” 还是”..”还是”///“,那么恭喜你，掉进坑里了。<br>所以，我选择每次去找两个”/“之间的字符串，注意，是所有字符串，然后对比已知的特殊情况”..”和”.”。<br>实际上这是非常巧妙的一种方法，这里建议自己先做一遍在看下面的代码。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    string <span class="token function">simplifyPath</span><span class="token punctuation">(</span>string path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        stack<span class="token operator">&lt;</span>string<span class="token operator">></span> st<span class="token punctuation">;</span>
        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token operator">--</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'/'</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> left <span class="token operator">=</span> i<span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'/'</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>

                string tmp <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token string">".."</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token string">"."</span><span class="token punctuation">)</span> tmp <span class="token operator">=</span> <span class="token string">"wakaka,woshicaidan"</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                i<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            res <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token operator">+</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> res<span class="token punctuation">;</span>
            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>res <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"/"</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>很麻烦的一道题目，从结果的那种图片可以看出，我做了几次优化，最后时间从击败 44%升到 91% ，很有成就感。</li>
</ul>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>LeetCode</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title>No.72 编辑距离:动态规划</title>
    <url>/2019-10-17-edit-distance/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/edit-distance/">No.72 编辑距离</a></p>
<p><strong>难度：困难</strong></p>
<p>给你两个单词  word1 和  word2，请你计算出将  word1  转换成  word2 所使用的最少操作数  。</p>
<p>你可以对一个单词进行如下三种操作：</p>
<p>插入一个字符<br>删除一个字符<br>替换一个字符</p>
<a id="more"></a>

<p>示例  1：</p>
<p>输入：word1 = “horse”, word2 = “ros”<br>输出：3<br>解释：</p>
<pre><code>horse -&gt; rorse (将 &#39;h&#39; 替换为 &#39;r&#39;)
rorse -&gt; rose (删除 &#39;r&#39;)
rose -&gt; ros (删除 &#39;e&#39;)</code></pre>
<p>示例  2：</p>
<p>输入：word1 = “intention”, word2 = “execution”<br>输出：5<br>解释：</p>
<pre><code>intention -&gt; inention (删除 &#39;t&#39;)
inention -&gt; enention (将 &#39;i&#39; 替换为 &#39;e&#39;)
enention -&gt; exention (将 &#39;n&#39; 替换为 &#39;x&#39;)
exention -&gt; exection (将 &#39;n&#39; 替换为 &#39;c&#39;)
exection -&gt; execution (插入 &#39;u&#39;)</code></pre>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/1349495973.png?Expires=1602312517&" alt="p1" loading="lazy"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/1028368401.png?Expires=1602312573&" alt="72.md.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>No. 80 删除排序数组中的重复项 II</title>
    <url>/2019-10-23-remove-duplicates-from-sorted-array-ii/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/">No.80 删除排序数组中的重复项 II</a></p>
<p>给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素最多出现两次，返回移除后数组的新长度。</p>
<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>
<a id="more"></a>

<p>示例  1:</p>
<p>给定 nums = [1,1,1,2,2,3],</p>
<p>函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。</p>
<p>你不需要考虑数组中超出新长度后面的元素。<br>示例  2:</p>
<p>给定 nums = [0,0,1,1,1,1,2,3,3],</p>
<p>函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为  0, 0, 1, 1, 2, 3, 3 。</p>
<p>你不需要考虑数组中超出新长度后面的元素。<br>说明:</p>
<p>为什么返回数值是整数，但输出的答案是数组呢?</p>
<p>请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。</p>
<p>你可以想象内部操作如下:</p>
<p>// nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝<br>int len = removeDuplicates(nums);</p>
<p>// 在函数里修改输入数组对于调用者是可见的。<br>// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。</p>
<pre><code>for (int i = 0; i &lt; len; i++) &#123;
    print(nums[i]);
&#125;</code></pre>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/3423227357.png?Expires=1602312599&" alt="截屏2019-10-23上午9.35.58.png" loading="lazy"></p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/1180591066.png?Expires=1602312613&" alt="截屏2019-10-23上午9.35.25.png" loading="lazy"></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>如结果所示，本题我使用了两种解法。<br>解法一的重点在于对 INT_MAX 的使用，这是一个很实用的 C++内置变量。<br>解法二的重点在于算法思路的梳理。新的解法可以省略一次 sort 排序的时间，减少了时间消耗和内存消耗。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>解一：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>nowl <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nowl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                nowl <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
                res<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nowl <span class="token operator">&amp;&amp;</span> count <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
                res<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解二：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>res <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                nums<span class="token punctuation">[</span><span class="token operator">++</span>res<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>我一直以为的解脱，到头来不过是懦弱者的逃避。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>No.84 柱状图中最大的矩形:多解法</title>
    <url>/2019-10-24-largest-rectangle-in-histogram/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/">No.84 柱状图中最大的矩形</a></p>
<p><strong>难度：困难</strong></p>
<p>给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。</p>
<p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram.png" alt="p1" loading="lazy"></p>
<p>以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为  [2,1,5,6,2,3]。</p>
<p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/histogram_area.png" alt="p2" loading="lazy"></p>
<p>图中阴影部分为所能勾勒出的最大矩形面积，其面积为  10  个单位。</p>
<a id="more"></a>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p>法一:</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/1045205236.png?Expires=1602312740&" alt="截屏2019-10-24下午8.23.47.png" loading="lazy"></p>
<p>法二:</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/230613868.png?Expires=1602312752&" alt="截屏2019-10-24下午8.29.24.png" loading="lazy"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/2144508509.png?Expires=1602312838&" alt="84.png" loading="lazy"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>解法一：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> heights<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> heights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> i<span class="token punctuation">,</span>right <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">>=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> left<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> right<span class="token operator">++</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> res <span class="token operator">?</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> res<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解法二：</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> heights<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>heights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> heights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res <span class="token operator">=</span> heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>record<span class="token punctuation">;</span>
        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>
        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> tmp <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> tmp <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>She was still too young to know that life never gives anything for nothing， and that a price is always exacted for what fate bestows。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>No.85 最大矩形</title>
    <url>/2019-10-25-maximal-rectangle/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/maximal-rectangle/">No.85 最大矩形</a></p>
<p><strong>难度：困难</strong></p>
<p>给定一个仅包含  0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。</p>
<a id="more"></a>

<p>示例:</p>
<p>输入:</p>
<pre><code>[
    [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;,&quot;0&quot;],
    [&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],
    [&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,&quot;1&quot;],
    [&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,&quot;1&quot;,&quot;0&quot;]
]</code></pre>
<p>输出: 6</p>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote>
<p>执行用时 :<br>24 ms, 在所有 cpp 提交中击败了 85.19%的用户<br>内存消耗 :<br>11.9 MB, 在所有 cpp 提交中击败了 28.90%的用户</p>
</blockquote>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这也是一个多解法问题，先写一篇占个坑吧。<br>目前的这个解法相当于是动态规划和 No.84 的缝合怪。。。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maximalRectangle</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span> vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span>
                    vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vec<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>
            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>


    <span class="token keyword">int</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> heights<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>heights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> heights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res <span class="token operator">=</span> heights<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>record<span class="token punctuation">;</span>
        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>
        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">int</span> tmp <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> tmp <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>有些话，说出来就好了。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>No.77 组合:回溯法</title>
    <url>/2019-10-26-combinations/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/combinations/">No.77 组合</a></p>
<p>给定两个整数 n 和 k，返回 1 … n 中所有可能的 k 个数的组合。</p>
<a id="more"></a>

<p>示例:</p>
<p>输入: n = 4, k = 2<br>输出:</p>
<pre><code>[
[2,4],
[3,4],
[2,3],
[1,2],
[1,3],
[1,4],
]</code></pre>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote>
<p>执行用时 :636 ms, 在所有 cpp 提交中击败了 15.29%的用户<br>内存消耗 :167.7 MB, 在所有 cpp 提交中击败了 8.43%的用户</p>
</blockquote>
<p>时间消耗和空间消耗有点高，不过在使用回溯法的前提下，这是最优解吧。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><img src="http://harumonia.top/usr/uploads/2019/10/892638645.png" alt="77.png" loading="lazy"></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> start<span class="token operator">&lt;=</span>n <span class="token punctuation">;</span>start<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            tmp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">backtracking</span><span class="token punctuation">(</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tmp<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>呼儿将出换美酒，与尔同销万古愁。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>N0.151 翻转字符串里的单词:多解法</title>
    <url>/2019-11-04-reverse-words-in-a-string/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/">N0.151 翻转字符串里的单词</a></p>
<p>给定一个字符串，逐个翻转字符串中的每个单词。</p>
<a id="more"></a>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><blockquote>
<p>执行用时 :<br>执行用时 :<br>8 ms, 在所有 cpp 提交中击败了 90.75%的用户<br>内存消耗 :<br>11.6 MB, 在所有 cpp 提交中击败了 30.30%的用户</p>
</blockquote>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>两种思路。</p>
<h3 id="法一：标准的栈思路"><a href="#法一：标准的栈思路" class="headerlink" title="法一：标准的栈思路"></a>法一：标准的栈思路</h3><p>这里我发现了一个很有趣的现象，就是如果使用了栈结构，然后对输出的 res 进行正向的相加，结果比不使用栈结构，对 res 进行逆向的相加，时间消耗和空间消耗都要低很多。<br>逆向相加省去了使用栈结构，并且理论上空间消耗只在 O(n)。<br>初步推测是因为逆向增加的移位字符会随着 res 的增加而迅速上升，进而拖慢了整体的进度。</p>
<p>以下是逆向增加的执行结果。</p>
<blockquote>
<p>执行用时 :<br>28 ms, 在所有 cpp 提交中击败了 18.55%的用户<br>内存消耗 :<br>66.8 MB, 在所有 cpp 提交中击败了 18.94%的用户</p>
</blockquote>
<h3 id="法二-stringstream"><a href="#法二-stringstream" class="headerlink" title="法二:stringstream"></a>法二:stringstream</h3><p>stringstream 法可以用于分割被空格、制表符等符号分割的字符串。<br>但是由于 stringstream 的构造函数会特别消耗内存，所以最终的结果（无论是时间还是空间）十分难看。</p>
<p><img src="http://www.harumonia.top/usr/uploads/2019/11/1846534912.jpeg" alt="IMG_8CC94A1E421C-1.jpeg" loading="lazy"></p>
<h3 id="法三-Python-一行解法"><a href="#法三-Python-一行解法" class="headerlink" title="法三:Python 一行解法"></a>法三:Python 一行解法</h3><p>很鲨雕的解法。。。python 果然还是简单啊</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' *'</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"># 栈
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s <span class="token operator">+=</span> <span class="token string">" "</span><span class="token punctuation">;</span>
        stack<span class="token operator">&lt;</span>string<span class="token operator">></span> ss<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> left <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token operator">++</span>i<span class="token punctuation">;</span>
            ss<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>i<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>ss<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            res <span class="token operator">+=</span> ss<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>
            ss<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


# 流
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        stringstream ss<span class="token punctuation">;</span>
        string ans<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>temp<span class="token punctuation">;</span>
        ss<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>ss<span class="token operator">>></span>temp<span class="token punctuation">)</span>
            ans<span class="token operator">=</span><span class="token string">" "</span><span class="token operator">+</span>temp<span class="token operator">+</span>ans<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">!=</span><span class="token string">""</span><span class="token punctuation">)</span>
            ans<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ans<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>时隔一周，再临 LeetCode。<br>这一周干了一件很没有意义的事情，无论从那个方面来说都非常地没有意义。<br>这段经历让我更深刻地认识到一件事情，不是所有的人都值得托付信任。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>136-137 出现的数字问题:位运算</title>
    <url>/2019-11-06-single-number/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/single-number/">No. 136 出现的数字问题(简单)</a></p>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
<p>说明：<br>你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？</p>
<p><a href="https://leetcode-cn.com/problems/single-number-ii/">No. 137 出现的数字问题 II(中等)</a></p>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。</p>
<a id="more"></a>

<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/3372957076.png?Expires=1602313168&" alt="p1" loading="lazy"></p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/576730388.png?Expires=1602313184&" alt="p2" loading="lazy"></p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/259591578.png?Expires=1602313198&" alt="p3" loading="lazy"></p>
<h2 id="代码和结果"><a href="#代码和结果" class="headerlink" title="代码和结果"></a>代码和结果</h2><h3 id="136-方法-2"><a href="#136-方法-2" class="headerlink" title="136 方法 2"></a>136 方法 2</h3><blockquote>
<p>执行用时 :<br>12 ms, 在所有 cpp 提交中击败了 95.53%的用户<br>内存消耗 :<br>9.7 MB, 在所有 cpp 提交中击败了 49.44%的用户</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>nums<span class="token punctuation">)</span>
            res <span class="token operator">^=</span> i<span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="137-方法-2-1"><a href="#137-方法-2-1" class="headerlink" title="137 方法 2-1"></a>137 方法 2-1</h3><blockquote>
<p>执行用时 :<br>12 ms, 在所有 cpp 提交中击败了 82.45%的用户<br>内存消耗 :<br>9.8 MB, 在所有 cpp 提交中击败了 11.11%的用户</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            b <span class="token operator">=</span> <span class="token punctuation">(</span>b <span class="token operator">^</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>a<span class="token punctuation">;</span>
            a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">^</span> x<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token operator">~</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="137-方法-2-2"><a href="#137-方法-2-2" class="headerlink" title="137 方法 2-2"></a>137 方法 2-2</h3><blockquote>
<p>执行用时 :12 ms, 在所有 cpp 提交中击败了 82.45%的用户<br>内存消耗 :9.6 MB, 在所有 cpp 提交中击败了 60.86%的用户</p>
</blockquote>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> s<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span>j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span>
                    s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token keyword">int</span> res <span class="token operator">=</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> tag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>
                res <span class="token operator">|=</span> tag<span class="token operator">&lt;&lt;</span>j<span class="token punctuation">;</span>

        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>梦到了老年的 zxj。<br>在一个本应该光怪陆离的世界里，他这样就坐在门前的台阶上，捧着一盏白雾蒸腾的茶，在不知道是夕阳还是朝阳的辉光里，眺望。<br>没有什么鸟语花香，也没有什么秋风萧瑟。渐渐地，一切的背景都在淡化，最终归于虚无。<br>甚至有一瞬间，<br>我感觉，<br>不是我梦到了他，<br>而是，<br>他在追忆我。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>关于前后端分离</title>
    <url>/2019-11-09-discussion-about-frontend-backend-separation/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在对 18 级的同学们进行培训，正好讲到 jinja2 这一块，在进行了仔细的梳理之后，忽然发现 jinja2 这种渲染模式与国内目前的潮流–前后端分离所不符合。<br>所以作为一个负责的老学长，我写下这一篇，来给 18 级的学弟学妹们介绍、分析一下，免得入了歧途。</p>
<h2 id="传统的开发模式"><a href="#传统的开发模式" class="headerlink" title="传统的开发模式"></a>传统的开发模式</h2><p>前端写好静态的 HTML 页面交付给后端开发。静态页面可以本地开发，也无需考虑业务逻辑只需要实现 View 即可。<br>后端使用模板引擎去套模板，当年使用最广泛的就是 jsp，freemarker 等等，同时内嵌一些后端提供的模板变量和一些逻辑操作。<br>然后前后端集成对接，遇到问题，前台返工，后台返工。<br>然后在集成，直至集成成功。</p>
<h2 id="前后端分离的开发模式"><a href="#前后端分离的开发模式" class="headerlink" title="前后端分离的开发模式"></a>前后端分离的开发模式</h2><p>前后端分离并不只是开发模式，而是 web 应用的一种架构模式。在开发阶段，前后端工程师约定好数据交互接口，实现并行开发和测试；在运行阶段前后端分离模式需要对 web 应用进行分离部署，前后端之前使用 HTTP 或者其他协议进行交互请求。</p>
<p>客户端和服务端采用 RESTFul API 的交互方式进行交互</p>
<p>前后端代码库分离</p>
<h3 id="如何分离"><a href="#如何分离" class="headerlink" title="如何分离"></a>如何分离</h3><p>对于 node.js 这类可以直接在前端进行处理的,由前端负责 view 和 controller 层,后端只负责 model 层，业务处理与数据持久化等<br>但是对于我们所使用的纯粹 flask 开发,MVC 就全部交由后端来负责,前端只需要完成静态页面的开发即可.</p>
<h2 id="如何取舍"><a href="#如何取舍" class="headerlink" title="如何取舍"></a>如何取舍</h2><p>如何取舍的问题归根到底是如何分工的问题<br>比如工作室的项目,在新的成员加入进来之前,我在负责了前后端的全部工作,所以我选择了耦合度较高的前后端结合开发模式.<br>这样的好处是开发迅速,而且高耦合往往意味着高效率.<br>但是这对后期接手的人不太友好,因为并不是每一个人对前后端都有所了解.</p>
<p>所以在后期,工作室的其他人加入进来之后,我就选择了前后端分离的开发模式.<br>注意,低耦合度的 API 交互的形式比直接渲染,数据的冗余度要高很多.如果 API 交互过于频繁,会给服务器造成很大的压力.<br>并且，解耦合后，可能会出现一些安全性的问题，要注意应对恶意请求。</p>
<p>再往后面 API 会讲一下 API 设计的相关内容.</p>
<h2 id="补充-前后端分离架构后的优点"><a href="#补充-前后端分离架构后的优点" class="headerlink" title="(补充)前后端分离架构后的优点"></a>(补充)前后端分离架构后的优点</h2><h3 id="为优质产品打造精益团队"><a href="#为优质产品打造精益团队" class="headerlink" title="为优质产品打造精益团队"></a>为优质产品打造精益团队</h3><p>通过将开发团队前后端分离化，让前后端工程师只需要专注于前端或后端的开发工作，是的前后端工程师实现自治，培养其独特的技术特性，然后构建出一个全栈式的精益开发团队。</p>
<h3 id="提升开发效率"><a href="#提升开发效率" class="headerlink" title="提升开发效率"></a>提升开发效率</h3><p>前后端分离以后，可以实现前后端代码的解耦，只要前后端沟通约定好应用所需接口以及接口参数，便可以开始并行开发，无需等待对方的开发工作结束。与此同时，即使需求发生变更，只要接口与数据格式不变，后端开发人员就不需要修改代码，只要前端进行变动即可。如此一来整个应用的开发效率必然会有质的提升。</p>
<h3 id="完美应对复杂多变的前端需求"><a href="#完美应对复杂多变的前端需求" class="headerlink" title="完美应对复杂多变的前端需求"></a>完美应对复杂多变的前端需求</h3><p>如果开发团队能完成前后端分离的转型，打造优秀的前后端团队，开发独立化，让开发人员做到专注专精，开发能力必然会有所提升，能够完美应对各种复杂多变的前端需求。</p>
<h3 id="增强代码可维护性"><a href="#增强代码可维护性" class="headerlink" title="增强代码可维护性"></a>增强代码可维护性</h3><p>前后端分离后，应用的代码不再是前后端混合，只有在运行期才会有调用依赖关系。应用代码将会变得整洁清晰，不论是代码阅读还是代码维护都会比以前轻松。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li><p>又是不知道干了啥的一天</p>
</li>
<li><p>于学姐冲冲冲</p>
</li>
</ul>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>漫谈</tag>
      </tags>
  </entry>
  <entry>
    <title>周赛162</title>
    <url>/2019-11-10-week-162/</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="题目-amp-amp-分析"><a href="#题目-amp-amp-分析" class="headerlink" title="题目 &amp;&amp; 分析"></a>题目 &amp;&amp; 分析</h2><h3 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h3><p>给你一个 n 行 m 列的矩阵，最开始的时候，每个单元格中的值都是 0。<br>另有一个索引数组 indices，indices[i] = [ri, ci] 中的 ri 和 ci 分别表示指定的行和列（从 0 开始编号）。<br>你需要将每对 [ri, ci] 指定的行和列上的所有单元格的值加 1。<br>请你在执行完所有 indices 指定的增量操作后，返回矩阵中 「奇数值单元格」 的数目。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>可能存在数学的解法，不过当时想了几分钟没啥头绪，就暴力了。<br>按照题目的意思构建一个 m*n 的矩阵<br>然后进行矩阵的填充<br>最后统计奇数的个数</p>
<h3 id="第二题"><a href="#第二题" class="headerlink" title="第二题"></a>第二题</h3><p>给你一个 2 行 n 列的二进制数组：</p>
<ul>
<li>矩阵是一个二进制矩阵，这意味着矩阵中的每个元素不是 0 就是 1。</li>
<li>第 0 行的元素之和为 upper。</li>
<li>第 1 行的元素之和为 lower。</li>
<li>第 i 列（从 0 开始编号）的元素之和为 colsum[i]，colsum 是一个长度为 n 的整数数组。</li>
</ul>
<p>你需要利用 upper，lower 和 colsum 来重构这个矩阵，并以二维整数数组的形式返回它。<br>如果有多个不同的答案，那么任意一个都可以通过本题。<br>如果不存在符合要求的答案，就请返回一个空的二维数组。</p>
<h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>S1: 判断是否存在符合要求的答案: - upper 和 lower 的和必须等于 colsum 的和 - colsum 的 size 减去 colsum 中 0 的个数，这个值必须同时大于 upper 和 lower 的任意一个<br>S2: 初始化 2 行 size 列的矩阵，该矩阵初始化为全零矩阵<br>S3: - 当 colsum[i]==2 时，结果矩阵的两列必然全为 1 - 当 colsum[i]==1 时，先填充 0 行，同时 upper–，直至 upper 等于 0 时，开始填充第 1 行<br>S4: 返回结果矩阵</p>
<h3 id="第三题"><a href="#第三题" class="headerlink" title="第三题"></a>第三题</h3><p>有一个二维矩阵 grid ，每个位置要么是陆地（记号为 0 ）要么是水域（记号为 1 ）。<br>我们从一块陆地出发，每次可以往上下左右 4 个方向相邻区域走，能走到的所有陆地区域，我们将其称为一座「岛屿」。<br>如果一座岛屿 完全 由水域包围，即陆地边缘上下左右所有相邻区域都是水域，那么我们将其称为 「封闭岛屿」。<br>请返回封闭岛屿的数目。</p>
<p><a href="https://leetcode-cn.com/contest/weekly-contest-162/problems/number-of-closed-islands/">传送门</a></p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>标准的深搜题，类比 No.200</p>
<p>本题关键的一个隐藏条件:<br><strong>如果岛屿靠近矩阵边缘，就不算封闭岛屿</strong></p>
<p>两种处理办法: - 在回溯矩阵前，将所有边缘陆地变为海洋 - 在回溯矩阵时，如果遇到边缘，记录下来，不添加到结果中</p>
<p>在实际的操作中，两种解法的思路是一样的，只是处理条件的顺序不一样而已，取舍看个人</p>
<h3 id="第四题"><a href="#第四题" class="headerlink" title="第四题:"></a>第四题:</h3><p>你将会得到一份单词表 words，一个字母表 letters （可能会有重复字母），以及每个字母对应的得分情况表 score。</p>
<p>请你帮忙计算玩家在单词拼写游戏中所能获得的「最高得分」：能够由 letters 里的字母拼写出的 任意 属于 words 单词子集中，分数最高的单词集合的得分。</p>
<p>单词拼写游戏的规则概述如下：</p>
<p>玩家需要用字母表 letters 里的字母来拼写单词表 words 中的单词。<br>可以只使用字母表 letters 中的部分字母，但是每个字母最多被使用一次。<br>单词表 words 中每个单词只能计分（使用）一次。<br>根据字母得分情况表 score，字母 ‘a’, ‘b’, ‘c’, … , ‘z’ 对应的得分分别为 score[0], score[1], …, score[25]。<br>本场游戏的「得分」是指：玩家所拼写出的单词集合里包含的所有字母的得分之和。</p>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>枚举。<br>枚举 words 子集总共 2^15 种情况，对于每个子集，统计一下这个子集每个字母用了多少次，是不是 letters 的子集，如果是，计算得分</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// Q1：</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">oddCells</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> indices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> vec <span class="token operator">=</span> <span class="token function">vector</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token function">vector</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>indices<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
                vec<span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>
                vec<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>vec<span class="token punctuation">)</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> j<span class="token operator">:</span>i<span class="token punctuation">)</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    count<span class="token operator">++</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> count<span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">// Q2:</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">reconstructMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> upper<span class="token punctuation">,</span> <span class="token keyword">int</span> lower<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> colsum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> sum_res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>count2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>count0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>colsum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            sum_res<span class="token operator">+=</span>i<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> count2<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> count0<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>sum_res<span class="token operator">!=</span><span class="token punctuation">(</span>upper<span class="token operator">+</span>lower<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>colsum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>count0<span class="token punctuation">)</span><span class="token operator">&lt;</span>upper <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>colsum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>count0<span class="token punctuation">)</span><span class="token operator">></span>lower<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>colsum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>count0<span class="token punctuation">)</span><span class="token operator">></span>upper <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>colsum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>count0<span class="token punctuation">)</span><span class="token operator">&lt;</span>lower<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token function">vector</span><span class="token punctuation">(</span>colsum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        upper <span class="token operator">-=</span> count2<span class="token punctuation">;</span>
        lower <span class="token operator">-=</span> count2<span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span> colsum<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>colsum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>colsum<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>upper<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                    upper<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                    res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> res<span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>



<span class="token comment">// Q3:</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span> visited<span class="token punctuation">;</span>
    <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token function">closedIsland</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        m<span class="token operator">=</span>grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        n<span class="token operator">=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        visited<span class="token operator">=</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">>></span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    res<span class="token operator">++</span><span class="token punctuation">;</span>
                    <span class="token function">recursion</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
                        res<span class="token operator">--</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">void</span> <span class="token function">recursion</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">,</span><span class="token keyword">int</span> startx<span class="token punctuation">,</span><span class="token keyword">int</span> starty<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

        visited<span class="token punctuation">[</span>startx<span class="token punctuation">]</span><span class="token punctuation">[</span>starty<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> newx<span class="token operator">=</span>startx<span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> newy<span class="token operator">=</span>starty<span class="token operator">+</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">judge</span><span class="token punctuation">(</span>newx<span class="token punctuation">,</span>newy<span class="token punctuation">)</span><span class="token punctuation">)</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">judge</span><span class="token punctuation">(</span>newx<span class="token punctuation">,</span>newy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>visited<span class="token punctuation">[</span>newx<span class="token punctuation">]</span><span class="token punctuation">[</span>newy<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">recursion</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>newx<span class="token punctuation">,</span>newy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">bool</span> <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> x<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x<span class="token operator">&lt;</span>m <span class="token operator">&amp;&amp;</span> y<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>


<span class="token comment">//Q4:</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">maxScoreWords</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">&amp;</span> letters<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">stat</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">&amp;</span> c<span class="token operator">:</span> letters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            stat<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> g <span class="token operator">=</span> <span class="token function">group</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>g<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> stat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    temp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    temp <span class="token operator">+=</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> score<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                ret <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">group</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">,</span> <span class="token keyword">int</span> bit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ret</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bit <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    ret<span class="token punctuation">[</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>也许吧(⊙o⊙)…</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>Java课设中的问题以及解决方案(一)</title>
    <url>/2019-11-17-Course-Design-of-Java-QS-1/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul>
<li>系统环境: macOS Catalina 10.15</li>
<li>java 版本: JDK12</li>
<li>开发环境: eclipse 2019-06 (4.12.0)</li>
<li>绘图工具: notebility\Procreate</li>
</ul>
<p>Ps.界面设计全靠手绘…</p>
<p><a href="https://github.com/zxjlm/TCM_analize_tools">github 上可以看到源码</a><br>(预计更新时间:2019 年 11 月 18 日)</p>
<p>不过肯定是运行不了的啦,因为涉及到一些需要保密的东西.</p>
<h1 id="问题以及解决"><a href="#问题以及解决" class="headerlink" title="问题以及解决"></a>问题以及解决</h1><h2 id="数据库连接问题"><a href="#数据库连接问题" class="headerlink" title="数据库连接问题"></a>数据库连接问题</h2><p>导入 <em>java.sql.Connection</em> 依赖包</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			con <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/TCM_DICT"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>目前网络上主流的连接方式为上述语句</p>
<p>不过在实际操作中发现,这种语句会出现一个红色的 warning. 因为 <strong>mysql5.6</strong> 以上的版本要求进行 ssl 验证,所以进行如下的改动.</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			con <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/TCM_DICT?useSSL=false"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>加上 <strong>useSSL=false</strong> ,取消验证即可.</p>
<h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><p>在进行 Java-SQL 连接时,进行了一些尝试,最终导致现在每次连接本地数据库都会报错(但是可以正常使用),因为不影响开发,同时也无法找到类似问题的解决方案,所以暂时搁置了,以后会考虑解决.</p>
<h2 id="Java-包管理问题"><a href="#Java-包管理问题" class="headerlink" title="Java 包管理问题"></a>Java 包管理问题</h2><p>开发过程中不可避免地要用到很多的网络上的包,一开始我是一个一个下载的,体验极差.<br>后来转念一想,python 有 pip\conda,那么 Java 是否有对应的包管理工具呢?<br>一查,还真就找到了这样一个<del>~</del></p>
<h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><p><em>注意:搜索排行第一页,有几篇文章(知乎\csdn)不要看,巨坑无比</em></p>
<p>maven 其实不只是一个包管理工具啦.<br>具体的 maven 说明和安装使用,可以查阅<a href="https://www.runoob.com/maven/maven-tutorial.html">菜鸟教程的 maven 介绍</a></p>
<p>主要是以下几点:</p>
<ul>
<li>maven 安装</li>
<li>maven 项目建立</li>
<li>maven 坐标如何导入</li>
</ul>
<p><strong>最终,能够通过几行 xml,完成 jar 包的导入</strong></p>
<p>下述示例为导入 fastjson 包,是否比自己下载要方便很多呢?</p>
<pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同时,推荐一个<a href="https://mvnrepository.com/">maven 仓库</a>,大多数的依赖包的 maven 坐标可以从中获取.</p>
<h2 id="多线程问题"><a href="#多线程问题" class="headerlink" title="多线程问题"></a>多线程问题</h2><h3 id="实现一个类似于异步进度条的功能"><a href="#实现一个类似于异步进度条的功能" class="headerlink" title="实现一个类似于异步进度条的功能"></a>实现一个类似于异步进度条的功能</h3><p>课设涉及到一个本地和服务器端交互过程,所以想要设计一个进度条,不然交互的那段时间(5s-1min,视用户分析的数据量决定)实在是煎熬.<br>预想的是类似 bash 交互,Waiting… -&gt; success 这样.</p>
<p>Demo 的代码比较少,所以就直接列出来了.</p>
<p>参照课本上的多线程一章(明明后面有很多很重要的章节,但是竟然不讲,实在是一言难尽).</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java"> class labelControl1 extends Thread&#123;
	 public JLabel matrixLoder;

	 public labelControl1(JLabel matrixLoder) &#123;
		 this.matrixLoder &#x3D; matrixLoder;
	 &#125;

	@Override
	public void run() &#123;
		String str &#x3D; &quot;Waiting &quot; ;
		while(true) &#123;
			if(global_bool.laberFlag1) &#123;
				matrixLoder.setText(&quot;success&quot;);
				break;
			&#125;
			System.out.println(&quot;111111&quot;);
			try &#123;
				Thread.sleep(1000);
			&#125; catch (InterruptedException e) &#123;
				e.printStackTrace();
			&#125;

			if(str.equals(&quot;Waiting ......&quot;)) &#123;
				str &#x3D; &quot;Waiting &quot;;
			&#125;
			str +&#x3D; &quot;.&quot;;
			matrixLoder.setText(str);
		&#125;
	&#125;

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="csv-转-json"><a href="#csv-转-json" class="headerlink" title="csv 转 json"></a>csv 转 json</h2><p>本来是准备 excel 转 json 的,POI 都下载好了,后来发现只是 csv 转 json 而已~再一次深刻体会到了 csv 与 excel 的差别.</p>
<p>核心代码:</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static String json_str(String path) throws Exception &#123;
    	File input &#x3D; new File(path);

        CsvSchema csvSchema &#x3D; CsvSchema.builder().setUseHeader(true).build();
        CsvMapper csvMapper &#x3D; new CsvMapper();

        List readAll &#x3D; csvMapper.readerFor(Map.class).with(csvSchema).readValues(input).readAll();

        ObjectMapper mapper &#x3D; new ObjectMapper();

        return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(readAll);
    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>返回的为符合 JSON 格式要求的 String 类型,再将它转换为 JSON 即可.</p>
<h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><h3 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h3><p>编码问题是每一个非英文程序员都要经历的的噩梦吧^_^</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">StringEntity entity &#x3D; new StringEntity(js,Charset.forName(&quot;UTF-8&quot;));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="post-请求"><a href="#post-请求" class="headerlink" title="post 请求"></a>post 请求</h3><p>核心代码如下</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static String sendPost(String js,String url) throws Exception &#123;
    	Map&lt;String, Object&gt; paramMap &#x3D; new HashMap&lt;String, Object&gt;();
    	paramMap.put(&quot;data&quot;,js);

    	CloseableHttpClient httpClient &#x3D; null;
        CloseableHttpResponse httpResponse &#x3D; null;
        String result &#x3D; &quot;&quot;;
        &#x2F;&#x2F; 创建httpClient实例
        httpClient &#x3D; HttpClients.createDefault();
        &#x2F;&#x2F; 创建httpPost远程连接实例
        HttpPost httpPost &#x3D; new HttpPost(url);
        &#x2F;&#x2F; 配置请求参数实例
        RequestConfig requestConfig &#x3D; RequestConfig.custom().setConnectTimeout(350000)&#x2F;&#x2F; 设置连接主机服务超时时间
                .setConnectionRequestTimeout(350000)&#x2F;&#x2F; 设置连接请求超时时间
                .setSocketTimeout(600000)&#x2F;&#x2F; 设置读取数据连接超时时间
                .build();
        &#x2F;&#x2F; 为httpPost实例设置配置
        httpPost.setConfig(requestConfig);
        &#x2F;&#x2F; 设置请求头
        httpPost.addHeader(&quot;Content-Type&quot;, &quot;application&#x2F;x-www-form-urlencoded&quot;);
        &#x2F;&#x2F; 封装post请求参数
        if (null !&#x3D; paramMap &amp;&amp; paramMap.size() &gt; 0) &#123;
            List&lt;NameValuePair&gt; nvps &#x3D; new ArrayList&lt;NameValuePair&gt;();
            &#x2F;&#x2F; 通过map集成entrySet方法获取entity
            Set&lt;Entry&lt;String, Object&gt;&gt; entrySet &#x3D; paramMap.entrySet();
            &#x2F;&#x2F; 循环遍历，获取迭代器
            Iterator&lt;Entry&lt;String, Object&gt;&gt; iterator &#x3D; entrySet.iterator();
            while (iterator.hasNext()) &#123;
                Entry&lt;String, Object&gt; mapEntry &#x3D; iterator.next();
                nvps.add(new BasicNameValuePair(mapEntry.getKey(), mapEntry.getValue().toString()));
            &#125;
            StringEntity entity &#x3D; new StringEntity(js,Charset.forName(&quot;UTF-8&quot;));
			httpPost.setEntity(entity);
        &#125;
        try &#123;
            &#x2F;&#x2F; httpClient对象执行post请求,并返回响应参数对象
            httpResponse &#x3D; httpClient.execute(httpPost);
            &#x2F;&#x2F; 从响应对象中获取响应内容
            HttpEntity entity &#x3D; httpResponse.getEntity();
            result &#x3D; EntityUtils.toString(entity);
        &#125; catch (ClientProtocolException e) &#123;
            e.printStackTrace();
        &#125; catch (IOException e) &#123;
            e.printStackTrace();
        &#125; finally &#123;
            &#x2F;&#x2F; 关闭资源
            if (null !&#x3D; httpResponse) &#123;
                try &#123;
                    httpResponse.close();
                &#125; catch (IOException e) &#123;
                    e.printStackTrace();
                &#125;
            &#125;
            if (null !&#x3D; httpClient) &#123;
                try &#123;
                    httpClient.close();
                &#125; catch (IOException e) &#123;
                    e.printStackTrace();
                &#125;
            &#125;
        &#125;
&#x2F;&#x2F;        System.out.println(result);
        return result;
    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>本次的开发中没有用到 get 请求,不过掌握了 post 请求,那么逻辑更加简单的 get 还不是手到擒来.</p>
<h2 id="关于全局变量"><a href="#关于全局变量" class="headerlink" title="关于全局变量"></a>关于全局变量</h2><p>Java 的全局变量机制与 C#类似,都是访问类的静态成员变量.</p>
<p>所以我建立了一个 Global_pool 来维护基本全局变量.</p>
<p>示例:</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">package haru.utils;

public class global_bool &#123;
	public static boolean laberFlag1,labelFlag2,labelFlag3;
	public static String url1 &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;admin&#x2F;api&#x2F;java_homework_01_matrix&quot;;
	public static String url2 &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;admin&#x2F;api&#x2F;java_homework_content&quot;;
	public static String url3 &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;admin&#x2F;api&#x2F;java_homework_pro&quot;;

	public static String url4 &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;admin&#x2F;get_excel_recipe_html_java&quot;;
	public static String url5 &#x3D; &quot;http:&#x2F;&#x2F;127.0.0.1:5000&#x2F;admin&#x2F;get_truely_network_graph&quot;;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="macOS-如何打开网页"><a href="#macOS-如何打开网页" class="headerlink" title="macOS 如何打开网页"></a>macOS 如何打开网页</h2><p>对于 Windows 用户来说,使用一个简单的 Desktop 类就能简单解决的问题,在 Mac 用户这里就成了问题.<br>找了很多的回答,所谓的万能方案,emmmm,好吧已经老得跟不上版本了.<br>最终,我在<a href="https://stackoverflow.com/questions/38754219/java-how-to-open-url-with-command-on-mac">stackoverFlow</a>上找到了答案.<br>直接调用 terminal 执行命令.<br>啊,又打开了一扇新世界的大门(可以通过后台实现更多的功能哦).</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String Command&#x3D;&quot;open &quot;+&quot;http:&#x2F;&#x2F;google.ca&quot;;
Process Child&#x3D;Runtime.getRuntime().exec(Command);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>Ps. <em>runtime</em> 是隶属于 <em>java.lang</em> 的,不用下载~</p>
<h2 id="Jtable-列数太多-要实现横向的滑动"><a href="#Jtable-列数太多-要实现横向的滑动" class="headerlink" title="Jtable 列数太多,要实现横向的滑动"></a>Jtable 列数太多,要实现横向的滑动</h2><p>去掉自动大小变换就行了</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">tb.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>同时,献上自己写的 json2table 的核心代码</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.awt.BorderLayout;
import java.awt.Container;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;


public class json2table extends JFrame&#123;
	JTable tb;
	Object a[][],b[];


	public json2table(String s1,String name) &#123;
		JSONObject js &#x3D; new JSONObject();
		js &#x3D; JSON.parseObject(s1);


		HashSet&lt;String&gt; row &#x3D;new HashSet&lt;String&gt;();
		List&lt;String&gt; cols &#x3D; new ArrayList&lt;&gt;(js.keySet());
		List&lt;String&gt; rows &#x3D; new ArrayList&lt;&gt;(js.getJSONObject(cols.get(0)).keySet());



		a &#x3D; new Object[rows.size()][cols.size()];

		for (int i &#x3D; 0; i &lt; cols.size(); i++) &#123;
			JSONObject eachcol &#x3D; js.getJSONObject(cols.get(i));
			for (int j &#x3D; 0; j &lt; rows.size(); j++) &#123;
&#x2F;&#x2F;				System.out.println(eachcol.getString(rows.get(j)));
				a[j][i] &#x3D; eachcol.getString(rows.get(j));
			&#125;
		&#125;

		tb &#x3D; new JTable(a,cols.toArray());

		System.out.println(rows);
		System.out.println(cols);

		Container con &#x3D; getContentPane();

		getContentPane().add(new JScrollPane(tb),BorderLayout.CENTER);

		tb.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

		setTitle(name);
		setSize(10000,10000);
		setVisible(true);
		validate();
		setDefaultCloseOperation(HIDE_ON_CLOSE);

	&#125;

&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为也算是半个初学者,直觉告诉我泛型的运用上还有很大的改进余地.</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>肝疼,又是一次一个人的大作业,之所以一鼓作气写完,是因为,老实说,队友和心态问题,没啥干劲了.</li>
</ul>
<hr>
<ul>
<li>现实是残酷的,但是理想必须要是美好的.</li>
<li>最我们感到目盲的，往往不是彻夜的黑暗,而是黑暗过后的第一缕光.</li>
</ul>
<hr>
<ul>
<li>最后,谢谢^_^</li>
</ul>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java课程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Java课设中的问题以及解决方案(二)</title>
    <url>/2019-11-21-Course-Design-of-Java-QS-2/</url>
    <content><![CDATA[<h2 id="windowbuilder-安装和使用"><a href="#windowbuilder-安装和使用" class="headerlink" title="windowbuilder 安装和使用"></a>windowbuilder 安装和使用</h2><p>类比于在 VS stdio 上开发 c#,eclipse 有对应的 GUI 开发工具,也就是 windowbuilder.<br>当然同类型的工具也有 NetBeans 等.编程虽然有趣,但是本身是一件很麻烦的事情,所以我就只选择了普遍评价较高的 windowbuilder 作尝试.<br><a href="https://download.eclipse.org/windowbuilder/latest/">windowbuilder 主页</a></p>
<p>S1:安装插件(install new software)(这里注意活用 help 功能)<br>S2:将 <a href="https://download.eclipse.org/windowbuilder/latest/">https://download.eclipse.org/windowbuilder/latest/</a> 复制到 work with 一栏中<br>S3:一路点击 next 全选安装即可</p>
<p>安装完毕会提示重启,重启完成,在 new-&gt;other-&gt;windowbuilder-&gt;swing Designer-&gt;Application Window 中创建项目.</p>
<p>可以在代码文件的左下角发现,多了一个 Desgin 选项,至此,windowbuilder 安装完成.</p>
<h2 id="多线程进阶"><a href="#多线程进阶" class="headerlink" title="多线程进阶"></a>多线程进阶</h2><p>在<a href="http://www.harumonia.top/index.php/archives/164/">(一)</a>中有提到的一个问题.<br>当时虽然成功创建了进度条,不过发现主窗体的线程钳制了分线程的运行(也就是说,主窗体线程运行完毕之前,分线程不会共享主线程的资源)</p>
<p>纠结了半个晚上,于是今天突发奇想,将分线程对主线程资源的操作转移到备胎线程之中,这样本质上大家都是分线程,也就不会出现次序问题了.</p>
<p>多说无益,上代码</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">button.addActionListener(new ActionListener() &#123;
			public void actionPerformed(ActionEvent e) &#123;
				new labelControl1(matrixLoder).start();
				new labelControl2(contentLoder).start();
				new labelControl3(probilityLoder).start();
				resultOf01Button.setEnabled(false);
				resultOfcontentButton.setEnabled(false);
				resultOfprobilityButton.setEnabled(false);
				chartsOfcontentButton.setEnabled(false);
				chartsOfProbilityButton.setEnabled(false);
				visable_init(true);

				new PostThread( file_load_res, inputString, arr, resultOf01Button, resultOfcontentButton, chartsOfcontentButton, chartsOfProbilityButton, resultOfprobilityButton).start();
			&#125;
            &#x2F;&#x2F;将post命令放在新的线程中并发执行
		&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="效果图展示"><a href="#效果图展示" class="headerlink" title="效果图展示"></a>效果图展示</h3><p><img src="https://i.loli.net/2019/11/21/IhHWwKyQV2z9eCS.gif" alt="Kapture 2019-11-21 at 18.41.26.gif" loading="lazy"></p>
<h2 id="jtable-小结"><a href="#jtable-小结" class="headerlink" title="jtable 小结"></a>jtable 小结</h2><p>在一种大概地提到过 JTable 这个组件.<br>本次的课程设计中,有非常多的表格需要展示,有的是从服务器接收到的 json 数据转 jtable,也有将本地的 csv 文件转化为 jtable,还有将 textarea 中的输入文本转化为 jtable,所以目前对于这个组件略有心得(笑</p>
<h3 id="jtable-的初始化"><a href="#jtable-的初始化" class="headerlink" title="jtable 的初始化"></a>jtable 的初始化</h3><p>常用的三种初始化方式:</p>
<ul>
<li>JTable()</li>
<li>JTable(int a,int b) //a 行 b 列</li>
<li>JTable(Object a[][],Object b[]) //a 存放数据表,b 存放列名</li>
</ul>
<p>一般我采用的是 new jtable(Object a[][],Object b[])这样的初始化方式.</p>
<h4 id="json2jtable"><a href="#json2jtable" class="headerlink" title="json2jtable"></a>json2jtable</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">JSONObject js &#x3D; new JSONObject();
		js &#x3D; JSON.parseObject(s1);


		HashSet&lt;String&gt; row &#x3D;new HashSet&lt;String&gt;();
		List&lt;String&gt; cols &#x3D; new ArrayList&lt;&gt;(js.keySet());
		List&lt;String&gt; rows &#x3D; new ArrayList&lt;&gt;(js.getJSONObject(cols.get(0)).keySet());



		a &#x3D; new Object[rows.size()][cols.size()];

		for (int i &#x3D; 0; i &lt; cols.size(); i++) &#123;
			JSONObject eachcol &#x3D; js.getJSONObject(cols.get(i));
			for (int j &#x3D; 0; j &lt; rows.size(); j++) &#123;
&#x2F;&#x2F;				System.out.println(eachcol.getString(rows.get(j)));
				a[j][i] &#x3D; eachcol.getString(rows.get(j));
			&#125;
		&#125;

		tb &#x3D; new JTable(a,cols.toArray());

		Container con &#x3D; getContentPane();

		getContentPane().add(new JScrollPane(tb),BorderLayout.CENTER);

		tb.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);

		setTitle(name);
		setSize(10000,10000);
		setVisible(true);
		validate();
		setDefaultCloseOperation(HIDE_ON_CLOSE);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="csv2jtable"><a href="#csv2jtable" class="headerlink" title="csv2jtable"></a>csv2jtable</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Object[] columnnames;
		CSVReader CSVFileReader &#x3D; null;
		try &#123;
			CSVFileReader &#x3D; new CSVReader(new FileReader(filepath));
		&#125; catch (FileNotFoundException e) &#123;
			&#x2F;&#x2F; TODO Auto-generated catch block
			e.printStackTrace();
		&#125;
		List myEntries &#x3D; null;
		try &#123;
			myEntries &#x3D; CSVFileReader.readAll();
		&#125; catch (IOException | CsvException e) &#123;
			&#x2F;&#x2F; TODO Auto-generated catch block
			e.printStackTrace();
		&#125;
		columnnames &#x3D; (String[]) myEntries.get(0);
		DefaultTableModel tableModel &#x3D; new DefaultTableModel(columnnames, myEntries.size()-1);
		int rowcount &#x3D; tableModel.getRowCount();
		for (int x &#x3D; 0; x&lt;rowcount+1; x++)
		&#123;
		    int columnnumber &#x3D; 0;
		    &#x2F;&#x2F; if x &#x3D; 0 this is the first row...skip it... data used for columnnames
		    if (x&gt;0)
		    &#123;
		        for (String thiscellvalue : (String[])myEntries.get(x))
		        &#123;
&#x2F;&#x2F;		        	System.out.println(thiscellvalue);
		            tableModel.setValueAt(thiscellvalue, x-1, columnnumber);
		            columnnumber++;
		        &#125;
		    &#125;
		&#125;
		System.out.println(tableModel);
		return tableModel;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="jtextarea2jtable"><a href="#jtextarea2jtable" class="headerlink" title="jtextarea2jtable"></a>jtextarea2jtable</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">if (e.getDocument() &#x3D;&#x3D; textPane.getDocument()) &#123;
					Document doc &#x3D; e.getDocument();
					String str &#x3D; null;
					try &#123;
						str &#x3D; doc.getText(0, doc.getLength());
					&#125; catch (BadLocationException e1) &#123;
						&#x2F;&#x2F; TODO Auto-generated catch block
						e1.printStackTrace();
					&#125;
					arr &#x3D; str.split(&quot;\\s+&quot;);

					if (arr.length %2 &#x3D;&#x3D; 0) &#123;
						Object [] columnnames &#x3D; &#123;&quot;处方名&quot;,&quot;药名&quot;&#125;;
						Object a[][];

						a &#x3D; new Object[arr.length&#x2F;2][2];

						for (int j &#x3D; 0; j &lt; arr.length; j++) &#123;
							a[j&#x2F;2][j%2] &#x3D; arr[j];
						&#125;

						table_1 &#x3D; new JTable(a,columnnames);
						table_1.setBounds(86, 285, 678, 251);
						table_1.setEnabled(false);
						jContentPane.add(table_1);
						table_1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
					&#125;

				&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="一些属性"><a href="#一些属性" class="headerlink" title="一些属性"></a>一些属性</h3><p>Q:如何添加滚动条?<br>A:见<a href="http://www.harumonia.top/index.php/archives/164/">(一)</a></p>
<p>Q:表格想变为不可选?<br>A: JTable.setEnabled(false);</p>
<p>Q:表格变为只读?<br>A: 重载 JTable.isCellEditable(row, column), 令其始终返回 false.</p>
<h2 id="监听设置"><a href="#监听设置" class="headerlink" title="监听设置"></a>监听设置</h2><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>监听 textarea 中输入的值,并在下方生成对应的数据表</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">textPane.getDocument().addDocumentListener(new DocumentListener() &#123;

			@Override
			public void removeUpdate(DocumentEvent e) &#123;
				&#x2F;&#x2F; TODO Auto-generated method stub

			&#125;

			@Override
			public void insertUpdate(DocumentEvent e) &#123;
				&#x2F;&#x2F; TODO Auto-generated method stub
				if (e.getDocument() &#x3D;&#x3D; textPane.getDocument()) &#123;
					Document doc &#x3D; e.getDocument();
					String str &#x3D; null;
					try &#123;
						str &#x3D; doc.getText(0, doc.getLength());
					&#125; catch (BadLocationException e1) &#123;
						&#x2F;&#x2F; TODO Auto-generated catch block
						e1.printStackTrace();
					&#125;
					arr &#x3D; str.split(&quot;\\s+&quot;);

					if (arr.length %2 &#x3D;&#x3D; 0) &#123;
						Object [] columnnames &#x3D; &#123;&quot;处方名&quot;,&quot;药名&quot;&#125;;
						Object a[][];

						a &#x3D; new Object[arr.length&#x2F;2][2];

						for (int j &#x3D; 0; j &lt; arr.length; j++) &#123;
							a[j&#x2F;2][j%2] &#x3D; arr[j];
						&#125;

						table_1 &#x3D; new JTable(a,columnnames);
						table_1.setBounds(86, 285, 678, 251);
						table_1.setEnabled(false);
						jContentPane.add(table_1);
						table_1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
					&#125;

				&#125;
			&#125;

			@Override
			public void changedUpdate(DocumentEvent e) &#123;
				&#x2F;&#x2F; TODO Auto-generated method stub

			&#125;
		&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3><ul>
<li>removeUpdate 当删除发生时</li>
<li>insertUpdate 当插入发生时</li>
<li>changedUpdate 当发生变化时</li>
</ul>
<p>处于性能考虑,一般选择只使用 insert</p>
<p><strong>这里涉及到一个问题,就是正则化是在监听时完成还是在上传时完成.</strong></p>
<p>处于性能考虑,我选择再上传时统一进行正则化.</p>
<p><img src="https://i.loli.net/2019/11/21/PGYbzCSKhE3yLrQ.gif" alt="Kapture 2019-11-21 at 18.57.08.gif" loading="lazy"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><blockquote>
<p>就这样，看似徒劳的事，最终却结出了果实，一件失败的事情会变成对人类的大声疾呼，要求人类将精力集中到还未完成的事业当中去；在卓越的对抗中，壮烈的死亡可以生出新的生命，一次毁灭也可以生出攀登高峰的奋起意志。因为在偶然的成就和轻易获得的成功中，只有雄心壮志才能点燃火热的心，一个人虽然在与不可战胜的、占据优势的命运的斗争中毁灭了自己，但他的心灵却变得无比高尚。这些在所有时代都最最伟大的悲剧，作家可能只会偶尔创作，但现实生活却早已将其演绎了千百遍。</p>
</blockquote>
<pre><code>     -- 茨威格&lt;人类群星闪耀时&gt;</code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java课程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Java课设中的问题以及解决方案(三)</title>
    <url>/2019-11-24-Course-Design-of-Java-QS-3/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这次进行 Java 的大作业,虽然是一拖三,不过还是准备做得漂亮一点.Java 还是很有趣的,并且可能以后工作室项目能用得到.</p>
<p>嗯,如果做得好了,就请自己去搓一顿!</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul>
<li>需求分析</li>
<li>架构</li>
<li>界面设计</li>
</ul>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>这是一个项目的开始,课程设计(非游戏类)应该是要去解决一个实际的问题,而不是单纯的应付差事.<br>这一次的项目需求与暑假项目相同,所以就不做赘述.</p>
<h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p>项目架构是衡量一个项目的质量的重要指标.逻辑清晰的项目结构可以省去开发过程中的很多烦恼,同时,也能够极大地增加协同开发的效率.</p>
<p>我这次使用的是比较传统的 mvc 架构.</p>
<ul>
<li>最上面的一层，是直接面向最终用户的”视图层”（View）。它是提供给用户的操作界面，是程序的外壳。</li>
<li>最底下的一层，是核心的”数据层”（Model），也就是程序需要操作的数据或信息。</li>
<li>中间的一层，就是”控制层”（Controller），它负责根据用户从”视图层”输入的指令，选取”数据层”中的数据，然后对其进行相应的操作，产生最终结果。</li>
</ul>
<p>当然也可以将 mvc 混淆,都合并在少数的文件当中,事实上我在完成 C#的课程设计的时候就是这么做的,这样的后果也很明显,我现在已经看不懂我的 C#课设了…</p>
<p>当然,便于阅读维护只是 <strong>MVC 模式下思路清晰</strong> 的一个小小的伴生好处.<br>随着项目的膨胀,越来越多的功能涌入,mvc 甚至还需要再次进行划分.这个时候,你是选择凭借自己的记忆去记录各个接口之间的关系,还是寄托于 MVC 架构,简单明了地管理自己的项目呢?</p>
<p>再说一说协作开发的效率.<br>协作开发这个词估计不会存在于我四年大学生活之中了.不过我还是可以憧憬一下的.<br>mvc 模式下,各个模块功能明确,责任关系清晰,任务可以以极低的耦合度准确地分配到每个人的头上,如果,我是说如果,一群水平相当的开发者在这种模式下齐头并进,开发效率无疑是十分可怕的.</p>
<p>推而广之,这种模式的变体可以应用到社会的很多合作模式中…emmmm,好吧,这只是一篇讲技术的文章,就这样吧.</p>
<p><del>现在回头看看暑期的项目,一个人能开发到这个地步,我还是有点小小的得意的.</del></p>
<h3 id="界面设计"><a href="#界面设计" class="headerlink" title="界面设计"></a>界面设计</h3><p>每一个直男的噩梦,唉…暂且先挂起来吧…</p>
<h2 id="数据库二三事"><a href="#数据库二三事" class="headerlink" title="数据库二三事"></a>数据库二三事</h2><p>在<a href="http://www.harumonia.top/index.php/archives/167/">Java 课设中的问题以及解决方案(二)</a><br>和<a href="http://www.harumonia.top/index.php/archives/164/">Java 课设中的问题以及解决方案(一)</a><br>中,都有对数据库连接的一些叙述.不过都是一些比较粗浅的尝试.</p>
<p>在进行登录&amp;注册模块的开发时,我对数据库进行了比较深入的了解和操作.</p>
<h3 id="prepareStatement-和-createStatement"><a href="#prepareStatement-和-createStatement" class="headerlink" title="prepareStatement 和 createStatement"></a>prepareStatement 和 createStatement</h3><p>prepareStatement 会先初始化 SQL，先把这个 SQL 提交到数据库中进行预处理，多次使用可提高效率.</p>
<p>createStatement 不会初始化，没有预处理，每次都是从 0 开始执行 SQL.<br>两者这代码上有显著的区别.</p>
<p>e.g.</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; prepareStatement
ResultSet rs &#x3D; null;
String sql &#x3D; &quot;select * from users where  username&#x3D;? and userpwd&#x3D;?&quot;;
PreparedStatement ps &#x3D; con.prepareStatement(sql);
ps.setString(1,username);
pstmt.setString(2, userpwd);
&#x2F;&#x2F;prepareStatement.setString() 给sql中的&quot;?&quot;赋值,这里将第一个?设置为username,第二个?设置为userpwd

&#x2F;&#x2F; createStatement
ResultSet rs &#x3D; null;
String sql &#x3D; &quot;select * from users where  username&#x3D; &#39;&quot;+username+&quot;&#39; and userpwd&#x3D;&#39;&quot;+userpwd+&quot;&#39;&quot;;
createStatement ps &#x3D; con.prepareStatement(sql);
rs &#x3D; stmt.executeQuery(sql);
&#x2F;&#x2F; createStatement没有?形式的格式化,直接使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>格式化的方法让我们在编写代码时思路更加清楚,代码的形式也更加的优雅.(试想一下,上述如果不是 2 个参数,而是十多个参数,那么 create 方法将会有多少个+和”)</p>
<p>同时,预编译的方法还可以有效地抵御 sql 注入攻击.</p>
<p>e.g.</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String sql &#x3D; &quot;select * from user where username&#x3D; &#39;zxj&#39; and userpwd&#x3D;&#39;&quot;+varpasswd+&quot;&#39;&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果用户在密码栏中输入 <code>&#39;or &#39;1&#39; = 1&#39;;drop table book;</code> 那么就构成了这样一条查询语句</p>
<pre class="line-numbers language-SQL" data-language="SQL"><code class="language-SQL">select * from user where username&#x3D; &#39;zxj&#39; and userpwd&#x3D;&#39;or &#39;1&#39; &#x3D; 1&#39;;
drop table usr;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这样的查询语句毫无疑问是成立并且是可以通过执行的.<br>所以,用户可以通过这种方法,在不获取数据库账号密码的情况下,删除你的 usr 表!~</p>
<p>而如果你使用<code>prepareStatement</code>,用 setString 的方法传递参数,再进行一次预编译,就可以有效地避免这种困扰.</p>
<p><strong>所以说,无论从代码的可读性和可维护性，还是从提高性能方面，或者说避免攻击方面，都应该使用 prepareStatement.</strong></p>
<h3 id="hash-加密"><a href="#hash-加密" class="headerlink" title="hash 加密"></a>hash 加密</h3><p>密码的明文传递一直是为业界所诟病的事情.<br>在进行暑假项目工作的时候,涛哥教我使用 hash 加密一次密码.</p>
<p><del>牢骚话:本来嘛,课设没必要做到这个地步,不过今天正好涛哥出国,这之后一年才能回来,所以传承一下他严谨的工作态度,算是一个纪念吧</del></p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static String getSHA(String input) &#123;
    MessageDigest md &#x3D; MessageDigest.getInstance(&quot;SHA-256&quot;);

    byte[] messageDigest &#x3D; md.digest(input.getBytes());

    BigInteger no &#x3D; new BigInteger(1, messageDigest);

    String hashtext &#x3D; no.toString(16);

    while (hashtext.length() &lt; 32) &#123;
        hashtext &#x3D; &quot;0&quot; + hashtext;
    &#125;

    return hashtext;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="datetime-处理"><a href="#datetime-处理" class="headerlink" title="datetime 处理"></a>datetime 处理</h3><p>数据库的 datetime 数据是 xxxx-xx-xx xx : xx : xx 形式的,所以就用了一个比较土的办法…</p>
<pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Date date&#x3D;new Date();
String date &#x3D; String.format(&quot;%tF%n&quot;, date)+&quot; &quot;+String.format(&quot;%tT%n&quot;,date)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>另外,关于 string 的格式化,推荐一篇<a href="https://blog.csdn.net/lonely_fireworks/article/details/7962171">博客</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>等待,并心怀希望.</li>
</ul>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java课程设计</tag>
      </tags>
  </entry>
  <entry>
    <title>图像处理课堂习题整理</title>
    <url>/2019-11-25-Image-Processing-Review/</url>
    <content><![CDATA[<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B01.jpg?Expires=1602237641&" alt="图像处理-2.jpg" loading="lazy"></p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B02.jpg?Expires=1602237653&" alt="图像处理-3.jpg" loading="lazy"></p>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>图像处理</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统一轮复习整理(文档部分)</title>
    <url>/2019-11-30-some-doc-of-OS-review/</url>
    <content><![CDATA[<h1 id="概念集-重在概念的对比分析"><a href="#概念集-重在概念的对比分析" class="headerlink" title="概念集(重在概念的对比分析)"></a>概念集(重在概念的对比分析)</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><p>操作系统是一组能有效地组织和管理计算机硬件和软件资源，合理地对各类作业进行调度，以及方便用户使用的程序的集合。</p>
<h3 id="分时系统"><a href="#分时系统" class="headerlink" title="分时系统"></a>分时系统</h3><p>允许多个用户同时通过自己的终端，以交互方式使用计算机，共享主机中的资源。</p>
<h3 id="并行与并发"><a href="#并行与并发" class="headerlink" title="并行与并发"></a>并行与并发</h3><p>并行指两个或多个事件在 <strong>同一时刻</strong> 发生<br>并发指两个或多个事件在 <strong>同一时间间隔内</strong> 发生。</p>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>在系统中能独立运行并作为资源分配的基本单位，由一组及其指令、数据和堆栈等组成，是一个能独立运行的活动实体。</p>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="进程-amp-amp-程序"><a href="#进程-amp-amp-程序" class="headerlink" title="进程 &amp;&amp; 程序"></a>进程 &amp;&amp; 程序</h3><table>
<thead>
<tr>
<th>程序</th>
<th>进程</th>
</tr>
</thead>
<tbody><tr>
<td>程序是指令的有序集合，其本身没有任何运行的含义，是一个 <strong>静态</strong> 的概念</td>
<td>进程是程序在处理机上的一次执行过程， 它是一个 <strong>动态</strong> 的概念</td>
</tr>
<tr>
<td>程序可以作为一种软件资料长期存在，是 <strong>永久</strong> 的</td>
<td>进程是有一定生命期，是 <strong>暂时</strong> 的</td>
</tr>
<tr>
<td>同一程序同时运行于若干个数据集合上， 它将属于若干个不同的进程。也就是说同一程 序可以对应多个进程</td>
<td>为了能使程序并发执行，并且可以对并发 执行的程序加以描述和控制，引入“进程”的 概念</td>
</tr>
</tbody></table>
<h3 id="进程控制块-PCB"><a href="#进程控制块-PCB" class="headerlink" title="进程控制块 PCB"></a>进程控制块 PCB</h3><p>使参与并发执行的每个程序(含数据)都能独立运行，在操作系统中必须 为之配置一个专门的数据结构，称为进程控制块</p>
<p>利用 PCB 来描述进程的基本情况和活动过程，进而控制和管理进程。</p>
<h3 id="创建状态-终止状态"><a href="#创建状态-终止状态" class="headerlink" title="创建状态 终止状态"></a>创建状态 终止状态</h3><h4 id="创建状态"><a href="#创建状态" class="headerlink" title="创建状态"></a>创建状态</h4><p>创建工作尚未完成，进程不能被调度运行</p>
<p>对于处于创建状态的进程，获得了其所必需的资源，以及对其 PCB 初始化工作完成后，进程状态便可由 <strong>创建状态转入就绪状态</strong></p>
<h4 id="终止状态"><a href="#终止状态" class="headerlink" title="终止状态"></a>终止状态</h4><p>进程到达自然结束点;出现 无法克服的错误;被操作系 统所终结;被其他有终止权 的进程终结</p>
<p>进入终止态的进程以后不能再执行，但在操作系统中依然保留一个记录，其中保存状态码和一 些计时统计数据，供其他进程收集。</p>
<h3 id="管程与管道的区别"><a href="#管程与管道的区别" class="headerlink" title="管程与管道的区别"></a>管程与管道的区别</h3><h4 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h4><p>管程定义了一个数据结构和能为并发进程所执行的一组操作，这组操 作能同步进程和改变管程中的数据。</p>
<h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><ul>
<li>“管道”是指用于连接一个读进程和一个写进程以实现他们之间通信的一个共享文件</li>
<li>向管道提供输入的发送进程以字符流形式将大量的数据送入管道;</li>
<li>接受管道输出的接收进程则从管道中接收数据</li>
</ul>
<h3 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h3><p>在 OS 中引入 <strong>进程</strong> 的目的是为了使多个程序能并发执行，以提高资源利 用率和系统吞吐量<br>在操作系统中引入 <strong>线程</strong> ，则是为了减少程序在并发执行时多付出的时空 开销，是 OS 具有更好的并发性</p>
<p><img src="https://i.loli.net/2019/12/02/I2ErsULi18MSyTD.png" alt="5E29FE42-A2E2-4C79-9CA4-AC84AD93B906.png" loading="lazy"></p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h3><h4 id="高级-作业-调度"><a href="#高级-作业-调度" class="headerlink" title="高级(作业)调度"></a>高级(作业)调度</h4><p>每个用户创建进程的初始状态是“创建”，处于新建状态的进程一般首先被放到外存的进程池中，当内存中 进程的数量没有达到最多进程数时，操作系统的调度程序才从创建状态选择一个进入内存并转换为就绪状态</p>
<p>这种从“创建”状 态转换到“就绪” 状态的操作就是高 级调度，也称为作 业调度或长程调度</p>
<h4 id="中级-内存-调度"><a href="#中级-内存-调度" class="headerlink" title="中级(内存)调度"></a>中级(内存)调度</h4><p>提高内存利用率和系统吞吐量</p>
<h4 id="低级-进程-调度"><a href="#低级-进程-调度" class="headerlink" title="低级(进程)调度"></a>低级(进程)调度</h4><p>决定就绪队列中的哪个进程应获得 处理机，并由分派程序将处理机分 配给被选中的进程。</p>
<h3 id="高响应比优先-HRRN"><a href="#高响应比优先-HRRN" class="headerlink" title="高响应比优先(HRRN)"></a>高响应比优先(HRRN)</h3><p><img src="https://i.loli.net/2019/12/02/aEUP3QoWtHFL2lp.png" alt="36FD49E7-E58E-4B30-A1FA-1C64B39DD238.png" loading="lazy"></p>
<h3 id="非抢占式"><a href="#非抢占式" class="headerlink" title="非抢占式"></a>非抢占式</h3><p>优点:实现简单，系统开销小 适用于大多数批处理系统<br>缺点:不能用于分时系统和大多数实时系统</p>
<h3 id="各调度算法比较"><a href="#各调度算法比较" class="headerlink" title="各调度算法比较"></a>各调度算法比较</h3><p><img src="https://i.loli.net/2019/12/02/IMgEjKOBJvL8DXP.png" alt="B2B35730-43CC-4F14-901D-B111F0ABDB43.png" loading="lazy"></p>
<h3 id="临界资源"><a href="#临界资源" class="headerlink" title="临界资源"></a>临界资源</h3><p>临界资源是不可剥夺性资源，它可能是硬件，也可能是软件</p>
<h3 id="信号量的应用"><a href="#信号量的应用" class="headerlink" title="信号量的应用"></a>信号量的应用</h3><p><img src="https://i.loli.net/2019/12/02/UsirmtAM2OpjCgE.png" alt="截屏2019-11-27下午9.31.34.png" loading="lazy"></p>
<p><img src="https://i.loli.net/2019/12/02/D4bGlPvXRhI3F5O.png" alt="截屏2019-11-27下午9.32.33.png" loading="lazy"></p>
<h3 id="管程-1"><a href="#管程-1" class="headerlink" title="管程"></a>管程</h3><h4 id="信号量机制和管程的比较"><a href="#信号量机制和管程的比较" class="headerlink" title="信号量机制和管程的比较"></a>信号量机制和管程的比较</h4><p><img src="https://i.loli.net/2019/12/02/X8d9GZ6EA1ziSbh.png" alt="截屏2019-11-27下午9.34.33.png" loading="lazy"></p>
<h4 id="管程和进程比较"><a href="#管程和进程比较" class="headerlink" title="管程和进程比较"></a>管程和进程比较</h4><p><img src="https://i.loli.net/2019/12/02/sOIoyvWRUEalTf3.png" alt="0A3D146A-68A6-44F4-86BF-6C9D39708E93.png" loading="lazy"></p>
<h3 id="SRT"><a href="#SRT" class="headerlink" title="SRT"></a>SRT</h3><p>软实时操作系统能让绝大多数任务在确定时间内完成<br>软实时操作系统对时间的限制不是十分苛刻，响应的时间可以相对延迟，即未超过最后规定时间太多的范围内，其结果都是可以接受的，不会产生严重的后果。</p>
<h3 id="HRT"><a href="#HRT" class="headerlink" title="HRT"></a>HRT</h3><p>硬实时操作系统必须使任务在确定的时间内完成。<br>对于硬实时操作系统而言，不仅要求各个任务能够运行得到正确的结果，同时还必须在限定的时间内完成，这个时间是由系统本身确定的，这比软实时操作系统的时间约束条件严格了许多。例如，在航天领域的嵌入式实时操作系统中，如果在规定的时间内未能得出所希望的运算结果，其产生的后果将是十分严重的。</p>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>如果一组进程中的每一个进程都在等待仅由该组进程中的 其他进程才能引发的事件，那么该组进程是死锁的。</p>
<h3 id="避免死锁和预防死锁的区别"><a href="#避免死锁和预防死锁的区别" class="headerlink" title="避免死锁和预防死锁的区别"></a>避免死锁和预防死锁的区别</h3><p>死锁的避免与死锁防止策略不同，它不 对进程申请资源加任何限制，而是对进 程提出的每一次资源请求进行动态检查， 并根据检查结果决定是否分配资源以满 足进程的请求。由于采用了动态的资源 分配策略，所以资源利用率比死锁的防 止办法高。</p>
<h2 id="第四-五章"><a href="#第四-五章" class="headerlink" title="第四\五章"></a>第四\五章</h2><h3 id="高速缓存-amp-amp-磁盘缓存"><a href="#高速缓存-amp-amp-磁盘缓存" class="headerlink" title="高速缓存 &amp;&amp; 磁盘缓存"></a>高速缓存 &amp;&amp; 磁盘缓存</h3><p>磁盘缓存与高速缓存不同，它本身并不 是一种实际存在的存储器，而是利用主 存中的部分存储空间暂时存放从磁盘中 读出(或写入)的信息。</p>
<p><em>主存也可以看做是辅存的高速缓存。</em></p>
<h3 id="静态地址映射与动态地址映射的区别"><a href="#静态地址映射与动态地址映射的区别" class="headerlink" title="静态地址映射与动态地址映射的区别"></a>静态地址映射与动态地址映射的区别</h3><p><img src="https://i.loli.net/2019/12/02/BJpTsg41v5z9lPd.png" alt="7B96EAA9-61B8-4F36-A3B9-D634B5516FAE.png" loading="lazy"></p>
<h3 id="动态分区与固定分区"><a href="#动态分区与固定分区" class="headerlink" title="动态分区与固定分区"></a>动态分区与固定分区</h3><p><img src="https://i.loli.net/2019/12/02/JXi23S5rjgmIbd1.png" alt="DB6F67FF-70B7-402A-91C2-FA4F457E5A63.png" loading="lazy"></p>
<h3 id="基于顺序搜索的动态分区分配算法比较"><a href="#基于顺序搜索的动态分区分配算法比较" class="headerlink" title="基于顺序搜索的动态分区分配算法比较"></a>基于顺序搜索的动态分区分配算法比较</h3><p><img src="https://i.loli.net/2019/12/02/QqcHfhgAV1pwaM8.png" alt="04C6CED2-080F-4A4A-9F49-E30E1ACD663D.png" loading="lazy"></p>
<h3 id="分页和分段"><a href="#分页和分段" class="headerlink" title="分页和分段"></a>分页和分段</h3><p><img src="https://i.loli.net/2019/12/02/LB1ntRzSCmdGHwN.png" alt="3AEADEF6-8C87-4072-A9E6-4629A10EB119.png" loading="lazy"></p>
<h1 id="错题集"><a href="#错题集" class="headerlink" title="错题集"></a>错题集</h1><h2 id="第二章-1"><a href="#第二章-1" class="headerlink" title="第二章"></a>第二章</h2><p><strong>系统调用</strong> 是专门供应程序使用的一种界面.</p>
<p><strong>分时</strong> 操作系统允许在一台主机上同时连接多台终端.</p>
<p>错误叙述:管程只能用于实现进程的互斥.</p>
<p>生产者-消费者问题用于解决 <strong>多进程之间的同步和互斥问题</strong></p>
<p>撤销父进程,应同时撤销子进程(×)<br>子进程只能使用父进程拥有资源的子集(√)</p>
<p>假设单处理机系统中有 N 个进程,运行的进程最多 <strong>1</strong> 个,最少 <strong>0</strong> 个;就绪进程最多 <strong>N-1</strong> 个,最少 <strong>0</strong> 个;阻塞进程最多 <strong>N</strong> 个,最少 <strong>0</strong> 个.</p>
<h2 id="第三章-1"><a href="#第三章-1" class="headerlink" title="第三章"></a>第三章</h2><p><strong>先来先服务算法</strong> 有利于 CPU 繁忙型的作业,而不利于 I/O 繁忙型的作业.</p>
<p>假定系统进程锁清秋的一次 I/O 操作完成后,将使进程从 <strong>阻塞状态变为就绪状态</strong> .</p>
<p>( <strong>x</strong> ) 进程调用 wait(s)表示要获得一个信号量.如果 s&gt;=0,则该进程可以获得一个 s 信号量,继续运行.</p>
<p><strong>死锁状态一定是不安全状态</strong></p>
<p>关于资源分配图:<br>圆圈节点表示 <strong>进程</strong>, 矩形框表示 <strong>资源</strong> .</p>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><p>用户程序中的地址(如 C 程序中的指针)被称为是 <strong>逻辑地址</strong> .</p>
<p>静态重定位的实际是 <strong>程序装入时</strong> .<br>PS.动态重定位:执行时<br>动态分区:作业装入时</p>
<p>动态重定位过程依赖于:可重定位装入程序,重定位寄存器,地址变换机构</p>
<p><strong>首次适应法</strong> 最有可能使得高地址空间变成为大的空闲区.</p>
<p>采用 <strong>分段式存储管理</strong> 不会产生内部碎片.</p>
<p>动态重定位的地址变换工作是在 <strong>每一条指令执行时</strong> 完成的.</p>
<p><strong>分区</strong> 管理方式要求作业占用连续的存储空间.</p>
<p>多级页表优点 : <strong>减少页表所占的连续内存空间</strong></p>
<p>在段页式分配中,CPU 每次从内存中取一次数据需要 <strong>3 次</strong> 访问内存.</p>
<h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><p>虚拟存储器 <strong>只能基于非连续分配技术</strong></p>
<p><img src="https://i.loli.net/2019/12/02/R9XyI3jnFUkEabZ.png" alt="7A2843C8-34A3-463E-91A5-D9127E2E2E04.png" loading="lazy"></p>
<p><img src="https://i.loli.net/2019/12/02/bUE19k724LXcRnr.png" alt="6F0017F3-DBED-4B71-AA9C-DF77809EA4D6.png" loading="lazy"></p>
<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><p>在缓冲池方式下,为了有效地管理,需形成 <strong>空闲\输入\输出</strong> 等缓冲区队列.</p>
<h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><p>文件系统的主要组成部分是 <strong>文件及管理文件的软件</strong></p>
<p>文件管理实际上是管理 <strong>辅助存储空间</strong></p>
<h1 id="选题集"><a href="#选题集" class="headerlink" title="选题集"></a>选题集</h1><h2 id="第二章-2"><a href="#第二章-2" class="headerlink" title="第二章"></a>第二章</h2><p>导致创建新进程的操作:</p>
<ul>
<li>用户登陆成功</li>
<li>启动程序执行</li>
</ul>
<p>在实施系统中,当系统中的内存资源不够满足执行紧迫任务的需求时,操作系统可能会将正在运行的进程变为 <strong>静止就绪</strong> 状态.</p>
<p>所谓临界区是指 <strong>一段程序</strong>.</p>
<p>在生产者消费者问题中,若 10 个生产者,5 个消费者共享容量为 8 的缓冲区,则互斥使用缓冲区的信号量的初值为 <strong>1</strong> .</p>
<blockquote>
<p>双方互斥使用，信号量初值为 1</p>
</blockquote>
<p>在引入线程的操作系统中,吧 <strong>线程</strong> 作为调度和分配的基本单位,而吧 <strong>进程</strong> 作为资源拥有的基本单位.</p>
<h2 id="第三章-2"><a href="#第三章-2" class="headerlink" title="第三章"></a>第三章</h2><p>决定一个程序是否能占用处理机执行,是由 <strong>进程调度</strong> 机构决定.</p>
<h2 id="第四章-1"><a href="#第四章-1" class="headerlink" title="第四章"></a>第四章</h2><p><img src="https://i.loli.net/2019/12/02/oKj5XTE3YhkcAJw.png" alt="954E0751-0736-4973-97B3-F45425F23428.png" loading="lazy"></p>
<p>页表是存放在内存中的，CPU 要存取一个数据，需访问主存 <strong>两次</strong></p>
<p>为了提高存取速度，在地址变换机构中增设一组寄存器，用来存放当前访问 的那些页表，把存放在高速缓冲寄存器中的页表叫 <strong>快表</strong> ，这个高速缓冲寄存 器又叫 <strong>联想存贮器</strong></p>
<p><img src="https://i.loli.net/2019/12/02/bp7tucBEDoNIXnP.png" alt="A82A7ED9-3959-40A8-BBE4-4C7BB06CDB54.png" loading="lazy"></p>
<p><img src="https://i.loli.net/2019/12/02/WyxjYL9MagQ1eVA.png" alt="A43E33A0-62B1-49A8-AF95-A4E12F2A198C.png" loading="lazy"></p>
<p><img src="https://i.loli.net/2019/12/02/sISvETeXb1gfzV7.png" alt="D13117D7-5C62-4065-AC78-81FC9EEBECC7.png" loading="lazy"></p>
<h2 id="第六章-1"><a href="#第六章-1" class="headerlink" title="第六章"></a>第六章</h2><p><strong>系统调用</strong> 是应用程序取得 OS 所有服务的唯一途径</p>
<p>启动磁盘后.对此盘读/写信息的最小单位是 <strong>物理块</strong></p>
<p>虚拟设备技术实现的是 <strong>独占设备模拟共享设备</strong></p>
<p>在多进程的并发系统中,肯定不会因为竞争下列资源而产生死锁的是 <strong>磁盘</strong></p>
<h1 id="概念重点"><a href="#概念重点" class="headerlink" title="概念重点"></a>概念重点</h1><h2 id="第二章-3"><a href="#第二章-3" class="headerlink" title="第二章"></a>第二章</h2><p>进程状态</p>
<p>生产者-消费者</p>
<p><img src="https://i.loli.net/2019/12/02/pjQFTia87hEOGWn.png" alt="3DA28E45-DCD3-4142-A950-8D7FAFA712FD.png" loading="lazy"></p>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>软件开发本质论 笔记</title>
    <url>/2019-12-14-The-Nature-of-Software-Development-note/</url>
    <content><![CDATA[<p>[美]Ron Jeffries</p>
<h2 id="价值"><a href="#价值" class="headerlink" title="价值"></a>价值</h2><p>80/20 法则:每个人想要的功能特性可能都不相同,但是没有人想要所有的功能特性.</p>
<p>首先推出能够产生价值的功能特性.</p>
<p>引导团队构建不仅对我们有意义,同时对用户也有意义的特性,即, <strong>最小可市场化功能特性</strong><br>与最小可市场化功能特性相比,在更细的粒度上提供商业方向更能使我们受益.</p>
<p>价值的最大化在于频繁交付小的\以价值为中心的功能特性.</p>
<a id="more"></a>

<h3 id="价值是什么"><a href="#价值是什么" class="headerlink" title="价值是什么"></a>价值是什么</h3><p>简单地说,价值就是”我们想要的东西”.<br>所以,在不同的情境下,价值的侧重不同.</p>
<h3 id="如何衡量价值"><a href="#如何衡量价值" class="headerlink" title="如何衡量价值"></a>如何衡量价值</h3><p>价值的衡量具有一定的主观性,纯粹以数据衡量价值是不可取的.</p>
<ol>
<li>我们知道的并非真正的数据</li>
<li>大的差别很重要,小的差别则并不重要</li>
<li>不同类型的价值不具备可比性</li>
</ol>
<p>你的想法? &lt;==&gt; 数据?<br>团队协商,达成共识?</p>
<blockquote>
<p>Ron 认为,通过数值来表示价值可能会是我们滑入深渊.因为数值往往将多个衡量指标无序地混杂在一起.<br>同时,他指出 <strong>大多数与金钱相关的衡量指标在时间上都落后</strong> .</p>
</blockquote>
<p><em>所有的衡量指标的真正作用都是帮助产品推动人\项目干系人\以及团队成员理解什么是真正的价值.</em></p>
<h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><p>传统软件开发:分析-设计-编码-测试<br>根据功能特性开发:更加地灵活,更加地高效</p>
<blockquote>
<p>这有点类似于敏捷开发,不过以前跟某人交流的时候,他指出国内大部分的公司目前所谓的敏捷开发都只是有形而无实.</p>
</blockquote>
<h3 id="组建强大的团队"><a href="#组建强大的团队" class="headerlink" title="组建强大的团队"></a>组建强大的团队</h3><p><strong>确保其团队成员知道要做什么,然后让他们自己去搞清楚怎么做</strong></p>
<ul>
<li>目的来源于具体的业务:填鸭式地直接告知解决方法,而不是通过主动思考,整个团队将需要更长的时间获得明确的目标感.</li>
<li>自主能够给整个团队带来责任感</li>
<li>专精源自迭代过程</li>
</ul>
<p><strong>一言以蔽之,在自主的专精团队中,每个人都清楚团队的目的.</strong></p>
<blockquote>
<p>团队成员的能力波动值太大的话,是灾难性的.</p>
</blockquote>
<h3 id="自然开发的管理之道"><a href="#自然开发的管理之道" class="headerlink" title="自然开发的管理之道"></a>自然开发的管理之道</h3><p>跨职能团队拥有交付软件的每一个增量版本所需的全部技术与能力,团队成员能够自己进行测试,自己编写文档,所有与软件开发直接相关的事情都可以有他们去做.越是接近这样的理想状态,所需的协作配合就越少.</p>
<p>五大管理要素:</p>
<ul>
<li>计划</li>
<li>组织</li>
<li>人员配备</li>
<li>领导</li>
<li>控制</li>
</ul>
<p>制定计划:<br>无论是长期计划还是短期计划,核心都是从高价值的功能特性到低价值的功能特性.<br>管理人员要随时关注计划的进展,同时,高层计划者和管理者要十分清楚项目有哪些功能特性,同时要求产品推动人通过演示实际可用的软件来展现这些功能特性.<br><strong>计划的根本目的是为了取得更好地结果.so,随时关注价值的变化,并适当地对计划进行调整</strong></p>
<p>自然软件开发的方法倡导将权力授予实际完成工作的人.</p>
<blockquote>
<p>放权是一个很艰难的抉择,这需要建立在有足够的信任,或者自己有绝对的权利之上,即,相信他们能够做好,当然,如果最不好,我能有权利把你们开除了.缺一不可.</p>
</blockquote>
<h3 id="根据功能特性组织团队"><a href="#根据功能特性组织团队" class="headerlink" title="根据功能特性组织团队"></a>根据功能特性组织团队</h3><p>没有足够多的专家? -&gt; 组建实践社区,用现有的专家去培养专家</p>
<p><em>功能特性团队使得”规模扩展”很容易</em></p>
<blockquote>
<p>很明显再就是暑假时的项目管理模式,将培训与项目结合,并行工作,不过当时的我也不是什么专家,所以组织安排大家学习的结果差强人意.也许收获最大的反而是我?</p>
</blockquote>
<h3 id="根据功能特性组织团队-1"><a href="#根据功能特性组织团队-1" class="headerlink" title="根据功能特性组织团队"></a>根据功能特性组织团队</h3><ul>
<li><p>做计划是必要的</p>
<ul>
<li>项目的时间期限和开始预算</li>
<li>优先开发那些最优价值的功能特性</li>
<li>确保产品能够随时发布,并在时间结束时立刻停止</li>
</ul>
</li>
<li><p>详细的计划是无用的</p>
</li>
<li><p>持续计划:分解功能特性</p>
<ul>
<li>团队应该以固定的节奏工作<ol>
<li>这样的工作周期通常称为”迭代”或”冲刺”,一般为几周</li>
<li>每个功能特性最好在两-三天完成</li>
</ol>
</li>
<li>承担多少工作?<ol>
<li>每个迭代周期的工作量根据上个周期来划分</li>
<li><strong>重要的不是准确地估计工作量,而是能够以一贯的节奏来完成工作</strong></li>
</ol>
</li>
<li>根据”挑战性的目标”制定计划,危害性很大<ol>
<li>赶工会客整个项目带来更多的缺陷</li>
<li>压力具有破坏性,避免向团队施压</li>
</ol>
</li>
</ul>
</li>
</ul>
<p><em>五卡法</em></p>
<blockquote>
<p>这一点暑假就做得很不好,或者说,这是我和涛哥双核驱动模式下的一个必然的恶果.</p>
</blockquote>
<h3 id="根据功能特性构建产品"><a href="#根据功能特性构建产品" class="headerlink" title="根据功能特性构建产品"></a>根据功能特性构建产品</h3><ul>
<li>在每一个短周期内,完整地构建一个小的产品</li>
<li>细化产品愿景</li>
<li>总是将价值可能最大的任务列位下一个目标</li>
<li>确定真实的进展</li>
<li>淘汰测试再修复式的收尾方式</li>
<li>随着项目进行,进一步扩展和优化设计<ol>
<li>设计得太多或者太少都会导致开发缓慢</li>
</ol>
</li>
</ul>
<p><strong>为了加快开发速度,我们能做的最有价值的事情就是提高团队成员的技能.这一投入很快就能带来以下回报:浪费在修复缺陷上的时间会更少,开发过程会更加流畅.不要将迅猛当作高效.速度最快的团队总是平稳\优雅地前进.</strong></p>
<h4 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h4><p>我们需要稳步前进.为此,需要时刻爆出设计的清晰和整洁.为了做到这一点,必须进行重构.</p>
<p>构建一个功能特性所需的时间大致来自以下两个主要方面:</p>
<ul>
<li>它本身固有的难度</li>
<li>将它加入现有代码时可能的难度</li>
</ul>
<p><strong>露营地规则:在离开露营地时,要让它比你来的时候更好.</strong></p>
<h2 id="价值的完整循环"><a href="#价值的完整循环" class="headerlink" title="价值的完整循环"></a>价值的完整循环</h2><ul>
<li>我们最终想要的是价值,提供价值的则是功能特性.功能特性发布得越早,我们就能越早提供价值.</li>
<li>基于价值的管理比基于时间或工件等不提供价值的事物更胜一筹.</li>
<li>根据功能特性做计划很简单,只有正在必要时才进行估算.根据以往完成的工作量来安排下一阶段的工作,效果会更好.</li>
<li>采用逐渐增加功能特性的增量式开发方法,要求我们每隔几周就能够开发出小而完整的产品.所开发的产品必须总是能够正常运行,而且其设计也是良好的.</li>
<li>开发工作必须要交付真正可用的功能特性.产品必须经过严格的测试,业务人员和开发人员都需要参与其中.同时,产品还必须拥有良好的设计,而且开发人员需要保持产品的设计一直处于良好状态.</li>
</ul>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>梦里不知天在水，满船清梦压星河。</p>
]]></content>
      <categories>
        <category>桂苑酌记</category>
      </categories>
      <tags>
        <tag>软件开发</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理复习</title>
    <url>/2019-12-14-principles-of-computer-composition-review/</url>
    <content><![CDATA[<h1 id="一轮"><a href="#一轮" class="headerlink" title="一轮"></a>一轮</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><ol>
<li><p>在 Cache 的地址映射中，若主存中的任意一块均可映射到 Cache 内的任意一快的位置上，则这种方法称为（ <strong>全相联映射</strong> ）</p>
</li>
<li><p>RAM 芯片字扩展时可以（ <strong>增加存储单元数量</strong> ）</p>
</li>
<li><p>RAM 和 ROM 的主要区别是（ <strong>断电后，RAM 内保存的信息会丢失，ROM 则可长期保存而不会丢失</strong> ）</p>
</li>
<li><p>采用虚拟存储器的主要目的是（ <strong>扩大主存储器的存储空间，并能进行自动管理和调度</strong> ）</p>
</li>
<li><p>某计算机字长 32 位，其存储容量为 4MB，若按半字编址，它的寻址范围是（ <strong>0~2M-1</strong> ）<br><a href="https://blog.csdn.net/u013058618/article/details/49407237">类似题目</a></p>
<pre><code>    若按半字就是16位了 4MB=4*1024*1024*8位，所以4MB/16 = 2M；</code></pre>
</li>
<li><p>对一个字，存储时先存放低字节，再存放高字节（即低字节占低地址，高字节占高地址）。这种存储方式是（ <strong>小端方式</strong> ）</p>
</li>
<li><p>设机器字长为 16 位，存储器按字编址，对于单字长指令而言， 读取该指令后，PC 值自动加 ( <strong>1</strong> )</p>
</li>
<li><p>ARM 微处理器为（ <strong>32 位的 RISC 架构</strong> ）</p>
</li>
<li><p>和指令字长无关的是（ <strong>数据总线宽度</strong> ）</p>
</li>
<li><p>设机器字长为 16 位，存储器按字节编址，CPU 读取一条单字 长指令后，PC 值自动加（ <strong>2</strong> ）</p>
<pre><code>一条指令 16/8=2 个字节</code></pre>
</li>
<li><p>（2011 年统考真题）偏移寻址通过将某个寄存器内容与一个形式地址相加而生成有效地址。下列寻址方式中，不属于偏移寻址方式的是（ <strong>间接寻址</strong> ）</p>
</li>
<li><p>下列关于 CISC 和 RISC 的叙述中，错误的是（ <strong>CISC 比 RISC 机器可以更好地支持高级语言</strong> ）</p>
</li>
<li><p>RISC 思想主要基于的是（ <strong>减少指令的平均执行周期</strong> ）</p>
</li>
<li><p>某指令系统有 200 条指令，对操作码采用固定长度二进制编码时，最少需要用（ <strong>8</strong> ）位</p>
</li>
<li><p>扩展操作码是一种优化技术，它使操作码的长度随地址码的减少而增加，不同地址的指令可以具有不同长度的操作码。这个说法（ <strong>正确</strong> ）。</p>
</li>
<li><p>指令周期是 ( <strong>CPU 从主存取出一条指令加上执行这条指令的时间</strong> )</p>
</li>
<li><p>CPU 响应中断的时间是（ <strong>一条指令执行结束</strong> ）</p>
</li>
<li><p>计算机操作的最小单位时间是( <strong>时钟周期</strong> )</p>
</li>
<li><p>计算机的主频的周期是指( <strong>时钟周期</strong> )</p>
</li>
<li><p>由于 CPU 内部操作的速度较快，而 CPU 访问一次存储器的时间较长，因此机器周期通常由（ <strong>存取周期</strong> ）来确定。</p>
</li>
<li><p>在 CPU 中跟踪指令后继地址的寄存器是 <strong>程序计数器_</strong> 。</p>
</li>
<li><p>在微程序控制器中，一条机器指令的功能通常由（ <strong>一段微程序实现</strong> ）。</p>
</li>
<li><p>CPU 响应中断的时间是 <strong>执行周期结束</strong> 。</p>
</li>
<li><p>一个 16K×32 位的存储器，其地址线和数据线的总和是 <strong>46</strong></p>
</li>
<li><p>在计算机术语中，将 <strong>运算器</strong> 和 <strong>控制器</strong> 合在一起称为 CPU，而将 CPU 和 <strong>存储器</strong> 合在一起称为主机</p>
</li>
</ol>
<h3 id="大题"><a href="#大题" class="headerlink" title="大题"></a>大题</h3><h3 id="操作码"><a href="#操作码" class="headerlink" title="操作码"></a>操作码</h3><p><img src="https://i.loli.net/2019/12/06/Ga7gdQ1hAoMlWJm.png" alt="image.png" loading="lazy"></p>
<p><img src="https://i.loli.net/2019/12/06/rJ648EDn1s9ic53.png" alt="image.png" loading="lazy"></p>
<p><img src="https://i.loli.net/2019/12/06/ardZeYuIJEqk5V6.png" alt="image.png" loading="lazy"></p>
<h3 id="寻址方式-1"><a href="#寻址方式-1" class="headerlink" title="寻址方式(1)"></a>寻址方式(1)</h3><p><img src="https://i.loli.net/2019/12/06/w6FOGXtxLunkKQ8.png" alt="截屏2019-12-06下午9.58.51.png" loading="lazy"></p>
<p><img src="https://i.loli.net/2019/12/06/MtzyqEUGBbso8J3.png" alt="截屏2019-12-06下午9.58.56.png" loading="lazy"></p>
<p><img src="https://i.loli.net/2019/12/06/jzmTuxYL138WKqi.png" alt="截屏2019-12-06下午9.59.00.png" loading="lazy"></p>
<h3 id="寻址方式-2"><a href="#寻址方式-2" class="headerlink" title="寻址方式(2)"></a>寻址方式(2)</h3><p><img src="https://i.loli.net/2019/12/06/4G5fsaxOc7LXPAe.png" alt="截屏2019-12-06下午9.59.05.png" loading="lazy"></p>
<h1 id="二轮"><a href="#二轮" class="headerlink" title="二轮"></a>二轮</h1><h2 id="选择-1"><a href="#选择-1" class="headerlink" title="选择"></a>选择</h2><ol>
<li><p>计算机主存储器读写的时间数量级为( <strong>ns</strong> )</p>
</li>
<li><p>指令系统采用不同寻址方式的目的是( <strong>缩短指令⻓度、扩大寻址空间</strong> )</p>
</li>
<li><p>指令操作所需的数据不会来自( <strong>控存</strong> )</p>
</li>
<li><p>关于机器指令的叙述不正确的是 ( <strong>系列计算机是指指令系统完全相同、基本体系结构相同的一系列计算机</strong> )</p>
</li>
<li><p>下列说法不正确的是( <strong>堆栈指针 SP 的内容表示当前堆栈内所存放的数据个数</strong> )</p>
</li>
<li><p>在相对寻址方式中，若指令中的地址码为 X，则操作数的地址为( <strong>PC + X</strong> )</p>
</li>
<li><p>程序控制类的指令的功能是( <strong>改变程序执行顺序</strong> )</p>
</li>
<li><p>设寄存器 R 的内容(R)=1000H，内存单元 1000H 的内容为 2000H，内存单元 2000H 的内容为 3000H，PC 的值为 4000H，采用相对寻址方式，形式地址为-2000H 的操作数是( <strong>3000H</strong> )</p>
<pre><code>4000H -2000H = 2000H -&gt; 3000H</code></pre>
</li>
<li><p>移位操作中移出的位存入( <strong>进位标志位</strong> )</p>
</li>
<li><p>为了缩短指令中某个地址段的位数，有效的方法是采取( <strong>寄存器寻址</strong> )</p>
</li>
<li><p>假设寄存器 R 中的数为 200，主存地址为 200 和 300 的存储单元中存放的内容分别是 300 和 400，若访问到的操作数为 200，则所采用的寻址方式为( <strong>立即寻址 200</strong> )</p>
<pre><code>直接寻址200的操作数为300，寄存器间接寻址（R）的操作数300，存储器间接寻址（200）的操作数为400，寄存器寻址R的操作数为200</code></pre>
</li>
<li><p>构成控制信号序列的最小单位是( C )<br>A)微程序 B) 微指令 C)微命令 D)机器指令</p>
<pre><code>    微命令(微操作) -&gt; 微指令 -&gt; 微程序</code></pre>
</li>
<li><p>控制器同步控制方式是指( A )<br>A)由统一时序信号控制的方式。<br>B) 由握手信号控制的方式。<br>C)由中断控制的方式。<br>D)程序查询控制方式.</p>
</li>
<li><p>存储微程序的存储器称为(C )<br>A)主存 B) Cache C)控存 D)辅存</p>
</li>
<li><p>微程序存放在( C )。<br>A 主存中 B 堆栈中 C 只读存储器中 D 磁盘中</p>
</li>
<li><p>微指令中的微地址表示(D )<br>A 微操作的对象 B 存放微操作结果的地址<br>C 微操作数地址 D 后继微指令地址</p>
</li>
<li><p>在微程序控制中，把操作控制信号编成( A )。<br>A 微命令 B 微地址 C 操作码 D 程序</p>
</li>
<li><p>从一条指令的启动到下一条指令的启动的间隔时间称为( D )。<br>A 时钟周期 B 机器周期 C 工作周期 D 指令周期</p>
</li>
<li><p>直接转移指令的功能是将指令中的地址代码送入 ( C )<br>A.累加器 B.地址寄存器 C.PC D.存储器</p>
</li>
<li><p>状态寄存器用来存放 D<br>A.算术运算结果 B.逻辑运算结果 C.运算类型<br>D.算术、逻辑运算及测试指令的结果状态</p>
</li>
<li><p>某一 RAM 芯片其容量为 512*8 位,除电源和接地端外该芯片引线的最少数目是(C ) 。<br>A. 21 B. 17 C. 19 D.20</p>
<pre><code>log512 地址线 + 8 数据线 + 片选线 + 读写线</code></pre>
</li>
<li><p>DMA 访问主存时，让 CPU 处于等待状态，等 DMA 的一批数据访问结束后，CPU 再恢 复工作，这种情况称作 <strong>A</strong> 。<br>A.停止 CPU 访问主存;B.周期挪用;C.DMA 与 CPU 交替访问;D.DMA。</p>
<pre><code>cpu周期挪用:cpu暂停工作一个周期</code></pre>
</li>
<li><p>中断向量可提供 <strong>C</strong> 。<br>A.被选中设备的地址; B.传送数据的起始地址;<br>C.中断服务程序入口地址;D.主程序的断点地址。</p>
</li>
<li><p>响应中断请求的条件是 <strong>B</strong> 。<br>A.外设提出中断; B.外设工作完成和系统允许时;<br>C.外设工作完成和中断标记触发器为“1”时。 D.CPU 提出中断。</p>
</li>
<li><p>将微程序存储在 EPROM 中的控制器是 <strong>A</strong> 控制器。 A.静态微程序;<br>B.毫微程序; C.动态微程序; D.微程序。</p>
</li>
<li><p>CPU 响应中断的时间是<strong><em>C</em></strong>。<br>A.中断源提出请求 B.取指周期结束 C.执行周期结束。</p>
</li>
<li><p>中断向量地址是 <strong>B</strong> 。<br>A.子程序入口地址 B.中断服务子程序入口地址 C.中断服务子程序出口地址 D.中 断返回地址</p>
</li>
<li><p>完整的指令周期包括取指、 <strong>间址</strong> 、 <strong>执行</strong> 、 <strong>中断</strong> 四个子周期，影响指令流水线性能的三种相关分别是 <strong>结构</strong> 相关、 <strong>数据</strong> 相关和控制相关。</p>
</li>
<li><p>没有外存储器的计算机初始引导程序可以放在 <strong>B</strong> 。<br>A.RAM B.ROM C.RAM 和 ROM D.CPU 30. 下列有关运算器的描述中 <strong>D</strong> 是正确的。<br>A.只作算术运算，不作逻辑运算 B.只作加法 C.能暂时存放运算结果 D.以上答案都不对</p>
</li>
<li><p>采用 DMA 方式传送数据时，每传送一个数据就要用一个 <strong>C</strong> 。<br>A.指令周期 B.数据周期 C.存储周期 D.总线周期</p>
</li>
<li><p>三种集中式总线控制中， <strong>A</strong> 方式对电路故障最敏感。<br>A.链式查询 B.计数器定时查询 C.独立请求</p>
</li>
<li><p>当采用 <strong>(A)</strong> 对设备进行编址情况下，不需要专门的 I/O 指令组。<br>A.统一编址法 B.单独编址法 C.两者都是 D.两者都不是</p>
</li>
<li><p>总线通信中的同步控制是 <strong>B</strong> 。<br>A.只适合于 CPU 控制的方式; B.由统一时序控制的方式;<br>C.只适合于外围设备控制的方式; D.只适合于主存。</p>
</li>
<li><p>在中断周期中，将允许中断触发器置“0”的操作由 <strong>A</strong> 完成。<br>A.硬件; B.关中断指令; C.开中断指令; D.软件。</p>
</li>
<li><p>水平型微指令的特点是 <strong>A</strong> 。<br>A.一次可以完成多个操作; B.微指令的操作控制字段不进行编码; C.微指令的格式简短; D.微指令的格式较长。</p>
</li>
</ol>
<h2 id="填空"><a href="#填空" class="headerlink" title="填空"></a>填空</h2><ol>
<li>使用不同寻址方式的目的是 <strong>缩短指令⻓度，扩大寻址空间，提高编程灵活性</strong></li>
<li>程序控制类指令的功能是 <strong>控制程序执行顺序</strong></li>
<li>微程序入口地址是根据 指令操作码 通过 译码 产生的。</li>
<li>微程序控制器的核心部件是 <strong>控存</strong> ，它一般用 ROM 构成。</li>
</ol>
<h2 id="简答"><a href="#简答" class="headerlink" title="简答"></a>简答</h2><ol>
<li>什么叫指令?什么叫指令系统?<br>答:指令是计算机执行某种操作的命令，也就是常说的机器指令。一台机器中所有机器指令的 集合，称这台计算机的指令系统。</li>
<li>一次程序中断大致可分为哪几个阶段?<br>答:一次程序中断大致可分为五个阶段。中断请求(1 分)中断判优(1 分)中断响应(1 分)中断服务(1 分)中断返回(1 分)</li>
<li>一个较完善的指令系统应包括哪几类?<br>答:包括:数据传送指令、算术运算指令、逻辑运算指令、程序控制指令、输入输出指 令、堆栈指令、字符串指令、特权指令等。</li>
<li>什么是指令周期?什么是机器周期?什么是时钟周期?三者之间的关系如何?<br>答:指令周期是完成一条指令所需的时间。包括取指令、分析指令和执行指令所需的 全部时间。机器周期也称为 CPU 周期，是指被确定为指令执行过程中的归一化基 准时间，通常等于取指时间(或访存时间)。时钟周期是时钟频率的倒数，也可称 为节拍脉冲或 T 周期，是处理操作的最基本单位。一个指令周期由若干个机器周 期组成，每个机器周期又由若干个时钟周期组成。</li>
<li>简要描述外设进行 DMA 操作的过程及 DMA 方式的主要优点。<br>答: (1)外设发出 DMA 请求;<br>(2)CPU 响应请求，DMA 控制器从 CPU 接管总线的控制;<br>(3)由 DMA 控制器执行数据传送操作;<br>(4)向 CPU 报告 DMA 操作结束。<br>主要优点是数据数据速度快</li>
</ol>
<h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><h3 id="指令格式问题"><a href="#指令格式问题" class="headerlink" title="指令格式问题"></a>指令格式问题</h3><ol>
<li><p>若某机要求:三地址指令 4 条，单地址指令 255 条，零地址指令 16 条。设指令字⻓为 12 位.每个地址码⻓为 3 位。问能否以扩展操作码为其编码?如果其中单地址指令为 254 条呢? 说明其理由。</p>
<pre><code>答:1不能用扩展码为其编码。
∵ 指令字⻓ 12 位，每个地址码占 3 位;
∴三地址指令最多是2^(12-3-3-3)=8条， 现三地址指令需4条,
∴ 可有 4 条编码作为扩展码，
∴ 单地址指令最多为 4×2^3×2^3=2^8=256 条， 现要求单地址指令255条，∴可有一条编码作扩展码
∴ 零地址指令最多为 1×2^3 = 8 条
不满足题目要求
∴ 不可能以扩展码为其编码。</code></pre>
</li>
<li><p>某指令系统指令⻓为 16 位，每个操作数的地址码⻓ 6 位，指令分为无操作数、单操作数和双操作数三类。<br>(1)若双操作数为 15 条，无操作数为 64 条，问单操作数最多可以有多少条?<br>(2)若若双操作数为 15 条，单操作数为 62 条，问无操作数最多可以有多少条?</p>
<pre><code>    解:(1)((24-15)26-x)26=64 x=63(条)
    (2) ((24-15)26-62)26=128 (条)</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>计算机组成原理</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈Linux的使用与应用</title>
    <url>/2019-12-24-some-discussion-of-Linux/</url>
    <content><![CDATA[<p>这是 Linux 课程的大作业…</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/410079949.jpg?Expires=1602316585&" alt="head" loading="lazy"></p>
<a id="more"></a>

<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>自大一开始接触 Linux，从最早的 centOS 到现在常用的 Ubuntu，如今对 Linux 的使用与应用，也算是有一点自己的小小的体会，所以本篇主要就是讲述我个人对于 Linux 使用与应用的一些心得和看法。</p>
<p>我对于 Linux 的使用主要集中在两个方面，一个是网站的部署，另一个就是数据挖掘和机器学习。<br>先谈谈网站部署吧。</p>
<p>大一时，租了一台阿里云的学生机，使用 LNMP 体系和 Typecho 框架，准备部署个人博客。作为 Linux 初学者，这无疑是很有挑战性的，事实也是如此，弯弯绕绕一个星期，终于把网站跑起来了。</p>
<p>于是这里引出第一个问题，像 CentOS 这类的 Linux 操作系统与 Windows 使用风格迥异，对于初学者来说，尤其是使用目标很低的初学者，学习成本太高了，如何降低这样的学习成本呢？</p>
<p>一种途径是图形化操作。以最近比较热门的 Debian、Ubuntu 为例，他们的操作界面都在向图形化较为成功的类 Unix 系统—macOS 上靠拢，建立一套学习成本低、使用亲民的图形化操作体系。</p>
<p>另一种途径是建立一个托管型的后端平台。这一方面做得比较好的是宝塔，在进行第二次的个人网站部署的时候，我所选择的就是宝塔，他的使用难度介乎于 macOS 和 CentOS 之间，往往需要与 Terminal 配合操作。</p>
<p>以上两者各有千秋，但是都有一个很明显的问题，那就是系统资源占用，尤其是对于一个使用着 1 核 2G 的学生机的学生来说，安装了图形化或者宝塔，那么就意味着大部分的性能将用来维护这些辅助的功能，而只能分出一小部分系统资源来运行个人网站。这无疑是本末倒置了。</p>
<p>后来，随着对 CentOS 的熟练度逐渐提高，我开始放弃宝塔，改为全终端操作，将服务器所有的资源都释放出来，来运行网站或者进行云计算。</p>
<p>上述所说的个人网站部署是基于 Typecho 的，外框架都提供好了，问题的重点只在于内容的填充，所以这时的部署只是不知底层的很浅显的部署。后来参加计算机设计大赛，开始使用 python 的 flask 来从零开始开发网页，这里主要讲一下开发完成之后的部署的问题。</p>
<p>最初的部署是使用 Nginx 和 uWsgi，需要更改很多的配置文件，对于新手，很容易就一不小心损坏了配置文件，这无疑是很不友好的。不过所幸第一次选择的是这种部署方式，使得我对于 Ubuntu 的底层有了一些更为深刻的理解。</p>
<p>第二次部署使用得是 Gunicorn，这是一个自动化程度比较高的部署方式，唯一所需要的只是很多的配置文件而已，不过这些配置文件独立于系统配置文件，基本上不会对系统造成损害。</p>
<p>再后来，开始接触 Docker。它是云服务技术上的一次创新，让应用程序布署在软件容器下的工作可以自动化进行，借此在 Linux 操作系统上，提供一个额外的软件抽象层，以及操作系统层虚拟化的自动管理机制。</p>
<p>这无疑比 Gunicorn 多出更多的好处，当然，两者本就不是同一个体量事物。</p>
<p>我的主要开发环境大抵是两个，一个是 Windows，一个是 macOS，Ubuntu 虽然也在用，不过不是作为主要的开发环境，而是作为一个单纯的部署环境使用的。这就引出一个问题，那就是系统不同导致 Python 代码上有一些细微的区别，虽然代码使用 git 同步时，可以避免掉一些问题，但是需要设置很多的东西，非常麻烦。有了 Docker 之后，所有的平台实现了真正的同步，这一点虚拟机也可以做到，但是虚拟机占用了更多的系统资源，并且响应速度极慢，很多情境下不能满足使用需求。<br>关于 Docker，由于最近还在进行更深入的研究，所以就只谈这么多。</p>
<p>再谈一谈数据挖掘和机器学习。最近也有在研究这方面的内容，不过自己的机器性能有限，并且很多时候不能把所有的性能都解放出来来进行计算，毕竟日常生活还是要用到电脑的。于是这就使得数据挖掘的进度非常地缓。后来，使用了学校的服务器，终于实际体会到了，云计算在当下如此热门的原因。</p>
<p>CentOS 这类的类 Unix 系统将大部分的硬件计算能力调动起来，并且熟练之后，比起 Windows 有着更为方便快捷的操作（脚本操作），Unix 这样一个与数据挖掘关联不大的东西，很可能可以作为一个区分数据挖掘能力的分水岭。</p>
<p>使用 Linux 已经有 3 年的时间了，选修了张老师的网络操作系统，这学期又选修了胡老师的嵌入式，获益良多。虽然大多时候它都只是一个辅助的操作系统，但也有了很多深刻的体会，Linux 是一个与程序员耦合度极高的系统，并且有着与其学习成本相称的价值。</p>
<p>– harumonia 2019 年 12 月 24 日</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>在书写的过程中,顺带着回顾了一下三年来的课外学习成果.</p>
<p>对技术的热爱贯穿了整个大学的课外学习生活,这样的感觉真的很棒.</p>
<p>最初,我觉得这样喜欢什么就学什么的学习方式,最大的问题在于不成体系.很多技术可能一时炫酷,以后可能就都用不到了.也曾迷茫过,不过我的个人性格比较跳脱,学习技术的核心不是为了提升自己这种冠冕堂皇的东西,而是单纯的追求炫酷的技术,以及在这种追求过程中的满足与快乐.</p>
<p>不过后来证明,学习的东西虽然零散,但是每一种技术(爬虫\运维\网页开发\机器学习等),都有其应用的场景,并且也给我带来了很多的回报,这也许就是所谓的无心插柳柳成荫吧(笑</p>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>项目中遇到的问题及解决方案(200103-1)</title>
    <url>/2020-01-03-QS-in-project-200103-1/</url>
    <content><![CDATA[<h2 id="echarts-节点点击事件"><a href="#echarts-节点点击事件" class="headerlink" title="echarts 节点点击事件"></a>echarts 节点点击事件</h2><p>由于项目需要在点击 echarts 的 items 或者 labels 的时候,修改 DOM 树,所以要做一个 echarts 的点击事件.</p>
<p>在网上找了很久,大多是没有解答的空问题.<br>然后试图用 js 的原生方法来解决问题,发现确实有点麻烦,因为 echarts 在初期构建的时候,滤掉了冗余的信息,最后只给出了一个精简的绘图结果.</p>
<p>思考:echarts 原生的点击是如何实现的?</p>
<a id="more"></a>

<p>于是我根据 drag 属性去看源码(我承认这有点作死的感觉),然后仔细一想,这 drag 我也用不到啊,就把它给掏空了,装入了自己的代码<del>~</del></p>
<p>通过修改 echarts 源代码中的 Draggable()实现</p>
<pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function-variable function">_dragStart</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>target <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>hoverStyle<span class="token punctuation">.</span>text<span class="token punctuation">)</span>         <span class="token punctuation">&#123;</span>
			<span class="token function">alert</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>hoverStyle<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上是一个测试案例,最终,点击了节点之后,会形成相应的点击反馈</p>
<h2 id="将-JS-图表固化"><a href="#将-JS-图表固化" class="headerlink" title="将 JS 图表固化"></a>将 JS 图表固化</h2><p>JS 是动态渲染的,虽然因此对出很多花哨的特效,但是不像传统的 python 分析图一样,可以导出成为图像文件.<br>我一度很纠结,这之中如何做出取舍,难道每次都要手动地去截图吗,如果遇到没办法截图的情况岂不是麻瓜了?<br>等等,截图…<br>这个时候我忽然想到了写爬虫的时候,使用 selenium 去模拟浏览器的经历,于是自然而然想到了解决方案,既然只能截图,那就截图呗~~<br>使用 selenium 模拟后台浏览器,然后使用 snapshot 模拟截图动作,就得到了一张需要的图像文件咯.</p>
<p>附上螺旋丸一张<br><img src="https://i.loli.net/2020/01/03/pOxWMTjgdCfroqY.png" alt="截屏2020-01-03下午8.50.38.png" loading="lazy"></p>
<h2 id="沟通与交流"><a href="#沟通与交流" class="headerlink" title="沟通与交流"></a>沟通与交流</h2><p>在 David Scott 的 &lt;修改软件的艺术&gt; 一书中读到过这一方面的内容,但是没有想到这么快就得到了实践的验证.<br>不同人的思维回路是不同的,分歧无时无刻不在产生,如果不及时地进行有效的沟通,最终的结果就是,开发的产品与设计的思路大相径庭.</p>
<h2 id="删除注释"><a href="#删除注释" class="headerlink" title="删除注释"></a>删除注释</h2><p>源码之中的注释可以极大地提高代码的维护效率,但是有些时候我们并不想注释流出,给其他人看见.<br>结合很多代码编辑器的正则查找替换功能,这里给出一个一键剔除注释的方案.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token operator">*</span> 运用正则快速删除注释<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>鲨套不在的第一天,有点想她.</p>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>echarts</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫复习(1) selenium</title>
    <url>/2020-01-05-spider-review-1-selenium/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>selenium 虽然是新手友好型的爬虫工具，但是个人觉得绝对不是适合新手入门的爬虫。<br>推荐在了解了 <strong>requests 体系</strong> 的爬虫，有了爬虫的一些常识之后，再来看 selenium。</p>
<p><strong>事实上，requests 体系的爬虫已经足够满足现阶段大多数网站的爬虫需求</strong></p>
<a id="more"></a>

<h2 id="关于-Selenium"><a href="#关于-Selenium" class="headerlink" title="关于 Selenium"></a>关于 Selenium</h2><p>Selenium 诞生于 2014 年，创造者是 ThoughtWorks 公司的测试工程师 Jason Huggins。创造 Selenium 的目的就是做自动化测试，用以检测网页交互，避免重复劳动。<br>这个工具可以用来自动加载网页，供爬虫抓取数据。</p>
<p><a href="https://www.seleniumhq.org/docs/">官方文档</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol>
<li>从<a href="http://chromedriver.chromium.org/downloads">这里</a>下载 chromedriver<br>注意：与目前正在使用的 Chrome 版本相一致<br>补充：对于 macOS 用户，可以把该文件放到 <strong>/usr/local/bin/</strong> 目录下，可以省去一些的配置烦恼</li>
<li>pip install selenium</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li>设置配置<br>option = webdriver.ChromeOptions()<br>option.add_argument(‘headless’)</li>
<li>添加驱动<br>driver = webdriver.Chrome(chrome_options=option)</li>
</ol>
<h2 id="牛刀小试"><a href="#牛刀小试" class="headerlink" title="牛刀小试"></a>牛刀小试</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 与百度首页交互</span>

<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions <span class="token keyword">as</span> EC

option <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>ChromeOptions<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># option.add_argument('headless')</span>

<span class="token comment"># 要换成适应自己操作系统的chromedriver</span>
driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>chrome_options<span class="token operator">=</span>option<span class="token punctuation">)</span>


url <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span>

<span class="token comment"># 打开网站</span>
driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

<span class="token comment"># 打印当前页面标题</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>title<span class="token punctuation">)</span>

<span class="token comment"># 在搜索框中输入文字</span>
timeout <span class="token operator">=</span> <span class="token number">5</span>
search_content <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>
    <span class="token comment"># lambda d: d.find_element_by_xpath('//input[@id="kw"]')</span>
    EC<span class="token punctuation">.</span>presence_of_element_located<span class="token punctuation">(</span><span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//input[@id="kw"]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
search_content<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">'python'</span><span class="token punctuation">)</span>

<span class="token keyword">import</span> time
time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>

<span class="token comment"># 模拟点击“百度一下”</span>
search_button <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>
    <span class="token keyword">lambda</span> d<span class="token punctuation">:</span> d<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">'//input[@id="su"]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
search_button<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 打印搜索结果</span>
search_results <span class="token operator">=</span> WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>
    <span class="token comment"># lambda d: d.find_elements_by_xpath('//h3[@class="t c-title-en"] | //h3[@class="t"]')</span>
    <span class="token keyword">lambda</span> e<span class="token punctuation">:</span> e<span class="token punctuation">.</span>find_elements_by_xpath<span class="token punctuation">(</span><span class="token string">'//h3[contains(@class,"t")]/a[1]'</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token comment"># print(search_results)</span>

<span class="token keyword">for</span> item <span class="token keyword">in</span> search_results<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>/usr/local/Caskroom/miniconda/base/envs/scikit/lib/python3.7/site-packages/ipykernel_launcher.py:13: DeprecationWarning: use options instead of chrome_options
  del sys.path[0]


百度一下，你就知道
python每天免费网上学习python
Welcome to Python.org
Python_百度百科
Python 基础教程 | 菜鸟教程
Download Python | Python.org
Python教程 - 廖雪峰的官方网站
Python_官方电脑版_华军纯净下载
我们生活在“Python时代”
Python 简介 | 菜鸟教程
Python - 知乎
Python基础教程,Python入门教程(非常详细)
英特尔_Python_发行版
唤境_不懂编程不会美术_也能轻松制作游戏
免费全能的宝塔Linux面板_一键管理服务器</code></pre>
<h3 id="页面交互方法"><a href="#页面交互方法" class="headerlink" title="页面交互方法"></a>页面交互方法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查找元素：</span>
element <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">"passwd-id"</span><span class="token punctuation">)</span>
element <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">"passwd"</span><span class="token punctuation">)</span>
element <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@id='passwd-id']"</span><span class="token punctuation">)</span>

<span class="token comment"># 输入文字：</span>
element<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"some text"</span><span class="token punctuation">)</span>

<span class="token comment"># 点击</span>
element<span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 动作链</span>
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> ActionChains
action_chains <span class="token operator">=</span> ActionChains<span class="token punctuation">(</span>driver<span class="token punctuation">)</span>
action_chains<span class="token punctuation">.</span>drag_and_drop<span class="token punctuation">(</span>element<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>perform<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 在页面间切换</span>
window_handles <span class="token operator">=</span> driver<span class="token punctuation">.</span>window_handles
driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>window_handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># 保存网页截图</span>
driver<span class="token punctuation">.</span>save_screenshot<span class="token punctuation">(</span><span class="token string">'screen.png'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="定位元素"><a href="#定位元素" class="headerlink" title="定位元素"></a>定位元素</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 查找一个元素</span>
find_element_by_id
find_element_by_name
find_element_by_xpath
find_element_by_link_text
find_element_by_partial_link_text
find_element_by_tag_name
find_element_by_class_name
find_element_by_css_selector

<span class="token comment"># 查找多个元素</span>
find_elements_by_name
find_elements_by_xpath
find_elements_by_link_text
find_elements_by_partial_link_text
find_elements_by_tag_name
find_elements_by_class_name
find_elements_by_css_selector

<span class="token comment"># 通过id定位</span>

<span class="token operator">&lt;</span>html<span class="token operator">></span>
 <span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>form <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"loginForm"</span><span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token builtin">input</span> name<span class="token operator">=</span><span class="token string">"username"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token builtin">input</span> name<span class="token operator">=</span><span class="token string">"password"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"password"</span> <span class="token operator">/</span><span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token builtin">input</span> name<span class="token operator">=</span><span class="token string">"continue"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Login"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>

login_form <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_id<span class="token punctuation">(</span><span class="token string">'loginForm'</span><span class="token punctuation">)</span>

<span class="token comment"># 通过name定位</span>

<span class="token operator">&lt;</span>html<span class="token operator">></span>
 <span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>form <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"loginForm"</span><span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token builtin">input</span> name<span class="token operator">=</span><span class="token string">"username"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token builtin">input</span> name<span class="token operator">=</span><span class="token string">"password"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"password"</span> <span class="token operator">/</span><span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token builtin">input</span> name<span class="token operator">=</span><span class="token string">"continue"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"Login"</span> <span class="token operator">/</span><span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token builtin">input</span> name<span class="token operator">=</span><span class="token string">"continue"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"Clear"</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>

username <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>
password <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_name<span class="token punctuation">(</span><span class="token string">'password'</span><span class="token punctuation">)</span>

<span class="token comment"># 通过链接文本定位</span>

<span class="token operator">&lt;</span>html<span class="token operator">></span>
 <span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span>Are you sure you want to do this?<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"continue.html"</span><span class="token operator">></span>Continue<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
  <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"cancel.html"</span><span class="token operator">></span>Cancel<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>

continue_link <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">'Continue'</span><span class="token punctuation">)</span>
continue_link <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token string">'Conti'</span><span class="token punctuation">)</span>

<span class="token comment"># 通过标签名定位</span>

<span class="token operator">&lt;</span>html<span class="token operator">></span>
 <span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Welcome<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span>Site content goes here<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>

heading1 <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_tag_name<span class="token punctuation">(</span><span class="token string">'h1'</span><span class="token punctuation">)</span>

<span class="token comment"># 通过类名定位</span>

<span class="token operator">&lt;</span>html<span class="token operator">></span>
 <span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>Site content goes here<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>

content <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_class_name<span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span>

<span class="token comment"># 通过CSS选择器定位</span>

<span class="token operator">&lt;</span>html<span class="token operator">></span>
 <span class="token operator">&lt;</span>body<span class="token operator">></span>
  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"content"</span><span class="token operator">></span>Site content goes here<span class="token punctuation">.</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>

content <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_css_selector<span class="token punctuation">(</span><span class="token string">'p.content'</span><span class="token punctuation">)</span>

<span class="token comment"># 两个私有方法</span>
<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By

driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//button[text()="Some text"]'</span><span class="token punctuation">)</span>
driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>XPATH<span class="token punctuation">,</span> <span class="token string">'//button'</span><span class="token punctuation">)</span>

By后面可以用来定位的属性
ID <span class="token operator">=</span> <span class="token string">"id"</span>
XPATH <span class="token operator">=</span> <span class="token string">"xpath"</span>
LINK_TEXT <span class="token operator">=</span> <span class="token string">"link text"</span>
PARTIAL_LINK_TEXT <span class="token operator">=</span> <span class="token string">"partial link text"</span>
NAME <span class="token operator">=</span> <span class="token string">"name"</span>
TAG_NAME <span class="token operator">=</span> <span class="token string">"tag name"</span>
CLASS_NAME <span class="token operator">=</span> <span class="token string">"class name"</span>
CSS_SELECTOR <span class="token operator">=</span> <span class="token string">"css selector"</span>

<span class="token comment"># 推荐使用xpath定位</span>
username <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//form[input/@name='username']"</span><span class="token punctuation">)</span>
username <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//form[@id='loginForm']/input[1]"</span><span class="token punctuation">)</span>
username <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_xpath<span class="token punctuation">(</span><span class="token string">"//input[@name='username']"</span><span class="token punctuation">)</span>

<span class="token comment"># 推荐使用链接文本定位</span>
continue_link <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_link_text<span class="token punctuation">(</span><span class="token string">'Continue'</span><span class="token punctuation">)</span>
continue_link <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element_by_partial_link_text<span class="token punctuation">(</span><span class="token string">'Conti'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="关于元素的定位"><a href="#关于元素的定位" class="headerlink" title="关于元素的定位"></a>关于元素的定位</h4><p>推荐使用 <a href="https://www.katalon.com/">katalon</a> ，该软件开启之后，可以记录浏览器的点击记录，进而一键生成 selenium 模拟点击的代码</p>
<hr>
同时，通过浏览器的元素审查功能，在要定位的元素上右键，大部分浏览器都有直接复制xpath的功能

<h2 id="个人使用体会"><a href="#个人使用体会" class="headerlink" title="个人使用体会"></a>个人使用体会</h2><p>优点：</p>
<ul>
<li>新手友好，操作方便</li>
<li>天生适合爬取动态加载的页面</li>
<li>截图功能非常强大</li>
<li>cookies 的存取十分方便,与 requests 搭配堪称邪教</li>
</ul>
<p>缺点：</p>
<ul>
<li>初始安装过程繁杂</li>
<li>速度慢，效率低</li>
<li>内存占用大</li>
</ul>
<h2 id="For-Tsat"><a href="#For-Tsat" class="headerlink" title="For Tsat"></a>For Tsat</h2>]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫复习(2) 提高效率</title>
    <url>/2020-01-08-spider-review-2-Improve-efficiency/</url>
    <content><![CDATA[<p>提高爬虫效率主要从三个方面开始复习。</p>
<ol>
<li>并发</li>
<li>ip</li>
<li>cookies</li>
</ol>
<p>并发必然引发的一个结果就是反爬虫机制，这种时候爬虫的效率不会因为并发而提高，反而会因为网站的防御机制拖累爬虫的速度。</p>
<p>自然而然地就引出了 2，代理爬虫。代理爬虫能够从多个 ip 发送请求，减小了单个 ip 的请求频率，自然触发反爬虫机制的概率也就小了很多。</p>
<p>但是新的问题又出现了，对于需要 <strong>登录</strong> 的网站，需要提交 cookies 来模拟登录情况，模拟登录不难，但是同一个 cookies 从不同的 ip 同时发送请求很明显不合常理，依然会触发反爬虫机制。</p>
<p>这是到目前为止我所遇到的影响爬虫效率的问题，就在这里做一个总结吧，如果后续遇到新的效率相关的问题，再做补充。</p>
<a id="more"></a>

<h1 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 2019 年，我阅读了 python cookbook，其中对这一方面有较为详细且透彻的讲述，比较适合有 python 基础的人学习。<br>多进程、多线程是 python 程序员的必修课之一。因为，即使脱离了爬虫，机器学习、web 开发等方面，多线程、多进程依旧有着举足轻重的地位。<br>这是开发者的一个小分水岭，它在一定程度上决定了程序效率的高低。</p>
<h2 id="python-中的多进程方法"><a href="#python-中的多进程方法" class="headerlink" title="python 中的多进程方法"></a>python 中的多进程方法</h2><h3 id="多线程、多进程、协程爬虫"><a href="#多线程、多进程、协程爬虫" class="headerlink" title="多线程、多进程、协程爬虫"></a>多线程、多进程、协程爬虫</h3><p>对于操作系统来说，一个任务就是一个进程（Process），比如打开一个浏览器就是启动一个浏览器进程，打开一个记事本就启动了一个记事本进程，打开两个记事本就启动了两个记事本进程，打开一个 Word 就启动了一个 Word 进程。</p>
<p>有些进程还不止同时干一件事，比如 Word，它可以同时进行打字、拼写检查、打印等事情。在一个进程内部，要同时干多件事，就需要同时运行多个“子任务”，我们把进程内的这些“子任务”称为线程（Thread）。</p>
<h3 id="进程、线程、协程的区别"><a href="#进程、线程、协程的区别" class="headerlink" title="进程、线程、协程的区别"></a>进程、线程、协程的区别</h3><p>多进程模式最大的优点就是稳定性高，因为一个子进程崩溃了，不会影响主进程和其他子进程。（当然主进程挂了所有进程就全挂了，但是 Master 进程只负责分配任务，挂掉的概率低）著名的 Apache 最早就是采用多进程模式。</p>
<p>多进程模式的缺点是创建进程的代价大，在 Unix/Linux 系统下，用 fork 调用还行，在 Windows 下创建进程开销巨大。另外，操作系统能同时运行的进程数也是有限的，在内存和 CPU 的限制下，如果有几千个进程同时运行，操作系统连调度都会成问题。</p>
<p>多线程模式通常比多进程快一点，但是也快不到哪去，而且，多线程模式致命的缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。</p>
<h4 id="协程的优势："><a href="#协程的优势：" class="headerlink" title="协程的优势："></a>协程的优势：</h4><p>最大的优势就是协程 <strong>极高的执行效率</strong> 。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销，和多线程比，线程数量越多，协程的性能优势就越明显。</p>
<p>第二大优势就是 <strong>不需要多线程的锁机制</strong> ，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不加锁，只需要判断状态就好了，所以执行效率比多线程高很多。</p>
<h3 id="多进程，使用-Pool"><a href="#多进程，使用-Pool" class="headerlink" title="多进程，使用 Pool"></a>多进程，使用 Pool</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time
<span class="token keyword">import</span> requests
<span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Pool

task_list <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'https://www.jianshu.com/p/91b702f4f24a'</span><span class="token punctuation">,</span>
    <span class="token string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span><span class="token punctuation">,</span>
    <span class="token string">'https://www.jianshu.com/p/7ef0f606c10b'</span><span class="token punctuation">,</span>
    <span class="token string">'https://www.jianshu.com/p/b117993f5008'</span><span class="token punctuation">,</span>
    <span class="token string">'https://www.jianshu.com/p/583d83f1ff81'</span><span class="token punctuation">,</span>
    <span class="token string">'https://www.jianshu.com/p/91b702f4f24a'</span><span class="token punctuation">,</span>
    <span class="token string">'https://www.jianshu.com/p/8e9e0b1b3a11'</span><span class="token punctuation">,</span>
    <span class="token string">'https://www.jianshu.com/p/7ef0f606c10b'</span><span class="token punctuation">,</span>
    <span class="token string">'https://www.jianshu.com/p/b117993f5008'</span><span class="token punctuation">,</span>
    <span class="token string">'https://www.jianshu.com/p/583d83f1ff81'</span>
<span class="token punctuation">]</span>

header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span><span class="token punctuation">,</span>
        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span>
                      <span class="token string">'(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>
                            headers<span class="token operator">=</span>header<span class="token punctuation">,</span>
                            timeout<span class="token operator">=</span><span class="token number">30</span>
                            <span class="token punctuation">)</span>
    <span class="token keyword">return</span> response<span class="token punctuation">.</span>status_code

<span class="token keyword">def</span> <span class="token function">timeCul</span><span class="token punctuation">(</span>processNumberList<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> processNumber <span class="token keyword">in</span> processNumberList<span class="token punctuation">:</span>
        p <span class="token operator">=</span> Pool<span class="token punctuation">(</span>processNumber<span class="token punctuation">)</span>
        time_old <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'res:'</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>download<span class="token punctuation">,</span> task_list<span class="token punctuation">)</span><span class="token punctuation">)</span>
        time_new <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        time_cost <span class="token operator">=</span> time_new <span class="token operator">-</span> time_old
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Prcess number &#123;&#125;,Time cost &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>processNumber<span class="token punctuation">,</span>time_cost<span class="token punctuation">)</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>

timeCul<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>res: [200, 200, 200, 200, 200, 200, 200, 200, 200, 200]
Prcess number 1,Time cost 10.276863813400269
res: [200, 200, 200, 200, 200, 200, 200, 200, 200, 200]
Prcess number 3,Time cost 2.4015071392059326
res: [200, 200, 200, 200, 200, 200, 200, 200, 200, 200]
Prcess number 5,Time cost 2.639281988143921
res: [200, 200, 200, 200, 200, 200, 200, 200, 200, 200]
Prcess number 7,Time cost 1.357300043106079
res: [200, 200, 200, 200, 200, 200, 200, 200, 200, 200]
Prcess number 10,Time cost 0.7208449840545654</code></pre>
<p>可以看到,随着进程数量的提升,爬虫的效率得到了显著的提高</p>
<h3 id="多进程，使用-Process-对象"><a href="#多进程，使用-Process-对象" class="headerlink" title="多进程，使用 Process 对象"></a>多进程，使用 Process 对象</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process

<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>

p_1 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'bob'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p_1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
p_1<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>

p_2 <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>f<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">'alice'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
p_2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
p_2<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>hello bob
hello alice</code></pre>
<h3 id="关于多线程"><a href="#关于多线程" class="headerlink" title="关于多线程"></a>关于多线程</h3><p><strong>纯粹的多线程爬虫不适合复杂的任务</strong></p>
<p>当某一个线程的爬虫出现故障，由于内存共享机制，所有的线程会受到牵连</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor
<span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">sayhello</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"hello: "</span><span class="token operator">+</span>a<span class="token punctuation">)</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    seed<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">]</span>
    start1<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> each <span class="token keyword">in</span> seed<span class="token punctuation">:</span>
        sayhello<span class="token punctuation">(</span>each<span class="token punctuation">)</span>
    end1<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time1: "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>end1<span class="token operator">-</span>start1<span class="token punctuation">)</span><span class="token punctuation">)</span>
    start2<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor<span class="token punctuation">:</span>
        <span class="token keyword">for</span> each <span class="token keyword">in</span> seed<span class="token punctuation">:</span>
            executor<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>sayhello<span class="token punctuation">,</span>each<span class="token punctuation">)</span>
    end2<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time2: "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>end2<span class="token operator">-</span>start2<span class="token punctuation">)</span><span class="token punctuation">)</span>
    start3<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> ThreadPoolExecutor<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">as</span> executor1<span class="token punctuation">:</span>
        executor1<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>sayhello<span class="token punctuation">,</span>seed<span class="token punctuation">)</span>
    end3<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"time3: "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>end3<span class="token operator">-</span>start3<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="关于协程"><a href="#关于协程" class="headerlink" title="关于协程"></a>关于协程</h1><h2 id="协程的作用"><a href="#协程的作用" class="headerlink" title="协程的作用"></a>协程的作用</h2><p>简单总结一下协程的优缺点：</p>
<p>优点：</p>
<ol>
<li><p>无需线程上下文切换的开销（还是单线程）；</p>
</li>
<li><p>无需原子操作的锁定和同步的开销；</p>
</li>
<li><p>方便切换控制流，简化编程模型；</p>
</li>
<li><p>高并发+高扩展+低成本：一个 cpu 支持上万的协程都没有问题，适合用于高并发处理。</p>
</li>
</ol>
<p>缺点：</p>
<ol>
<li><p>无法利用多核的资源，协程本身是个单线程，它不能同时将单个 cpu 的多核用上，协程需要和进程配合才能运用到多 cpu 上（协程是跑在线程上的）；</p>
</li>
<li><p>进行阻塞操作时会阻塞掉整个程序：如 io；</p>
</li>
</ol>
<h2 id="示例演示"><a href="#示例演示" class="headerlink" title="示例演示"></a>示例演示</h2><p>协程是我这次复习的一个重头戏，所以给它一个完整的演示流程。这对于理解并发以及并发应该如何应用有着很大的意义。</p>
<p>首先，为了体现协程的高效率，我将传统的串行爬虫和协程爬虫进行一个效率对比。</p>
<h3 id="共同部分"><a href="#共同部分" class="headerlink" title="共同部分"></a>共同部分</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re
<span class="token keyword">import</span> asyncio
<span class="token keyword">import</span> aiohttp
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> ssl
<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree
<span class="token keyword">from</span> asyncio<span class="token punctuation">.</span>queues <span class="token keyword">import</span> Queue

<span class="token keyword">from</span> aiosocksy<span class="token punctuation">.</span>connector <span class="token keyword">import</span> ProxyConnector<span class="token punctuation">,</span> ProxyClientRequest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">links_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">'http://www.harumonia.top/index.php/page/&#123;&#125;/'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span><span class="token punctuation">,</span>
        <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span>
                      <span class="token string">'(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span>
    <span class="token punctuation">&#125;</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>
                            headers<span class="token operator">=</span>header<span class="token punctuation">,</span>
                            timeout<span class="token operator">=</span><span class="token number">5</span>
                            <span class="token punctuation">)</span>
    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    article_links <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="post-panel"]/div/div[@class="panel"]/div[1]/a/@href'</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> article_link <span class="token keyword">in</span> article_links<span class="token punctuation">:</span>
        links_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>article_link<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上，获取 url 列表，是两只爬虫的共同部分，所以就摘出来，不加入计时。</p>
<h3 id="传统方法，顺序爬虫"><a href="#传统方法，顺序爬虫" class="headerlink" title="传统方法，顺序爬虫"></a>传统方法，顺序爬虫</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>timeit
word_sum <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> link <span class="token keyword">in</span> links_list<span class="token punctuation">:</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>link<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>
    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    word_num <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'\d*'</span><span class="token punctuation">,</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="small_widgets"]/ul/li[5]/span/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    word_sum<span class="token operator">+=</span><span class="token builtin">int</span><span class="token punctuation">(</span>word_num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>47.9 s ± 6.06 s per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
<h3 id="协程方法"><a href="#协程方法" class="headerlink" title="协程方法"></a>协程方法</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">result_queue_1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">session_get</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'</span><span class="token punctuation">&#125;</span>
    timeout <span class="token operator">=</span> aiohttp<span class="token punctuation">.</span>ClientTimeout<span class="token punctuation">(</span>total<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
    response <span class="token operator">=</span> <span class="token keyword">await</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>
        url<span class="token punctuation">,</span>
        timeout<span class="token operator">=</span>timeout<span class="token punctuation">,</span>
        headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>
        ssl<span class="token operator">=</span>ssl<span class="token punctuation">.</span>SSLContext<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    connector <span class="token operator">=</span> ProxyConnector<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span>
            connector<span class="token operator">=</span>connector<span class="token punctuation">,</span>
            request_class<span class="token operator">=</span>ProxyClientRequest
    <span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
        ret<span class="token punctuation">,</span> status <span class="token operator">=</span> <span class="token keyword">await</span> session_get<span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'window.location.href'</span> <span class="token keyword">in</span> ret <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">:</span>
            url <span class="token operator">=</span> ret<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"window.location.href='"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            ret<span class="token punctuation">,</span> status <span class="token operator">=</span> <span class="token keyword">await</span> session_get<span class="token punctuation">(</span>session<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
        <span class="token keyword">return</span> ret<span class="token punctuation">,</span> status


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">parse_html</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>content<span class="token punctuation">)</span>
    word_num <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'\d*'</span><span class="token punctuation">,</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="small_widgets"]/ul/li[5]/span/text()'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>word_num<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">get_all_article_links</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    links_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> <span class="token string">'http://www.harumonia.top/index.php/page/&#123;&#125;/'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span><span class="token punctuation">,</span>
            <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 '</span>
                          <span class="token string">'(KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span>
        <span class="token punctuation">&#125;</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>
                                headers<span class="token operator">=</span>header<span class="token punctuation">,</span>
                                timeout<span class="token operator">=</span><span class="token number">5</span>
                                <span class="token punctuation">)</span>
        tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        article_links <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*[@id="post-panel"]/div/div[@class="panel"]/div[1]/a/@href'</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> article_link <span class="token keyword">in</span> article_links<span class="token punctuation">:</span>
            links_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>article_link<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>article_link<span class="token punctuation">)</span>
    <span class="token keyword">return</span> links_list


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">down_and_parse_task</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    error <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">for</span> retry_cnt <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            html<span class="token punctuation">,</span> status <span class="token operator">=</span> <span class="token keyword">await</span> download<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            <span class="token keyword">if</span> status <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'false'</span><span class="token punctuation">)</span>
                html<span class="token punctuation">,</span> status <span class="token operator">=</span> <span class="token keyword">await</span> download<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
            word_num <span class="token operator">=</span> <span class="token keyword">await</span> parse_html<span class="token punctuation">(</span>html<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'word num:'</span><span class="token punctuation">,</span> word_num<span class="token punctuation">)</span>
            <span class="token keyword">return</span> word_num
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            error <span class="token operator">=</span> e
            <span class="token keyword">print</span><span class="token punctuation">(</span>retry_cnt<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
            <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">raise</span> error


<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>all_links<span class="token punctuation">)</span><span class="token punctuation">:</span>
    task_queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    task <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>all_links<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">await</span> task_queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token keyword">while</span> <span class="token keyword">not</span> task_queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        url <span class="token operator">=</span> task_queue<span class="token punctuation">.</span>get_nowait<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'now start'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
        task<span class="token punctuation">.</span>append<span class="token punctuation">(</span>asyncio<span class="token punctuation">.</span>ensure_future<span class="token punctuation">(</span>down_and_parse_task<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    tasks <span class="token operator">=</span> <span class="token keyword">await</span> asyncio<span class="token punctuation">.</span>gather<span class="token punctuation">(</span><span class="token operator">*</span>task<span class="token punctuation">)</span>
    <span class="token keyword">for</span> foo <span class="token keyword">in</span> tasks<span class="token punctuation">:</span>
        result_queue_1<span class="token punctuation">.</span>append<span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">loop <span class="token operator">=</span> asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span>
loop<span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>time cost 16.03649091720581 s<br>字数 = 291738</p>
</blockquote>
<p>ps.由于 jupyter 自身的限制，所以这里使用 pycharm 运行并计时</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>可以看出，协程方法下，代码的运行效率大约是传统串行方式的 3 倍，并且，随着运行量级的增加，效率将会呈指数级提升。</p>
<p>由进程到线程，由线程到协程，任务的划分越来越精细，但是代价是什么呢？</p>
<br>

<p><strong>补充说明</strong> ：</p>
<ol>
<li>无论是串行还是协程，都会面临爬取频率过高而触发反爬虫机制的问题。这在高效率的协程状况下尤为明显，这里就要使用代理来规避这一问题。</li>
<li>两者的代码量存在很大的差异，这里主要是因为在写协程的时候进行了代码规范，只是看上去代码量多了很多而已。（当然，协程的代码量必然是比传统方法多的）</li>
<li>爬虫不要玩的太狠，曾经有人将爬虫挂在服务器上日夜爬取某网站，被判定为攻击，最终被反制(病毒攻击)的先例。同时，也要兼顾一些法律方面的问题。</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ol>
<li>暂时就先整理一下并发相关的知识吧.最近事务实在有点多了.</li>
<li>在完成这一篇的同时,收到了导师”将网站项目进行多进程改造”的要求,好吧…本来想偷个懒只研究协程的,最终还是一个都跑不掉 o(╥﹏╥)o</li>
<li>鲨雕终于要回来辽<del>~</del></li>
</ol>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>spider</tag>
        <tag>协程</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令复习1</title>
    <url>/2020-01-17-Linux-cmd-review/</url>
    <content><![CDATA[<h2 id="文件-amp-amp-目录"><a href="#文件-amp-amp-目录" class="headerlink" title="文件 &amp;&amp; 目录"></a>文件 &amp;&amp; 目录</h2><h3 id="目录大小-amp-amp-浏览和切换目录"><a href="#目录大小-amp-amp-浏览和切换目录" class="headerlink" title="目录大小 &amp;&amp; 浏览和切换目录"></a>目录大小 &amp;&amp; 浏览和切换目录</h3><ul>
<li><p>pwd 当前路径</p>
</li>
<li><p>which 搜索可执行文件路径</p>
</li>
<li><p>ls 列出当前目录</p>
<ul>
<li>-a all</li>
<li>-l list</li>
<li>-h 便于人类阅读</li>
<li>-t 按最近一次修改时间排序</li>
<li>-i 显示 inode</li>
</ul>
</li>
<li><p>cd 切换目录</p>
</li>
<li><p>du 显示目录包含的 <strong>文件</strong> 大小 <strong>du 会深入遍历目录的每个子目录</strong></p>
<ul>
<li>-a 显示目录和文件的大小</li>
<li>-h</li>
<li>-s 只显示总计大小(summary)</li>
</ul>
</li>
</ul>
<a id="more"></a>

<h3 id="文件浏览和创建"><a href="#文件浏览和创建" class="headerlink" title="文件浏览和创建"></a>文件浏览和创建</h3><ul>
<li><p>cat &amp;&amp; less 显示文件内容 less-分页显示内容</p>
<ul>
<li><p>space 读取下一个屏幕的内容</p>
</li>
<li><p>↓ 下一行</p>
</li>
<li><p>d 前进半页</p>
</li>
<li><p>b 后退一页 = Pageup</p>
</li>
<li><p>y 后退一行 = ↑</p>
</li>
<li><p>u 后退半个屏幕</p>
</li>
<li><p>q 退出</p>
</li>
<li><p>= 显示在文件中的位置</p>
</li>
<li><p>/ 进入搜索模式 在斜杠后面输入要搜索的文字</p>
<ul>
<li>n 下一个符合条件的搜索结果</li>
<li>N 上一个符合条件的搜索结果</li>
</ul>
</li>
</ul>
</li>
<li><p>head 显示前几行</p>
<ul>
<li>n 前 n 行</li>
</ul>
</li>
<li><p>tail 显示尾几行</p>
<ul>
<li>-n</li>
<li>-f 实时追踪文件更新<ul>
<li>-s 每隔 s 秒检查一次</li>
</ul>
</li>
</ul>
</li>
<li><p>touch 常见一个空白文件(注意:linux 中文件名尽量不要包含空格)</p>
</li>
<li><p>mkdir 创建文件夹 make directory</p>
<ul>
<li>-p 递归地创建文件夹 e.g. mkdir -p one/two/three</li>
</ul>
</li>
</ul>
<h2 id="文件复制和移动"><a href="#文件复制和移动" class="headerlink" title="文件复制和移动"></a>文件复制和移动</h2><ul>
<li>cp 拷贝文件 cp new_file new_file_copy<ul>
<li>-r 拷贝目录 cp -r dir dir_copy</li>
<li>通配符 cp *.txt folder 把当前目录下所有 txt 文件拷贝到 folder 目录中</li>
</ul>
</li>
<li>mv 移动文件或目录 or 重命名文件</li>
<li>rm 删除文件<ul>
<li>-i 向用户确认是否删除</li>
<li>-f 强制删除</li>
<li>-r 递归删除 删除目录</li>
</ul>
</li>
<li>rmdir 删除 空 目录</li>
</ul>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><ul>
<li>ln 创建链接(区别)<ul>
<li>硬链接</li>
<li>软链接 -s</li>
</ul>
</li>
</ul>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>如果不设置用户的群组,默认会创建一个和它的用户名一样的群组</p>
<ul>
<li>useradd username 添加用户</li>
<li>passwd username 设置密码</li>
<li>userdel username 删除用户<ul>
<li>-r or –remove 删除家目录</li>
</ul>
</li>
</ul>
<h3 id="群组管理"><a href="#群组管理" class="headerlink" title="群组管理"></a>群组管理</h3><ul>
<li><p>groupadd 添加群组</p>
</li>
<li><p>usermod 修改用户的群组</p>
<ul>
<li>-l 对用户重命名(家目录名字需要手动更改)</li>
<li>-g groupname username 修改用户群组</li>
<li>-G groupname1,groupname2… username 修改用户群组(多个)<ul>
<li>-a 以追加形式添加</li>
</ul>
</li>
</ul>
</li>
<li><p>groups [username] 查看用户所在群组(默认显示当前用户)</p>
</li>
<li><p>groupdel 删除一个已存在的群组</p>
</li>
<li><p>chown (change owner) 更改文件所有者(群组)</p>
<ul>
<li>chown username filename</li>
<li>chown username:groupname filename</li>
<li>-R 递归修改目录的所有子目录和文件的所有者(群组)</li>
</ul>
</li>
<li><p>chgrp (change group)<br>chgrp groupname filename</p>
</li>
<li><p>chmod 修改访问权限<br>r:read - 4<br>w:write - 2<br>x:execute - 1</p>
<p>第一组 rwx 表示文件的所有者对于此文件的访问权限<br>第二组 rwx 表示文件的所属群组的其他用户对于此文件的访问权限<br>第三组 rwx 表示文件的除前两组的其他用户对于此文件的访问权限</p>
<ul>
<li>数字分配<br>chmod number filename</li>
<li>字母分配<ul>
<li><ul>
<li>追加<ul>
<li>chmod u+r file 给 user 添加读的权限</li>
<li>chmod g+w file 给 group 添加写的权限</li>
</ul>
</li>
</ul>
</li>
<li><ul>
<li>移除</li>
</ul>
</li>
<li>= 修改</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Nano-文本剪辑器"><a href="#Nano-文本剪辑器" class="headerlink" title="Nano 文本剪辑器"></a>Nano 文本剪辑器</h2><p>nano filename 打开文件</p>
<ul>
<li>-m 激活鼠标</li>
<li>-i 激活自动缩进功能</li>
<li>-A 激活智能 Home 功能</li>
</ul>
<blockquote>
<p>配置文件多以 rc 结尾(run commands)</p>
</blockquote>
<p>profile 和 bashrc 的区别<br>profile 是非图形界面的终端的配置文件<br>bashrc 是图形化终端的配置文件<br>profile 会调用 bashrc</p>
<p>source bashrc 使 bashrc 的改动立即生效</p>
<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><p>软件仓库的概念<br>如何更改软件仓库的源</p>
<h2 id="man-amp-amp-apropos"><a href="#man-amp-amp-apropos" class="headerlink" title="man &amp;&amp; apropos"></a>man &amp;&amp; apropos</h2><p>man 查看命令的具体内容<br>apropos 根据关键字查找命令<br>whatis man 的精简版</p>
<h2 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h2><h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><p>locate 搜索包含关键字的文件或目录 - locate 在问价你的数据库中查找,对于新创建的文件,可能无法检索到 - updatedb 更新数据库,这样就能够检索到文件了</p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>find 只会查找完全符合条件的文件,可以通过*来扩展查找范围<br>find 命令可以限定查找目录</p>
<ul>
<li>-name 根据名字查找 find /var/log -name “syslog”</li>
<li>-size 根据大小查找 find /var -size -50k 查找小于 50k 的文件</li>
<li>-atime 根据修改时间查找 find /var/log -name “syslog” -atime -7 近 7 天访问的文件</li>
<li>-type d 只查找目录类型 f 只查找文件类型</li>
</ul>
<p>find 可以对查找到的结果进行操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> -name <span class="token string">"*.txt"</span> -printf <span class="token string">"%p - %u<span class="token entity" title="\n">\n</span>"</span>
<span class="token function">find</span> -name <span class="token string">"*.txt"</span> -delete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>关于调用命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> -name <span class="token string">"*.txt"</span> -exec <span class="token function">chmod</span> <span class="token number">600</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>chmod 600 {} \ ;</strong> 不必用双引号括起来<br>{}会用查找到的每个文件来替换<br>;是必须的结尾</p>
<h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><p><strong>G</strong> lobally search a <strong>R</strong> egular <strong>E</strong> xpression and <strong>P</strong> rint</p>
<p>grep 字符串 文件</p>
<ul>
<li><p>-i 忽略大小写</p>
</li>
<li><p>-I 排除二进制文件</p>
</li>
<li><p>-v 只显示文本不在的行 invert</p>
</li>
<li><p>-r 在所有子目录和子文件中查找 recursive</p>
</li>
<li><p>E 使用正则表达式<br>grep -E ^path /etc/profile<br><strong>大部分系统中默认激活正则表达式</strong></p>
</li>
</ul>
<p>sort 为文本排序</p>
<ul>
<li>-o filename 将排序的结果存储到新的文件</li>
<li>-r 倒序排序</li>
<li>-R 随机排序</li>
<li>-n 对数字排序</li>
</ul>
<p>wc 文件的统计<br>可以用来统计行数\字符数\字节数</p>
<ul>
<li>-l lines</li>
<li>-w words</li>
<li>-c 统计字节数</li>
<li>-m 统计字符数</li>
</ul>
<p>unique 删除文件中的重复内容</p>
<ul>
<li>unique filename</li>
<li>unique filename newfilename</li>
<li>-c 统计重复的行数</li>
<li>-d 只显示重复行的值</li>
</ul>
<p>cut 剪切文件的一部分内容</p>
<ul>
<li>-d 分割符</li>
<li>-f 指定第几部分</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cut</span> -d , -f <span class="token number">1,3</span> notes.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="流-amp-amp-管道-amp-amp-重定向"><a href="#流-amp-amp-管道-amp-amp-重定向" class="headerlink" title="流&amp;&amp;管道&amp;&amp;重定向"></a>流&amp;&amp;管道&amp;&amp;重定向</h2><p>重定向 把本来要显示在终端的命令结果,输送到别的地方<br>管道 一个命令的输出作为另一个命令的输入</p>
<h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><ul>
<li>&gt; 重定向到新的文件</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cut</span> -d , -f <span class="token number">1,3</span> notes.csv <span class="token operator">></span> redirect.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>黑洞文件 /dev/null 总是空的文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cut</span> -d , -f <span class="token number">1,3</span> notes.csv <span class="token operator">></span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样就没有输出了</p>
<ul>
<li>&gt;&gt; 重定向到文件的末尾</li>
</ul>
<h3 id="重定向错误输出"><a href="#重定向错误输出" class="headerlink" title="重定向错误输出"></a>重定向错误输出</h3><table>
<thead>
<tr>
<th>文件描述符</th>
<th>名字</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>stdin</td>
<td>标准输入</td>
</tr>
<tr>
<td>1</td>
<td>stdout</td>
<td>标准输出</td>
</tr>
<tr>
<td>2</td>
<td>stderr</td>
<td>标准错误输出</td>
</tr>
</tbody></table>
<p>2&gt;&amp;1 合并输出</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> not_exist_file.csv <span class="token operator">></span> result.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span> errors.log
<span class="token comment"># 加入文件存在,则写入result.txt,如果错误,则写入errors.log</span>

<span class="token function">cat</span> not_exist_file.csv <span class="token operator">></span> result.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>
<span class="token comment"># 将标准输出和标准错误输出都重定向到result.txt中</span>

<span class="token function">cat</span> not_exist_file.csv <span class="token operator">>></span> result.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>
<span class="token comment"># 将标准输出和标准错误输出都追加重定向到result.txt中</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>&lt; 将输入重定向为文件内容<br>&lt;&lt; 将输入重定向为键盘输入 | 以逐行输入的模式</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sort</span> -n <span class="token operator">&lt;&lt;</span> END
<span class="token comment"># 输入字符,遇到END停止(END为自定义的结束符,可更换)</span>

<span class="token function">sort</span> -n <span class="token operator">&lt;&lt;</span> END <span class="token operator">></span> numbers_sorted.txt <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>一个命令的输出作为另一个命令的输入</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">du</span> <span class="token operator">|</span> <span class="token function">sort</span> -nr <span class="token operator">|</span> <span class="token function">head</span>
<span class="token comment"># 列出当前目录下体积前10的文件\目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>花自无情水自流。一种相思，两处闲愁。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫复习(4)mitmproxy &amp;&amp; 寒假作业的部分分析</title>
    <url>/2020-01-19-spider-review-4-mitmproxy/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>到这里，python 爬虫部分的复习也就告一段落了，当然，除了 scrapy，老实说，对于平常爬取几千条这种小打小闹的爬虫，并没有去深入研究 scrapy 的必要（当然，了解还是要了解一下的）。</p>
<p>之前学习爬虫，因为需求的原因，只学习了网页爬虫。趁着寒假有空，再来看一看 app 爬虫是啥样的吧。</p>
<a id="more"></a>

<h1 id="mitmproxy"><a href="#mitmproxy" class="headerlink" title="mitmproxy"></a>mitmproxy</h1><p><a href="https://mitmproxy.org/">官网</a></p>
<p><a href="https://github.com/mitmproxy">github</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>安装本体</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> mitmproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>安装 python 包</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> mitproxy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="3">
<li><p>安装证书</p>
<ol>
<li><p>shell 中输入 mitmdump</p>
</li>
<li><p>将/Users/{用户名}/.matplotlib/目录下的 mitmproxy-ca-cert.pem 发送到移动端(隔空投送即可)</p>
</li>
<li><p>在 <strong>设置</strong> 中信任证书</p>
</li>
</ol>
</li>
</ol>
<p>ps.使用 <strong>shift+cmd+.</strong> 可以查看隐藏文件</p>
<ol start="4">
<li><p>连接代理</p>
<ol>
<li><p>使用 ifconfig 查找本机的 ip 地址</p>
</li>
<li><p>找到 inet，如下图所示，IP 地址为 192.168.3.6</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gb1510c350j30d502z0sx.jpg" alt="image-20200118233542424" loading="lazy"></p>
</li>
</ol>
</li>
</ol>
<p>​ 在设置-&gt;无线局域网-&gt;无线局域网配置-&gt;配置代理</p>
<p>ps. mitmproxy 的端口是 8080</p>
<p>配置部分就到这里，然后测试一下配置是否正确。</p>
<ol>
<li><p>在命令行中输入 <strong>mitmproxy</strong> ， 进入 mitmproxy 的数据流界面。</p>
</li>
<li><p>打开任意的 app，然后发现数据流界面开始跳出很多的响应字段，ok，配置正确。</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gb15d0e0ksj30fq09oab0.jpg" alt="image-20200118234716015" loading="lazy"></p>
</li>
</ol>
<p>上图为结果展示，可以点击字段进入查看详细的信息</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gb15hp8sohj30fs0bvgmv.jpg" alt="image-20200118235147625" loading="lazy"></p>
<p>ps. 这里列一下流界面的快捷键</p>
<blockquote>
<p>?:帮助<br>q:返回 或退出<br>z:清屏<br>j:上一个或向上滑动<br>k:下一个或向下滑动<br>回车键：查看选中的请求<br>h:查看 请求内容 下一个<br>l:查看请求内容 上一个<br>tab：查看请求内容 下一个</p>
</blockquote>
<p><strong>至此，所有的准备工作就都已经完成了，接下来选择一下实验目标吧</strong></p>
<h1 id="mission-start"><a href="#mission-start" class="headerlink" title="mission start"></a>mission start</h1><p>首先当然是选择一个目标 app，这里我选择的是 <em>超星学习通</em> 。这个寒假学校布置了一个读书笔记的任务，叫做 21 天习惯养成，满满的 <strong>形式主义</strong> 的感觉，所以，我就把所有的数据都用爬虫爬下来，来分析一下这个 21 天习惯养成的可行性吧。</p>
<p>mitmproxy 只能抓包，但是抓完之后就罢工了。所以这里使用 mitmdump，它可以和 python 结合使用，对返回的数据进行一个处理。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">response</span><span class="token punctuation">(</span>flow<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">'https://groupyd.chaoxing.com/apis/topic/getTopicListWithPoff?'</span>

    <span class="token keyword">if</span> flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data_list <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>flow<span class="token punctuation">.</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>data_list<span class="token punctuation">)</span>
        json_str <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data_list<span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span><span class="token string">'a+'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>将上述的代码写入 mitmuse1.py 文件中，然后运行</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mitmdump -s mitmuse1.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里我先把所有的 json 数据写入到一个文件里面，然后再对数据进行统一的分析，这样的好处是占用内存小。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gb1mame47mj30s10dfwf8.jpg" alt="image-20200119093308992" loading="lazy"></p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gb1n9p1ksqj30nj0hodm7.jpg" alt="截屏2020-01-19上午10.05.45" loading="lazy"></p>
<p>排名第一的竟然是 <strong>《活着》</strong> ！？因为读过这本书，所以我觉得这个结果过于魔幻现实了。</p>
<p>余华的这本书绝对不是《水浒传》那种老少咸宜的读物，甚至于高中时期我们将他的书戏称为“黑暗圣经”，两倍于第二名《红楼梦》的结果让我有点无法接受(老实说红楼梦排第二也挺魔幻的，但是考虑到院里女生居多就不讨论了…)</p>
<p>排名第三的中规中矩，<strong>《平凡的世界》</strong> 我也读过，这是如中当年的入学推荐读物(满满的回忆)</p>
<p>第四名。。。？？？？？？？？？？？？？？？</p>
<p>于是我开始打发假期的无聊时光。</p>
<p>进行文本进行对比筛查，经过一系列的折腾之后，得到如下的结果。</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gb1mkm5wb8j30rg0i3win.jpg" alt="image-20200119094246243" loading="lazy"></p>
<p>这里只打印出了差异值 <strong>&lt;=5</strong> 的文本，可以看到，差异值越低，文本的相似度越高。</p>
<p>最终可以得出结论，仅仅是在我院的内部的关于活着的 237 篇笔记，就出现了很多的雷同。所以，这次活动的出发点无疑是好的，但是可笑的地方在于， <strong>主体不明，执行不力</strong> ，到头来只是平白增加了很多同学的负担罢了。</p>
<p>要么本着自愿的原则，鼓励报名，宽松监管，自觉养成。</p>
<p>但是既然选择了强制执行，就有必要搭配强有力的监管机制，不然像现在这样，我有足够的理由相信，这次的活动并非是为了“同学们”，而不过是一次常见的劳民伤财的”面子工程”罢了。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>本篇文章是使用 typora 完成的，搭配 ipic 的自动上传图片的功能，确实编辑时的体验比印象笔记好很多。</p>
<p>由于自动化卡在了苹果开发者证书上面（是不是应该配一台安卓机了？），所以本轮的爬虫复习与学习理论上只剩下了 scrapy，接下来几天大概就是佛系生活，等过完年在考虑密码学的事情 8 :dizzy_face:</p>
<p>回家之后，走亲访友，陪老爸看病，经过几天的忙碌，把零零散散的琐事都清了一遍，闲下来之后，主要就干了三件事，一个是涛哥的 XMiner 项目，一个是爬虫，还有就是。。。补电视剧（笑，密码学等爬虫搞完之后再说吧。</p>
<p>做菜方面，也没什么太大的进步，感觉接近一年没有进厨房，很多的手艺都生疏了啊。</p>
<p>久违的和老哥们开黑玩游戏，这才是俺想要的快乐寒假（虽然一直在输 o(╥﹏╥)o</p>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>spider</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>己亥年正月初一:鼠年，新年快乐</title>
    <url>/2020-01-25-2020-spring-festival/</url>
    <content><![CDATA[<h2 id="关于疫情"><a href="#关于疫情" class="headerlink" title="关于疫情"></a>关于疫情</h2><p>各地的疫情警报使得今年的春节有一种别样的味道。</p>
<p>我看到有人心系灾区捐款捐物，也看到有人趁此机会将自己推上舆论的风口攫取利益；我看到有人抱着舍身取义的心态奔赴一线，也看到有人仅将其作为茶余饭后的谈资不值一哂。</p>
<p>灾难面前众生百态，精彩如同一部小说，却远比我看过的任何小说都要精彩。对人的刻画，对社会的刻画，名为现实的大作家，以它的春秋笔法，将一切尽书于人前。</p>
<p>感慨就到这里吧，作为一个程序员，我们能做什么呢？</p>
<p>开启这个项目的起因是 severchain 发起的一个疫情推送功能，但是由于请求次数过多，服务器负载超限，不得已又停止了服务。我虽然不会做推送，但是搭建一个简单的疫情实况 api 还是很熟练地。</p>
<p>正好可以将寒假的两大技能 <strong>爬虫和 Flask</strong> ，做一个综合运用。</p>
<a id="more"></a>

<h3 id="数据的获取"><a href="#数据的获取" class="headerlink" title="数据的获取"></a>数据的获取</h3><p><a href="https://3g.dxy.cn/newh5/view/pneumonia">丁香医生</a></p>
<p><a href="https://voice.baidu.com/act/newpneumonia/newpneumonia">百度播报</a></p>
<p>新浪微博(各地的官方微博)</p>
<p><strong>以上的数据源到 2020 年 1 月 25 日，丁香医生和百度播报的统计数量达成了一致，但是私以为最接近真实情况的还是各地卫生部门官方微博的信息</strong></p>
<p>这里以丁香医生为例。</p>
<pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> requests


headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.87 '</span>
                  <span class="token string">'Safari/537.36 '</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">def</span> <span class="token function">get_info</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'UTF-8'</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> soup

soup <span class="token operator">=</span> get_info<span class="token punctuation">(</span><span class="token string">'https://3g.dxy.cn/newh5/view/pneumonia'</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="数据的存取"><a href="#数据的存取" class="headerlink" title="数据的存取"></a>数据的存取</h3><p>对于这种 <strong>二维、轻量</strong> 的数据，比较好的选择是使用 <em>sqlite</em> 。</p>
<p>简单粗暴地直接只用 csv 文件也并无不可。</p>
<p>更优雅一点的办法是使用 <em>Redis</em> 以键值对的形式存储。</p>
<h3 id="数据的加工"><a href="#数据的加工" class="headerlink" title="数据的加工"></a>数据的加工</h3><p>首先是对原始数据 <em>soup</em> 的数据提取。这里根据丁香的数据传输特性，使用正则模块和 json 模块，对原始数据进行分析</p>
<p>最终的结果如下所示</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
	<span class="token property">"provinceName"</span><span class="token operator">:</span> <span class="token string">"湖北省"</span><span class="token punctuation">,</span>
	<span class="token property">"provinceShortName"</span><span class="token operator">:</span> <span class="token string">"湖北"</span><span class="token punctuation">,</span>
	<span class="token property">"confirmedCount"</span><span class="token operator">:</span> <span class="token number">729</span><span class="token punctuation">,</span>
	<span class="token property">"suspectedCount"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
	<span class="token property">"curedCount"</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>
	<span class="token property">"deadCount"</span><span class="token operator">:</span> <span class="token number">39</span><span class="token punctuation">,</span>
	<span class="token property">"comment"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
	<span class="token property">"cities"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
		<span class="token property">"cityName"</span><span class="token operator">:</span> <span class="token string">"武汉"</span><span class="token punctuation">,</span>
		<span class="token property">"confirmedCount"</span><span class="token operator">:</span> <span class="token number">572</span><span class="token punctuation">,</span>
		<span class="token property">"suspectedCount"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token property">"curedCount"</span><span class="token operator">:</span> <span class="token number">32</span><span class="token punctuation">,</span>
		<span class="token property">"deadCount"</span><span class="token operator">:</span> <span class="token number">38</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"cityName"</span><span class="token operator">:</span> <span class="token string">"黄冈"</span><span class="token punctuation">,</span>
		<span class="token property">"confirmedCount"</span><span class="token operator">:</span> <span class="token number">64</span><span class="token punctuation">,</span>
		<span class="token property">"suspectedCount"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token property">"curedCount"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token property">"deadCount"</span><span class="token operator">:</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
		<span class="token property">"cityName"</span><span class="token operator">:</span> <span class="token string">"孝感"</span><span class="token punctuation">,</span>
		<span class="token property">"confirmedCount"</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>
		<span class="token property">"suspectedCount"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token property">"curedCount"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
		<span class="token property">"deadCount"</span><span class="token operator">:</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        .............<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后将数据进行可视化，形成中国省级单位的疫情地图 <img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gb8tmiweq7j30v90m0juu.jpg" alt="image-20200125150547598" loading="lazy"></p>
<h3 id="持续获取"><a href="#持续获取" class="headerlink" title="持续获取"></a>持续获取</h3><p>以上只是实现了单次的地图绘制，这显然和要求还有很大的差距。如何进行持续地数据爬取与更新呢？</p>
<h4 id="方法一：服务器层面"><a href="#方法一：服务器层面" class="headerlink" title="方法一：服务器层面"></a>方法一：服务器层面</h4><p>对于 <strong>Linux</strong> 熟悉的，可以在 Linux 上设置一个定时启动的任务，按照固定的间隔时间进行数据的爬取与存储</p>
<h4 id="方法二：爬虫层面"><a href="#方法二：爬虫层面" class="headerlink" title="方法二：爬虫层面"></a>方法二：爬虫层面</h4><p>(这是一个替代方案)设置爬虫的睡眠时间 <em>time.sleep</em> ，这无疑是最简单的实现方法，缺点也很明显，程序的健壮性差，很容易出现程序崩溃、停摆的情况</p>
<h3 id="api-制作"><a href="#api-制作" class="headerlink" title="api 制作"></a>api 制作</h3><p>这里使用 flask 进行 api 的制作(一命通关，没有出 bug，忽然感觉这半年的活儿没白干( &gt;﹏&lt;。)～)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@main<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/api/&#123;&#125;/query_by_province'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>api_level<span class="token punctuation">)</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"POST"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">query_by_province</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''
		通过省份的名字进行查询
    :return:
    '''</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
      provinceName <span class="token operator">=</span> provrequest<span class="token punctuation">.</span>get_json<span class="token punctuation">(</span><span class="token punctuation">)</span>
      res <span class="token operator">=</span> Province<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>provinceName <span class="token operator">=</span> provinceName<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
    	<span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'res'</span><span class="token punctuation">:</span>res<span class="token punctuation">.</span>to_json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Expection <span class="token keyword">as</span> e<span class="token punctuation">:</span>
      <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token keyword">return</span> jsonify<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'code'</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="后续发展"><a href="#后续发展" class="headerlink" title="后续发展"></a>后续发展</h3><ul>
<li><p>推送</p>
<p>通过微信等渠道构建 robot，然后实现定向省份的疫情实况推送</p>
</li>
<li><p>数据分析</p>
<p>正如 Google 流感趋势(Google Flu Trends)所做的那样，我们可以根据相关的数据进行一些有效地分析。</p>
<p>另外， <strong>数据是非常珍贵的</strong> ，目前大部分的媒体只会给出纵向的数据，而不会给出横向的数据，所以，这不仅是一个数据加工处理的过程，同样是一个 <strong>数据积累的过程</strong> 。</p>
<p>但是，值得注意的一点是，官方公布的数据不一定为真实数据。</p>
</li>
</ul>
<h2 id="关于鼠年"><a href="#关于鼠年" class="headerlink" title="关于鼠年"></a>关于鼠年</h2><p>人生的第二个本命年，与预想的不太一样，中间出现了太多的波折，以至于我在第一个本命年的时光胶囊里的话大半沦为了空想。</p>
<p>不过本篇不是为了感慨这些所作，就在这里，祝所有的朋友，祝阿套，祝我自己，鼠年大吉<del>~</del></p>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>疫情之下</tag>
      </tags>
  </entry>
  <entry>
    <title>己亥年正月十二:生日快乐</title>
    <url>/2020-02-05-happy-birthday/</url>
    <content><![CDATA[<p><img src="https://ask-fd.zol-img.com.cn/g5/M00/08/08/ChMkJ1nrTbuILjb1AAQeG5kptTkAAhc7ANm2dIABB4z837.jpg" alt="aisi" loading="lazy"></p>
<a id="more"></a>

<p>人生的第二纪在今天正式结束了。</p>
<p>第一纪，也就是在小学毕业这个时间节点上，从一个牙牙学语的孩子到一个踌躇满志的少年，<strong>开拓与建造</strong> ，这是我对第一纪这十二年的总结。</p>
<p>无论什么游戏都能快速上手的游戏达人，与几个完全陌生的人成为 penfriend 互相诉说一些不能道于常人的生活琐事，不知天高地厚地去投稿小说，不断地转学、不断地离别、不断地相聚……在回忆第一纪的时光是，这些松散的、片段的记忆浮现。</p>
<p>大概是因为成绩一直不错的原因，无论是学校还是家人，对我的约束都十分地宽松，也正是因为约束少，所以我可以肆意地去尝试自己喜欢的、感兴趣的事情(熊孩子)。于是，”会玩”逐渐成了我的一个标签，也正因为，无论是在镇上的小学，还是后来去了城里的小学，都能快速地融入各个小团体之中，并成为核心之一。</p>
<p>所以，虽然一直跟着父母东奔西走，不断地和学校里、邻里的朋友们分别，不断地被投入到一个陌生的环境之中，但是却没有变得孤僻乖戾。现在想来，这是很值得庆幸的一件事情吧。</p>
<p>所谓的开拓与建造，就是指人生层面的，不断开拓的人际关系，不断地学习、成长，不断地从一个辉煌走向另一个辉煌，在这片名为人生的白纸上，刻画上特征鲜明的 zxj 的印记。这样的生活，或许称不上有多精彩，但是恣肆而又潇洒。</p>
<blockquote>
<p>因为通信并不发达的原因，很多的朋友在分别之后就没有了联系，这也正是我时常惋惜的地方。直达上次验兵体检，很多的生疏的面孔，带着惊喜的神色喊出”你是 zxj!?”的时候，我才终于意识到，这份联系 <em>虽然沉寂，但是却一直存在</em> 。</p>
</blockquote>
<p>第二纪，大概就是从生病到大学第三个年级，这一段的总结大概就是 <strong>废墟与放纵</strong> 。</p>
<p>多灾多难的第二纪，从一开始因为急性阑尾炎住院，一直持续了 3 年之久的病痛，直接将第一纪的辉煌变成了一片墟场。因为一直在外地住院，加上父母的店面也搬迁过，出院后回归正常社会关系时，忽然发现自己有联系的朋友又一次只剩下了寥寥数人。唯独这一次的打击，沉重而又深刻。说到底，与世隔绝一般地过了两年半，正想大声向这个世界宣告”我回来了”时，却发现面前只是一片废墟，尤其是在面对不再同龄的同学以及一道道异样的目光和显而易见的恶意，仿佛是一碰凉水兜头浇下，寒风吹彻。</p>
<p>于是自闭了一段时间。 因为实在没啥可做的，所以那段时间的年级第一也一直被我占着。也因此遭遇过一些霸凌，不过在中旬，使了一些手段之后让他们明白畏惧之后，也就安静了下来(也正以为如此一直到今天对于这个学校都没有什么归属感)。这段时间的成长是显而易见的，我逐渐脱离了那个天真的把世界当做朋友的个性，开始学会伪装，学会使用一些“社会的技能”。</p>
<p>这段时间的终止符画在第一学期的末尾，几个镇统考，我依旧是第一。几个老师开始有意识地让我进入班级的核心，而因为某个女生的原因，很多的同学也开始愿意倾向于我。</p>
<p>至此，我站在这片墟场之上，带着迷茫，与一种善良和恶念交杂的情绪，开始重建我的人生。</p>
<p>后来，在初三的时候，我认识了小何和德贵。</p>
<p>再后来，我们三人进入了如中，那一年，我 18 岁。小何的家人为我过生日，刚哥也在班里为我买了蛋糕。这是第二纪时，我唯一一个印象深刻地生日。</p>
<p>高中三年，这大概是我人生中第一段完整的，正常的校园时光。理所当然的，认识了很多的新朋友。</p>
<p>三年结束，高考失利，唯一值得庆幸的大概就是我没有拉低母校的本一率吧。</p>
<p>大学，老实说，第二纪在大学通知书寄到家里的那一刻就已经可以结束了，这个我在名单上随意选的一所学校，再一次让我有一种回到了初中的那种不适应的感觉。</p>
<p>所幸，同样是在第三个年头，我结识了心理上所认可的朋友三人，女朋友一人:D。</p>
<p>至此，第二纪正式结束。与第一纪不同，我有了很多的遗憾，被一些人所伤害，也伤害了一些人。但是在时代，在命运面前，个人是如此的无力，我只能悼念我的纯粹的善与纯真，然后拍拍脸，继续前行。</p>
<p><strong>第三纪，我来了。</strong></p>
<p>ps.<br>第一纪的开头是建国以来最大的雪灾和汶川大地震<br>第二纪的开头是席卷全国、波及世界的传染病毒<br>这就是天选之子的牌面吗 o(╥﹏╥)o</p>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
  </entry>
  <entry>
    <title>搭建一个基于flask和redis的代理池(proxy pool)</title>
    <url>/2020-02-08-proxy-pool-base-on-flask-and-redis/</url>
    <content><![CDATA[<p>在进行网页爬虫的项目时，常常会因为爬取的频率过高而触发 <strong>反爬虫机制</strong> ，这时候，面临两个选择：</p>
<ol>
<li>休息片刻。一般反爬虫机制不会进行永久的 IP 封禁，只是暂时限制访问而已，等待封禁时间结束再进行爬取即可。当然对于某些拥有黑名单机制的网站，如果封禁次数过多，封禁的时间也会随着这个次数而提高。</li>
<li>更换 IP。既然我的 IP 被封了，那么我换一个其他的 IP 不就行了。</li>
</ol>
<p>显然，第二种方法更优于第一种，并且更加符合 geek 的风格。但是问题在于，从哪里寻找这样一个 IP 地址呢？</p>
<a id="more"></a>

<p>很多的教材都有<strong>免费代理网站</strong>这样一个概念，但是免费代理面临的一个问题就是，很多的人都在使用，所以往往刚解封就又被封禁了，有的甚至直接就挂在网站的黑名单里。<strong>所以，代理网站提供的 IP 虽然多，但是可用的却非常的少。</strong></p>
<p>小数量的 IP 跟没有一样，那么如何白嫖大量的<strong>免费的有效的</strong>IP 代理呢？</p>
<p>代理网站有很多，假设每个网站能够提供两位数级别的可用 IP，那么统合起来就是一个十分可观的数字了。用来应付<em>个人级</em>的爬虫项目游刃有余。</p>
<p>但是，这又引出一个问题。<strong>每次进行爬虫项目都要先对上千上万的 IP 地址进行一次过滤？</strong> 这无疑是非常地影响效率的。</p>
<p>所以，基于以上的种种问题，引出一个解决方案，建立一个<strong>代理池（proxy pool）</strong> 。</p>
<p>这个想法在某些的教材上面出现过，并且也有类似的项目(<em>但是大多数都已经失效了</em>)，这里笔者决定从零开始，维护一个属于自己的代理池项目。</p>
<h2 id="游戏开始"><a href="#游戏开始" class="headerlink" title="游戏开始"></a>游戏开始</h2><p>进行一个项目，首先要对项目进行一个大致的规划，这个规划没有必要太过于详细，因为作为一个经验不是很充足的菜鸟程序员，永远不知道开发过程中会遇到什么问题，又会迸发出什么样令人拍案的灵感(agile development)。</p>
<p>预计有以下几个模块:</p>
<ul>
<li>getter：负责从各个免费代理网站上<strong>获取</strong>代理，并写入数据库</li>
<li>tester：负责对数据库中的代理进行<strong>测试</strong>，并进行评分</li>
<li>server：随机从数据库中<strong>返回</strong>代理</li>
<li>scheduler：调度器，调度 getter、tester、api 三者的运行</li>
<li>database：数据库接口</li>
</ul>
<p>预计使用到一下的技术：</p>
<ul>
<li>request、bs4 等：爬虫相关的技术，主要用于获取各个代理网站的代理</li>
<li>flask：制作主页面和 api</li>
<li>redis：代理数据库。由于我们是需要完成一个评分机制的代理池，所以可以使用 redis 的有序集合结构，功能简洁，实现便利。</li>
<li>aiohttp：通过协程提高测试效率</li>
<li>MySQL：协同日志数据库</li>
</ul>
<blockquote>
<p>以上的项目主体框架思路来自于 GitHub 的几个热门代理池项目</p>
</blockquote>
<h2 id="1-选取免费代理网站"><a href="#1-选取免费代理网站" class="headerlink" title="1. 选取免费代理网站"></a>1. 选取免费代理网站</h2><p>笔者尝试过很多的代理网站，诸如西刺、快代理、齐云等国内知名的网站，但是发现可用的 IP 比例实在是太少，后来想了想，大抵是国内的爬虫学习者和个人开发者多引用这些网站，所以导致网站的 IP 大量被封吧。</p>
<p>于是笔者去搜索了一些外部的网站，如<a href="https://free-proxy-list.net/">free proxy list</a>等，IP 的可用率确实提高了很多。</p>
<p>至于用不用国内的免费代理，就看个人的需求吧。</p>
<h2 id="2-完成-getter-模块"><a href="#2-完成-getter-模块" class="headerlink" title="2. 完成 getter 模块"></a>2. 完成 getter 模块</h2><p>getter 模块负责<strong>获取免费代理，写入代理池</strong>.</p>
<p>这里以<a href="http://free-proxy.cz/zh/">free_proxy</a>为例，因为笔者发现这个网站的 IP 地址使用了<strong>Base64 加密</strong>，所以 IP 地址被爬虫新手”迫害”的程度较低:D。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64
res_ip <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'Base64.decode\("(.*?)"\)'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
res_port <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'style=\'\'>(\d*)&lt;/span>'</span><span class="token punctuation">,</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
proxy_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>res_ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  proxy <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>res_ip<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">':'</span><span class="token operator">+</span>res_port<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
  proxy_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'http'</span><span class="token punctuation">:</span>proxy<span class="token punctuation">,</span><span class="token string">'https'</span><span class="token punctuation">:</span>proxy<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>得到输出结果如下，也就是我们所需要的代理，将其写入 redis 数据库，getter 的任务到此也就完成了。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'167.99.146.167:80'</span><span class="token punctuation">,</span>
 <span class="token string">'138.197.5.192:8888'</span><span class="token punctuation">,</span>
 <span class="token string">'157.245.123.27:8888'</span><span class="token punctuation">,</span>
 <span class="token string">'103.11.65.160:9090'</span><span class="token punctuation">,</span>
 <span class="token string">'104.248.1.178:8080'</span><span class="token punctuation">,</span>
 <span class="token string">'198.23.239.245:80'</span><span class="token punctuation">,</span>
 <span class="token string">'204.101.4.42:4145'</span><span class="token punctuation">,</span>
 <span class="token string">'159.89.123.57:8080'</span><span class="token punctuation">,</span>
 <span class="token string">'159.203.44.177:3128'</span><span class="token punctuation">,</span>
 <span class="token string">'159.203.87.130:3128'</span><span class="token punctuation">,</span>
 <span class="token string">'35.194.36.69:3128'</span><span class="token punctuation">,</span>
 <span class="token string">'45.55.159.57:27720'</span><span class="token punctuation">,</span>
 <span class="token string">'142.93.57.37:80'</span><span class="token punctuation">,</span>
 <span class="token string">'64.251.21.59:80'</span><span class="token punctuation">,</span>
 <span class="token string">'104.237.227.198:54321'</span><span class="token punctuation">,</span>
 <span class="token string">'198.23.143.5:1080'</span><span class="token punctuation">,</span>
 <span class="token string">'162.223.89.69:1080'</span><span class="token punctuation">,</span>
 <span class="token string">'138.197.164.82:8080'</span><span class="token punctuation">,</span>
 <span class="token string">'167.172.135.255:8080'</span><span class="token punctuation">,</span>
 <span class="token string">'167.114.112.84:80'</span><span class="token punctuation">,</span>
 <span class="token string">'68.183.128.131:9999'</span><span class="token punctuation">,</span>
 <span class="token string">'64.235.204.107:8080'</span><span class="token punctuation">,</span>
 <span class="token string">'38.142.63.146:31596'</span><span class="token punctuation">,</span>
 <span class="token string">'168.169.146.12:8080'</span><span class="token punctuation">,</span>
 <span class="token string">'198.50.177.44:44699'</span><span class="token punctuation">,</span>
 <span class="token string">'104.218.60.89:4145'</span><span class="token punctuation">,</span>
 <span class="token string">'165.234.102.177:8080'</span><span class="token punctuation">,</span>
 <span class="token string">'178.128.176.96:80'</span><span class="token punctuation">,</span>
 <span class="token string">'64.227.51.227:8118'</span><span class="token punctuation">,</span>
 <span class="token string">'23.244.28.27:3128'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当然，仅仅是这一个网站是远远不够的，后面还可以自己选择一些网站并完成对应的 getter 子模块。</p>
<blockquote>
<p>补充说明：</p>
<p>由于我们会通过每一个代理 IP 评分进行代理池的迭代更新，所以在写入数据库时需要一个初始评分。</p>
</blockquote>
<h2 id="3-完成-tester-模块"><a href="#3-完成-tester-模块" class="headerlink" title="3. 完成 tester 模块"></a>3. 完成 tester 模块</h2><p>从 redis 中按照评分的排序批量抽取制定数量的代理 IP，进行测试，并根据测试的结果对对应的评分进行修改。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">conn <span class="token operator">=</span> aiohttp<span class="token punctuation">.</span>TCPConnector<span class="token punctuation">(</span>verify_ssl<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">with</span> aiohttp<span class="token punctuation">.</span>ClientSession<span class="token punctuation">(</span>connector<span class="token operator">=</span>conn<span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            proxy <span class="token operator">=</span> proxy<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
        real_proxy <span class="token operator">=</span> <span class="token string">'http://'</span> <span class="token operator">+</span> proxy
        <span class="token keyword">async</span> <span class="token keyword">with</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>TEST_URL<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> proxy<span class="token operator">=</span>real_proxy
                                <span class="token comment"># , timeout=15</span>
                <span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span>
                                <span class="token punctuation">)</span> <span class="token keyword">as</span> response<span class="token punctuation">:</span>
            <span class="token keyword">if</span> response<span class="token punctuation">.</span>status <span class="token keyword">in</span> VALID_STATUS_CODES<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>decrease<span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请求响应码不合法 '</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">,</span> <span class="token string">'IP'</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span>
    <span class="token keyword">except</span> <span class="token punctuation">(</span>ClientError<span class="token punctuation">,</span> aiohttp<span class="token punctuation">.</span>client_exceptions<span class="token punctuation">.</span>ClientConnectorError<span class="token punctuation">,</span> asyncio<span class="token punctuation">.</span>TimeoutError<span class="token punctuation">,</span> AttributeError<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>decrease<span class="token punctuation">(</span>proxy<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'代理请求失败'</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里使用协程机制，可以同时对多个 IP 地址进行连接测试。</p>
<h2 id="4-完成-server"><a href="#4-完成-server" class="headerlink" title="4. 完成 server"></a>4. 完成 server</h2><p>server 模块使用<em>flask</em>搭建，flask 作为轻量级的 python web 开发框架，天然适合应付这种简洁的 web 网页开发。</p>
<p>为了实现任务，我们需要如下的功能:</p>
<ul>
<li>随机从 redis 中获取一个高分的代理地址</li>
<li>给出一个主页来查看代理池的大致信息（剩余代理数量、爬虫的运行概况、代理池的健康程度等）</li>
<li>固定 redis 和 mysql 的连接</li>
</ul>
<h2 id="5-完成-scheduler"><a href="#5-完成-scheduler" class="headerlink" title="5. 完成 scheduler"></a>5. 完成 scheduler</h2><p>scheduler 的核心任务负责调度 server、getter、tester 的运行，拥有如下的子功能：</p>
<ul>
<li>容量检测&amp;&amp;启停器：检测代理池中可用 IP 的数量。如果超出上限值，则暂停爬虫模块；如果低于下限值，则启动爬虫模块；如果低于临界值，则向管理员发出警告，并休眠进程。</li>
<li>日志记录：<ul>
<li>统计请求 IP 的请求次数</li>
<li>记录错误信息|非法信息</li>
<li>分时段固化代理池的基础信息</li>
</ul>
</li>
</ul>
<p>关于 scheduler 注意以下几点：</p>
<ol>
<li>注意设置子模块的循环时间和循环条件。如，tester 是一直持续不断地运行的；getter 同时受到代理池容量和爬虫爬取频率上限的约束等。</li>
<li>子模块并行运行，互不干涉。</li>
</ol>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Scheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">schedule_tester</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cycle<span class="token operator">=</span>TESTER_CYCLE<span class="token punctuation">)</span><span class="token punctuation">:</span>
        tester <span class="token operator">=</span> Tester<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试器开始运行'</span><span class="token punctuation">)</span>
            tester<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>cycle<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">schedule_getter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cycle<span class="token operator">=</span>GETTER_CYCLE<span class="token punctuation">)</span><span class="token punctuation">:</span>
        getter <span class="token operator">=</span> Getter<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>is_over_threshold<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始抓取代理'</span><span class="token punctuation">)</span>
                getter<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>cycle<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>cycle<span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">schedule_server</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>API_HOST<span class="token punctuation">,</span> API_PORT<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">is_over_threshold</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> POOL_UPPER_THRESHOLD<span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'代理池开始运行'</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> TESTER_ENABLED<span class="token punctuation">:</span>
            tester_process <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_tester<span class="token punctuation">)</span>
            tester_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> GETTER_ENABLED<span class="token punctuation">:</span>
            getter_process <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_getter<span class="token punctuation">)</span>
            getter_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> API_ENABLED<span class="token punctuation">:</span>
            api_process <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>schedule_server<span class="token punctuation">)</span>
            api_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样一来，调度器的编写也就完成了。</p>
<h2 id="6-补充说明"><a href="#6-补充说明" class="headerlink" title="6. 补充说明"></a>6. 补充说明</h2><p>使用 Docker 进行懒人部署，Dockerfile 的配置内容如下。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">FROM python<span class="token punctuation">:</span><span class="token number">3.7</span>
WORKDIR <span class="token operator">/</span>app
COPY <span class="token punctuation">.</span> <span class="token operator">/</span>app
RUN pip install pip <span class="token operator">-</span>U \
    <span class="token operator">&amp;</span><span class="token operator">&amp;</span> pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt
EXPOSE <span class="token number">6800</span>
CMD <span class="token punctuation">[</span><span class="token string">"python"</span><span class="token punctuation">,</span><span class="token string">"run.py"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如此，proxypool 的代建也就完成了，以后再使用爬虫，就只需要从这个代理池里获取代理，就可以进行<strong>高强度</strong>的爬虫作业咯。</p>
<h2 id="7-后续优化思路"><a href="#7-后续优化思路" class="headerlink" title="7. 后续优化思路"></a>7. 后续优化思路</h2><ol>
<li>Redis 是单线程运行的，虽然读写的效率非常之高，但是既然使用了 docker，不妨尝试一下使用 redis 集群，来实现一个超大规模的 proxypool？当然这也只是一个构想，等后面更加深入地学习两者之后，再做讨论吧。</li>
<li>在爬虫获取代理方面写的相对比较粗糙，不排除被反爬虫机制检测到的可能，姑且先用着吧，看看后续的效果具体如何。</li>
</ol>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这次搭建 proxy pool，虽然使用的都是一些已经学习过的技术，但是实际操作的过程中，还有有很多的意外的收获的。</p>
<ul>
<li>在阅读<a href="https://github.com/Python3WebSpider">Python3WebSpider</a> 的代码时，第一次在项目中实践了元类编程，果然这些知识只有到投入使用的时候，才会有更加深刻的体会呢</li>
<li>通过<a href="http://docs.jinkan.org/docs/flask/appcontext.html">官方文档</a>和一些辅助资料深入地学习了 flask 的<strong>应用上下文、应用全局变量</strong>的知识，以往使用 session 的方法虽然也不失为一种策略，但是这样果然合适更 cool 一点。</li>
<li>每一次使用 docker，都仿佛是重新学习了一遍，看来还是基础不够扎实啊。</li>
</ul>
<p>疫情形式还是十分地严峻啊，不过宅居在乡下，吃喝不愁，与世隔绝的日子虽然寂寞，但是也算是新的一种体验吧。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>redis学习笔记(1)</title>
    <url>/2020-02-09-redis-note-1/</url>
    <content><![CDATA[<h1 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h1><h2 id="1-1-常识"><a href="#1-1-常识" class="headerlink" title="1.1 常识"></a>1.1 常识</h2><p>Redis 是用 C 语言开发的一个开源的高性能键值对（key-value）数据库。它通过提供多种键值数据类型来适应不同场景下的存储需求，目前为止 Redis 支持的键值数据类型如下：</p>
<ul>
<li>字符串类型</li>
<li>散列类型</li>
<li>列表类型</li>
<li>集合类型</li>
<li>有序集合类型</li>
</ul>
<a id="more"></a>

<h2 id="1-2-特性"><a href="#1-2-特性" class="headerlink" title="1.2 特性"></a>1.2 特性</h2><ul>
<li>速度快(数据保存在内存中)</li>
<li>持久化(Redis 所有数据保持在内存中,对数据的更新将异步地保存到磁盘上)</li>
<li>多种数据结构</li>
<li>多语言客户端</li>
<li>功能丰富</li>
<li>简单(源代码 23000lines)</li>
<li>主从复制(主服务器同步到从服务器)</li>
<li>高可用\分布式</li>
</ul>
<h2 id="1-3-安装"><a href="#1-3-安装" class="headerlink" title="1.3 安装"></a>1.3 安装</h2><h3 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h3><table>
<thead>
<tr>
<th>文件</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>redis-server</td>
<td>Redis 服务器</td>
</tr>
<tr>
<td>redis-cli</td>
<td>Redis 命令行客户端</td>
</tr>
<tr>
<td>redis-benchmark</td>
<td>Redis 性能测试</td>
</tr>
<tr>
<td>redis-check-aof</td>
<td>AOF 文件修复工具</td>
</tr>
<tr>
<td>redis-check-dump</td>
<td>RDB 文件检查工具</td>
</tr>
<tr>
<td>redis-sentinel</td>
<td>Sentinel 服务器</td>
</tr>
</tbody></table>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>redis-server 最简启动<br>redis-server –port 6380 动态参数启动<br>redis-server configPath 配置文件启动</p>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -antp <span class="token operator">|</span> <span class="token function">grep</span> redis
or
reids-cli -h <span class="token function">ip</span> -p port <span class="token function">ping</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h1 id="2-API"><a href="#2-API" class="headerlink" title="2 API"></a>2 API</h1><h2 id="2-1-基础命令"><a href="#2-1-基础命令" class="headerlink" title="2.1 基础命令"></a>2.1 基础命令</h2><h3 id="2-1-1-字符串"><a href="#2-1-1-字符串" class="headerlink" title="2.1.1 字符串"></a>2.1.1 字符串</h3><p>String 数据结构是简单的 <strong>key-value</strong> 类型，value 其实不仅是 String，也可以是数字，是包含很多种类型的特殊类型，并且是二进制安全的。</p>
<blockquote>
<p>比如序列化的对象进行存储，比如一张图片进行二进制存储，比如一个简单的字符串,数值等等。</p>
</blockquote>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul>
<li>缓存</li>
<li>计数器</li>
</ul>
<h4 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h4><ul>
<li><p>设值：set name zhangsan (说明：多次设置 name 会覆盖)<br>命令：</p>
<ul>
<li><p>setnx key1 value1： (not exist) 如果 key1 不存在，则设值 并返回 1。如果 key1 存在，则不设值并返回 0；</p>
</li>
<li><p>setex key1 10 lx :(expired) 设置 key1 的值为 lx，过期时间为 10 秒，10 秒后 key1 清除（key 也清除）</p>
</li>
<li><p>setrange string range value 替换字符串</p>
</li>
</ul>
</li>
<li><p>取值: get key</p>
</li>
<li><p>删值：del keys</p>
</li>
<li><p>批量写：mset k1 v1 k2 v2 … 一次性写入多个值</p>
</li>
<li><p>批量读：mget k1 k2 k3</p>
</li>
<li><p>一次性设值和读取（返回旧值，写上新值）:getset name lx</p>
</li>
<li><p>数值类型自增减：incr key，decr key 注意这些 key 对应的必须是数字类型字符串,否则会出错,自增或者自减 1</p>
</li>
<li><p>自增或自减指定长度 incrby key increment，decrby key increment 对应的 key 自增或者自减 increment 值</p>
</li>
<li><p>字符串尾部拼接：append key value 向 key 对应的字符串尾部追加 value</p>
</li>
<li><p>字符串长度：strlen key</p>
</li>
</ul>
<h4 id="命令演示"><a href="#命令演示" class="headerlink" title="命令演示"></a>命令演示</h4><p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200209170529-877062.png" alt="image-20200202201918881" loading="lazy"></p>
<h3 id="2-1-2-哈希"><a href="#2-1-2-哈希" class="headerlink" title="2.1.2 哈希"></a>2.1.2 哈希</h3><p>Hash 类型是 String 类型的 field 和 value 的映射表，或者说是一个 <em>String 集合</em> 。</p>
<p>它特别适合 <strong>存储对象</strong> ，相比较而言，将一个对象类型存储在 Hash 类型要存储在 String 类型里占用更少的内存空间，并方整个对象的存取。</p>
<h4 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h4><ul>
<li>设值：hset hashname field value（hset 是设值命令，hashname 是集合名字，field 是字段名，value 是值）</li>
<li>取值：hget hashname field</li>
<li>批量设置：hmset hashname field1 value1 field2 value2 ….</li>
<li>批量取值：hmget hashname field1 field2 …</li>
<li>hsetnx key field value：和 setnx 大同小异</li>
<li>HINCRBY key field increment：指定字段增加指定值</li>
<li>hexists key field：指定 key 中是否存在指定 field，如果存在返回 1，不存在返回 0</li>
<li>hdel key field 删除指定 key 的 hash 的 field</li>
<li>hlen：返回 hash 集合里的所有的键数量(size)</li>
<li>hkeys key：返回 hash 里所有的 field</li>
<li>hvals key：返回 hash 的所有 field 对应的 value</li>
<li>hgetall key：返回 hash 里所有的 field 和 value</li>
</ul>
<h4 id="命令演示-1"><a href="#命令演示-1" class="headerlink" title="命令演示"></a>命令演示</h4><p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200209170533-752821.png" alt="image-20200202204233903" loading="lazy"></p>
<h3 id="2-1-3-列表"><a href="#2-1-3-列表" class="headerlink" title="2.1.3 列表"></a>2.1.3 列表</h3><p>List 类型是一个链表结构的集合，其主要功能有 push、pop、获取元素等。</p>
<p>更详细的说，List 类型是一个双端链表的节后，我们可以通过相关的操作进行集合的头部或者尾部添加和删除元素，List 的设计非常简单精巧，即可以作为栈，又可以作为队列，满足绝大多数的需求。</p>
<h4 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h4><ul>
<li><p>lpush key1 value1 value2…：从头部加入元素（栈，先进后出）</p>
</li>
<li><p>rpush key1 value1 value2 …：从尾部加入元素（队列，先进先出）</p>
</li>
<li><p>linsert key BEFORE|AFTER pivot value<br>该命令首先会在列表中从左到右查找值为 pivot 的元素，然后根据第二个参数是 BEFORE 还是 AFTER 来决定将 value 插入到该元素的前面还是后面</p>
</li>
<li><p>lrange key start stop:获取指定索引内的所有元素,只可从左到右 0 -1 代表所有</p>
</li>
<li><p>lset key index value：将 key 集合中 index 下表的元素替换掉</p>
</li>
<li><p>lrem key count value</p>
<p>lrem 命令会删除列表中前 count 个值为 value 的元素，返回实际删除的元素个数。根据 count 值的不同，该命令的执行方式会有所不同：<br>当 count&gt;0 时， LREM 会从列表左边开始删除。<br>当 count&lt;0 时， LREM 会从列表后边开始删除。<br>当 count=0 时， LREM 删除所有值为 value 的元素。</p>
</li>
<li><p>ltrim key start stop：保留指定 key 的值范围内的数据, 其他数据会删掉, 和 lrange 一样的参数范围</p>
</li>
<li><p>lpop key：从 list 的头部删除元素，并返回删除元素。</p>
</li>
<li><p>rpop key：从 list 的尾部删除元素，并返回删除元素</p>
</li>
<li><p>rpoplpush list1 list2：从 list1 尾部删除元素，并将被移除的元素添加到 list2 的头部，返回被移除的元素，可以实现 MQ</p>
</li>
<li><p>llen key：返回元素个数</p>
</li>
<li><p>lindex key index：返回名称为 key 的 list 中 index 位置的元素</p>
</li>
</ul>
<h4 id="命令演示-2"><a href="#命令演示-2" class="headerlink" title="命令演示"></a>命令演示</h4><p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200209170632-878532.png" alt="image-20200202212137182" loading="lazy"></p>
<h3 id="2-1-4-集合"><a href="#2-1-4-集合" class="headerlink" title="2.1.4 集合"></a>2.1.4 集合</h3><p>set 集合是 string 类型的无序集合，set 是通过 hashtable 实现的，对集合我们可以取交集、并集、差集</p>
<h4 id="命令-3"><a href="#命令-3" class="headerlink" title="命令"></a>命令</h4><ul>
<li>SADD key member [member …]：向名称为 key 的 set 中添加元素，set 集合不允许重复元素。</li>
<li>SMEMBERS key：查看 set 集合中的元素。</li>
<li>SREM key member [member …]：删除 set 集合的元素</li>
<li>SPOP key：随机删除指定 set 中的一个内容并将删除的内容返回</li>
<li>SDIFF key [key …]：差集运算,返回在第一个 set 中存在,第二个 set 中不存在的内容</li>
<li>sdiffstore set4 set2 set3 将 set2 set3 不同元素的比较结果保存到 set4 中</li>
<li>SINTER key [key …]：取交集,集合重复的数据</li>
<li>sinterstore：set3 set1 set2 取交集后保存到 set3</li>
<li>SUNION key [key …]:取并集,因为是 set 所以相同部分只会取一次</li>
<li>sunionstore set3 set1 set2：取并集后保存到 set1</li>
<li>smove set1 set2：从一个 set 集合移动到另一个 set 集合里</li>
<li>SCARD key：查看集合里的元素个数</li>
<li>SISMEMBER key member：判断某个元素是否为集合中的元素，是，返回 1。不是，返回 0。</li>
<li>srandmember key：随机返回一个元素</li>
</ul>
<h4 id="命令演示-3"><a href="#命令演示-3" class="headerlink" title="命令演示"></a>命令演示</h4><p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200209170833-579770.png" alt="image-20200202212759047" loading="lazy"></p>
<h3 id="2-1-5-有序集合"><a href="#2-1-5-有序集合" class="headerlink" title="2.1.5 有序集合"></a>2.1.5 有序集合</h3><p>有序集合和集合一样也是 string 类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个 double 类型的 <strong>分数</strong> 。redis 正是通过分数来为集合中的成员进行 <strong>从小到大</strong> 的排序。</p>
<p>有序集合的成员是唯一的,但分数(score)却 <strong>可以重复</strong> 。</p>
<p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。 集合中最大的成员数为 2^32 - 1 (4294967295, 每个集合可存储 40 多亿个成员)。</p>
<h4 id="命令-4"><a href="#命令-4" class="headerlink" title="命令"></a>命令</h4><ul>
<li>ZADD key score member [score member …]： score 是分, member 是内容, score 必须是数字,向有序集合中添加一个元素，该元素如果存在则更新顺序，如果分值相同元素不同会同时存在两个元素。</li>
<li>ZSCORE key member 获取指定 key 中指定内容的分数</li>
<li>ZREM key member [member …] ：删除 zset 名称 key 中的 member 元素</li>
<li>ZRANGE key start stop [WITHSCORES] 获得排名在某个范围的元素列表,照元素分数从大到小的顺序返回索引从 start 到 stop 之间的所有元素（包含两端的元素）<ul>
<li>[WITHSCORES] 获得排名在某个范围的元素列表,照元素分数从小到大的顺序返回索引从 start 到 stop 之间的所有元素（包含两端的元素）</li>
<li>[WITHSCORES]为可选项,代表是否在结果中显示分数</li>
</ul>
</li>
<li>ZRANK key member 返回有序集合中指定成员的索引（从小到大排序）</li>
<li>ZREVRANK key member 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</li>
<li>ZCARD key 返回集合里所有元素的个数</li>
<li>ZCOUNT key min max 返回集合中 score 在给定区间中的数量</li>
<li>zincrby key increment member： 有序集合中对指定成员的分数加上增量 increment</li>
<li>zrangebyscore key min max [WITHSCORES] [LIMIT offset count] ：通过分数返回有序集合指定区间内的成员<ul>
<li>min max 代表分数范围</li>
<li>offset 代表偏移量,</li>
<li>count 代表获取多少个,类似于数据库</li>
</ul>
</li>
<li>zremrangebyrank key start stop ：移除有序集合中给定的排名区间的所有成员</li>
<li>zremrangebyscore key min max：移除有序集合中给定的分数区间的所有成员</li>
<li>ZINCRBY key increment member ： 增加 memeber 元素的分数 increment，返回值是更改后的分数</li>
</ul>
<h3 id="2-2-高级命令"><a href="#2-2-高级命令" class="headerlink" title="2.2 高级命令"></a>2.2 高级命令</h3><h3 id="2-2-1-常用命令"><a href="#2-2-1-常用命令" class="headerlink" title="2.2.1 常用命令"></a>2.2.1 常用命令</h3><ul>
<li><p>keys _ : 返回满足的所有键 ,可以模糊匹配 比如 keys abc_ 代表 abc 开头的 key</p>
</li>
<li><p>exists key ：是否存在指定的 key，存在返回 1，不存在返回 0</p>
</li>
<li><p>expire key second：设置某个 key 的过期时间 时间为秒</p>
</li>
<li><p>del key:删除某个 key</p>
</li>
<li><p>ttl key：查看剩余时间,当 key 不存在时，返回 -2;存在但没有设置剩余生存时间时，返回 -1,否则，以秒为单位，返回 key 的剩余生存时间。</p>
</li>
<li><p>persist key：取消过去时间</p>
</li>
<li><p>PEXPIRE key milliseconds 修改 key 的过期时间为毫秒</p>
</li>
<li><p>select : 选择数据库 数据库为 0-15（默认一共 16 个数据库）</p>
<p>ps.设计成多个数据库实际上是为了数据库安全和备份</p>
</li>
<li><p>move key dbindex ： 将当前数据中的 key 转移到其他数据库</p>
</li>
<li><p>randomkey：随机返回一个 key</p>
</li>
<li><p>rename key key2：重命名 key</p>
</li>
<li><p>echo：打印命令</p>
</li>
<li><p>dbsize：查看数据库的 key 数量</p>
</li>
<li><p>info：查看数据库信息</p>
</li>
<li><p>config get * 实时传储收到的请求，返回相关的配置</p>
</li>
<li><p>flushdb ：清空当前数据库</p>
</li>
<li><p>flushall ：清空所有数据库</p>
</li>
</ul>
<h3 id="2-2-2-Redis-事务"><a href="#2-2-2-Redis-事务" class="headerlink" title="2.2.2 Redis 事务"></a>2.2.2 Redis 事务</h3><p>Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p>
<pre class="line-numbers language-none"><code class="language-none">事务是一个单独的隔离操作：
	事务中的所有命令都会序列化、按顺序地执行。
	事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。
事务是一个原子操作：
	事务中的命令要么全部被执行，要么全部都不执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一个事务从开始到执行会经历以下三个阶段：</p>
<ul>
<li>开始事务</li>
<li>命令入队</li>
<li>执行事务</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>MULTI 开启事务</li>
<li>EXEC 执行事务</li>
<li>DISCARD 取消事务</li>
<li>WATCH key 监听某个 key 的值是否发生变化,如果发生变化, watch 之后的操作会失败</li>
</ul>
<h4 id="命令演示-4"><a href="#命令演示-4" class="headerlink" title="命令演示"></a>命令演示</h4><p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200209170908-801420.png" alt="image-20200202225636915" loading="lazy"></p>
<h3 id="2-2-3-Redis-数据备份与恢复"><a href="#2-2-3-Redis-数据备份与恢复" class="headerlink" title="2.2.3 Redis 数据备份与恢复"></a>2.2.3 Redis 数据备份与恢复</h3><h4 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h4><pre class="line-numbers language-none"><code class="language-none">Redis SAVE 命令用于创建当前数据库的备份。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h4><pre class="line-numbers language-none"><code class="language-none">如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis 安装目录并启动服务即可。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="2-2-4-Redis-安全"><a href="#2-2-4-Redis-安全" class="headerlink" title="2.2.4 Redis 安全"></a>2.2.4 Redis 安全</h3><p>因为 redis 速度相当快，所以一台比较好的服务器下，一个外部用户在一秒内可以进行 15W 次密码尝试，这意味着你需要设定非常强大的密码来防止暴力破解</p>
<p>可以通过 redis 的配置文件设置密码参数，这样客户端连接到 redis 服务就需要密码验证，这样可以让你的 redis 服务更安全</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /usr/local/redis/conf/redis.conf
编辑配置文件
 修改：<span class="token comment">#reqirepass foobared</span>
 为： reqirepass  redis<span class="token punctuation">(</span>你的密码<span class="token punctuation">)</span>

<span class="token function">pkill</span> redis-server   	关闭redis-server
./bin/redis-server ./conf/redis.conf 	启动redis
./bin/redis-cli 		打开客户端<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>DataBase</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>redis学习笔记(2)</title>
    <url>/2020-02-12-redis-note-2/</url>
    <content><![CDATA[<h1 id="3-进阶功能"><a href="#3-进阶功能" class="headerlink" title="3 进阶功能"></a>3 进阶功能</h1><h2 id="3-1-慢查询"><a href="#3-1-慢查询" class="headerlink" title="3.1 慢查询"></a>3.1 慢查询</h2><p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200212121243-387827.png" alt="image-20200212121241917" loading="lazy"></p>
<a id="more"></a>

<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>慢查询发生在第 3 阶段（执行命令阶段）</li>
<li>客户端超时不一定慢查询，但慢查询是客户端超时的一个可能</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ol>
<li><p>slowlog-man-len</p>
<ol>
<li>先进先出队列</li>
<li>固定长度</li>
<li>保存在内存内，即，随重启而重置</li>
</ol>
</li>
<li><p>slowlog-log-slower-than</p>
<ol>
<li>慢查询阈值（微秒）</li>
<li>slowlog-log-slower-than = 0 ， 记录所有命令</li>
<li>slowlog-log-slower-than &lt; 0, 不记录任何命令</li>
</ol>
</li>
</ol>
<p>配置方法</p>
<ol>
<li>默认值<ol>
<li>config get slowlog-man-len = 128</li>
<li>config slowlog-log-slower-than = 10000</li>
</ol>
</li>
<li>修改配置文件重启<ul>
<li>一旦 Redis 运行之后，不建议进行重启操作</li>
</ul>
</li>
<li>动态配置<ol>
<li>config get slowlog-man-len value</li>
<li>config slowlog-log-slower-than value</li>
</ol>
</li>
</ol>
<h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul>
<li>slowlog get [n] 获取慢查询队列</li>
<li>slowlog len 获取慢查询队列长度</li>
<li>slowlog reset 清空慢查询队列</li>
</ul>
<h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><ol>
<li>slowlog-man-len 不要设置过大。默认 10ms，通常设置 1ms</li>
<li>slowlog-log-slower-than 不要设置过小，通常设置 1000</li>
<li>理解生命周期</li>
<li>定期持久化查询</li>
</ol>
<h2 id="3-2-pipeline"><a href="#3-2-pipeline" class="headerlink" title="3.2 pipeline"></a>3.2 pipeline</h2><p>通常情况下，执行一条命令就需要一次客户端和服务端的交互。而 redis 的命令时间是微秒级别的，那么提高 redis 的执行效率的一个主要方向就是减少服务器与客户端的交互频率。</p>
<p>pipeline 的功能就是将一组命令打包并发送到服务器，在服务器依次执行之后，再将结果打包返回给客户端，这样一来客户端与服务端就只需要交互一次，在涉及大量交互的情境下无疑十分地便利。</p>
<h4 id="tips-1"><a href="#tips-1" class="headerlink" title="tips"></a>tips</h4><ol>
<li>注意每次使用 pipeline 的数据携带量</li>
<li>一个 redis 服务器一次只能运行一条 pipeline</li>
</ol>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>这里我使用 python 对 redis 做了小实验。写入 100000 条数据的情况下，使用 pipeline 和不适用 pipeline 的耗时对比。</p>
<blockquote>
<p>补充说明，这里使用了远程的 redis 服务器，更好地体现出交互过程在整个 redis 数据库操作中所占的时间比重。</p>
</blockquote>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">try_pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> client<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span>transaction<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span>
        <span class="token keyword">for</span> foo <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            key <span class="token operator">=</span> <span class="token string">'uuid_&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>
            p<span class="token punctuation">.</span>pfadd<span class="token punctuation">(</span>key<span class="token punctuation">,</span>foo<span class="token punctuation">)</span>
        p<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">without_pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> foo <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        key <span class="token operator">=</span> <span class="token string">'uuid_&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>
        client<span class="token punctuation">.</span>pfadd<span class="token punctuation">(</span>key<span class="token punctuation">,</span>foo<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出结果如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">try_pipeline <span class="token builtin class-name">:</span> <span class="token number">2.6968681812286377</span>
without_pipeline <span class="token builtin class-name">:</span> <span class="token number">3320.136715888977</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="3-3-发布订阅"><a href="#3-3-发布订阅" class="headerlink" title="3.3 发布订阅"></a>3.3 发布订阅</h2><p>Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。</p>
<p>Redis 客户端可以订阅任意数量的频道。</p>
<p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p>
<p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200212121019-469340.png" alt="p21" loading="lazy"></p>
<blockquote>
<p>类比生产者-消费者模型进行理解。发送者对应生产者，订阅者对应消费者。</p>
</blockquote>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>subscribe channel 进行订阅监听</li>
<li>unsubscribe channel 解除订阅</li>
<li>publish channel message 进行发布消息广播</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>顾名思义，发布订阅的一个典型的应用场景就是实现自动更新的<code>订阅</code>功能(类比于门户网站的<strong>关注</strong>功能)。</p>
<p>还有一个应用场景就是实时聊天系统。</p>
<blockquote>
<p>个人(redis 初学者)感觉 redis 的订阅功能很粗糙，如果追求更加细致的发布订阅动能可以考虑诸如<strong>ActiveMQ</strong>等。</p>
</blockquote>
<p>通过一个 bit 位来表示某个元素对应的值或者状态,其中的 key 就是对应元素本身。Bitmaps 本身不是一种数据结构，实际上它就是字符串（key 对应的 value 就是上图中最后的一串二进制），但是它可以对字符串的位进行操作。 Bitmaps 单独提供了一套命令，所以在 Redis 中使用 Bitmaps 和使用字符串的方法不太相同。可以把 Bitmaps 想象成一个以 位 为单位的数组，数组的每个单元只能存储 0 和 1，数组的下标在 Bitmaps 中叫做偏移量。</p>
<blockquote>
<p>如，zxj 这个字符串</p>
<p>z 对应的二进制值为 01111010</p>
<p>x 对应的二进制值为 01111000</p>
<p>j 对应的二进制值为 01101010</p>
</blockquote>
<h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><p>GETBIT key offset 获取字符串值指定偏移量上的位(bit)</p>
</li>
<li><p>SETBIT key offset value 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</p>
</li>
<li><p>BITCOUNT key [start end] 计算给定字符串中，被设置为 <code>1</code> 的比特位的数量</p>
</li>
<li><p>bitop op dtstkey key [key…] 做多个 bitmap 的 and(交集),or(并集),not(非),xor(异或)操作并将结果保存在 destkey 中</p>
<ul>
<li><pre><code>bitpos key targetBit [start] [end]  计算位图指定范围(start到end,单位为字节，如果不指定就是获取全部)第一个偏移量对应的值等于targetBit的位置
<pre class="line-numbers language-none"><code class="language-none">
&#96;&#96;&#96;bash
127.0.0.1:6379[1]&gt; set zxj zxj2333
OK
127.0.0.1:6379[1]&gt; GETBIT zxj 1
(integer) 1
127.0.0.1:6379[1]&gt; SETBIT zxj 1 0
(integer) 1
127.0.0.1:6379[1]&gt; get zxj
&quot;:xj2333&quot;
127.0.0.1:6379[1]&gt; BITCOUNT zxj
(integer) 27

127.0.0.1:6379[1]&gt; set tt tt
OK
127.0.0.1:6379[1]&gt; BITOP and zxj tt
(integer) 2
127.0.0.1:6379[1]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="3-4-bitmap"><a href="#3-4-bitmap" class="headerlink" title="3.4 bitmap"></a>3.4 bitmap</h2><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><p>参考自<a href="https://blog.csdn.net/lglgsy456/article/details/39394961">redis 用 setbit(bitmap)统计活跃用户</a></p>
<p>如果一个网站有 1 亿用户，假如 user_id 用的是整型，长度为 32 位，每天有 5 千万独立用户访问，如何判断是哪 5 千万用户访问了网站</p>
<h4 id="方式一：用-set-来保存"><a href="#方式一：用-set-来保存" class="headerlink" title="方式一：用 set 来保存"></a>方式一：用 set 来保存</h4><p>使用 set 来保存数据运行一天需要占用的内存为</p>
<pre class="line-numbers language-none"><code class="language-none">32bit * 50000000 &#x3D; (4 * 50000000) &#x2F; 1024 &#x2F;1024 MB，约为200MB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>运行一个月需要占用的内存为 6G，运行一年占用的内存为 72G</p>
<pre class="line-numbers language-none"><code class="language-none">30 * 200 &#x3D; 6G<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="方式二：使用-bitmap-的方式"><a href="#方式二：使用-bitmap-的方式" class="headerlink" title="方式二：使用 bitmap 的方式"></a>方式二：使用 bitmap 的方式</h4><p>如果 user_id 访问网站，则在 user_id 的索引上设置为 1，没有访问网站的 user_id，其索引设置为 0，此种方式运行一天占用的内存为</p>
<pre class="line-numbers language-none"><code class="language-none">1 * 100000000 &#x3D; 100000000 &#x2F; 1024 &#x2F;1024&#x2F; 8MB，约为12.5MB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>运行一个月占用的内存为 375MB，一年占用的内存容量为 4.5G</p>
<p>由此可见，使用 bitmap 可以节省大量的内存资源</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul>
<li>bitmap 是 string 类型，单个值最大可以使用的内存容量为 512MB</li>
<li>setbit 时是设置每个 value 的偏移量，可以有较大耗时</li>
<li>bitmap 不是绝对好，用在合适的场景最好</li>
</ul>
<p>有关 redis bitmap 的更详细知识可以参考掘金的 dzzgml 写的<a href="https://juejin.im/post/5a7dcad0f265da4e6f17d942">Redis-BitMap</a></p>
<h2 id="3-5-HyperLogLog"><a href="#3-5-HyperLogLog" class="headerlink" title="3.5 HyperLogLog"></a>3.5 HyperLogLog</h2><p>Redis 在 2.8.9 版本添加了 HyperLogLog 结构。</p>
<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是，<strong>在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的</strong> 。</p>
<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>
<p>但是，因为 HyperLogLog 只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog 不能像集合那样，返回输入的各个元素。</p>
<blockquote>
<p>什么是基数?<br>比如数据集 {1，2,1,2} 那么这个数据集的基数集为 {1，2}, 基数(不重复元素)为 2。 基数估计就是在误差可接受的范围内，快速计算基数。</p>
</blockquote>
<h4 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h4><ul>
<li>PFADD key element [element …] 新增元素</li>
<li>PFCOUNT key [key…] 获取基数的估计值</li>
<li>PFMERGE destkey sourcekey [sourcekey] 将多个 HyperLogLog 合并为一个 HyperLogLog</li>
</ul>
<h3 id="命令演示"><a href="#命令演示" class="headerlink" title="命令演示"></a>命令演示</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> PFADD 2020_02_09:unique:ids <span class="token string">'uuid-1'</span> <span class="token string">'uuid-2'</span> <span class="token string">'uuid-3'</span> <span class="token string">'uuid-4'</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> PFCOUNT 2020_02_09:unique:ids
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> PFADD 2020_02_09:unique:ids <span class="token string">'uuid-1'</span> <span class="token string">'uuid-90'</span>
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> PFCOUNT 2020_02_09:unique:ids
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>向其中注入 100000 条数据，看看数据库的大小变化如何</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注入数据之前</span>
<span class="token comment"># Memory</span>
used_memory:830624
used_memory_human:811.16K
used_memory_rss:7327744
used_memory_peak:908432
used_memory_peak_human:887.14K
used_memory_lua:33792
mem_fragmentation_ratio:8.82
mem_allocator:jemalloc-3.6.0

<span class="token comment"># 注入数据之后(with HyperLogLog)</span>
<span class="token comment"># Memory</span>
used_memory:890456
used_memory_human:869.59K
used_memory_rss:10792960
used_memory_peak:18084664
used_memory_peak_human:17.25M
used_memory_lua:33792
mem_fragmentation_ratio:12.12
mem_allocator:jemalloc-3.6.0


<span class="token comment"># 注入数据之后(without HyperLogLog)</span>
<span class="token comment"># Memory</span>
used_memory:9760408
used_memory_human:9.31M
used_memory_rss:18481152
used_memory_peak:18084664
used_memory_peak_human:17.25M
used_memory_lua:33792
mem_fragmentation_ratio:1.89
mem_allocator:jemalloc-3.6.0
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>很明显，使用 HyperLogLog 注入 10 万条数据占用的内存为 869.59K -811.16K = <strong>58.43k</strong> , 而直接使用 set 键值对的方法，占用的内存接近<strong>9M</strong> 。</p>
<p>这个差距是非常巨大的，但是天下没有免费的午餐，那么 HyperLogLog 低内存的代价是什么呢？</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>></span> PFCOUNT loglog
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">99556</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>查询一下基数估计值，发现并不是我们所插入的 10 万条那么多。</p>
<p>这就引出了 HyperLogLog 的一个最大的缺点，<strong>有一定的错误率</strong> ，根据官方的数据来看，这个错误率大约是 0.81%.</p>
<p>同时，HyperLogLog 还有一个很显著的缺点，在于 <strong>没法取出单条数据</strong> 。</p>
<p>综上，在使用 HyperLogLog 之前，<em>一定要衡量好是否可以接受它的缺点所带来的损失</em> 。</p>
<h3 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h3><p>更多关于 HyperLogLog 的知识可以看<a href="http://www.rainybowe.com/blog/2017/07/13/%E7%A5%9E%E5%A5%87%E7%9A%84HyperLogLog%E7%AE%97%E6%B3%95/index.html">rainybowe 的 blog</a></p>
<h2 id="3-6-GEO-geospatial"><a href="#3-6-GEO-geospatial" class="headerlink" title="3.6 GEO(geospatial)"></a>3.6 GEO(geospatial)</h2><blockquote>
<p>GEO 特性是 Redis 3.2 版本的特性</p>
</blockquote>
<p>官网的介绍如下，总的来说，就是用来进行地理位置的相关操作的(如：存储经纬度，计算两地距离，范围计算等)</p>
<pre class="line-numbers language-none"><code class="language-none">Adds the specified geospatial items (latitude, longitude, name) to the specified key. Data is stored into the key as a sorted set, in a way that makes it possible to later retrieve items using a query by radius with theGEORADIUS or GEORADIUSBYMEMBER commands.

The command takes arguments in the standard format x,y so the longitude must be specified before the latitude. There are limits to the coordinates that can be indexed: areas very near to the poles are not indexable. The exact limits, as specified by EPSG:900913 &#x2F; EPSG:3785 &#x2F; OSGEO:41001 are the following:

    Valid longitudes are from -180 to 180 degrees.
    Valid latitudes are from -85.05112878 to 85.05112878 degrees.

The command will report an error when the user attempts to index coordinates outside the specified ranges.

Note: there is no GEODEL command because you can use ZREM in order to remove elements. The Geo index structure is just a sorted set.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li><p>geoadd key longitude latitude member [longitude latitude member …] 增加地理位置信息 预处理</p>
</li>
<li><p>geopos key member [member …] 获取地理位置信息</p>
</li>
<li><p>geodist key member1 member2 [unit] 获取两个地理位置之间的距离</p>
</li>
<li><p>GEORADIUS key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [ASC|DESC] [COUNT count] 获取指定位置范围的地理信息位置集合</p>
<ul>
<li>WITHDIST ： 在返回位置元素的同时， 将位置元素与中心之间的距离也一并返回。 距离的单位和用户给定的范围单位保持一致</li>
<li>WITHCOORD ： 将位置元素的经度和维度也一并返回</li>
<li>WITHHASH ： 以 52 位有符号整数的形式， 返回位置元素经过原始 geohash 编码的有序集合分值。 这个选项主要用于底层应用或者调试， 实际中的作用并不大。 命令默认返回未排序的位置元素。 通过以下两个参数， 用户可以指定被返回位置元素的排序方式</li>
<li>COUNT ： 指定返回结果的数量</li>
<li>ASC ： 根据中心的位置， 按照从近到远的方式返回位置元素。DESC ： 根据中心的位置， 按照从远到近的方式返回位置元素</li>
<li>store key ： 将返回结果的地理位置信息保存到指定键</li>
<li>storedist key ：将返回结果距离中心节点的距离保存到指定键</li>
</ul>
</li>
<li><p>GEORADIUSBYMEMBER key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [ASC|DESC] [COUNT count] 获取指定元素范围的地理信息位置集合</p>
</li>
</ul>
<h3 id="命令演示-1"><a href="#命令演示-1" class="headerlink" title="命令演示"></a>命令演示</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> GEOADD cities:locations <span class="token number">116.28</span> <span class="token number">39.55</span> bejing
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> GEOADD cities:locations <span class="token number">117.12</span> <span class="token number">39.08</span> tianjing
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> GEOADD cities:locations <span class="token number">114.29</span> <span class="token number">38.02</span> shijiazhuang <span class="token number">118.01</span> <span class="token number">39.38</span> tangshan <span class="token number">115.29</span> <span class="token number">38.51</span> baoding <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> GEOPOS cities:locations tianjing
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"117.12000042200088501"</span>
   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"39.0800000535766543"</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> GEODIST cities:locations bejing tianjing
<span class="token string">"89206.0576"</span>
<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span> GEORADIUSBYMEMBER cities:locations bejing <span class="token number">150</span> km
<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"bejing"</span>
<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"tianjing"</span>
<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"tangshan"</span>
<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"baoding"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="应用-1"><a href="#应用-1" class="headerlink" title="应用"></a>应用</h3><p>例如</p>
<ul>
<li>微信<strong>摇一摇</strong>功能(即：<em>检索特定地理范围内的使用者</em>)</li>
<li>美团<strong>附近美食</strong></li>
</ul>
<h3 id="补充-2"><a href="#补充-2" class="headerlink" title="补充"></a>补充</h3><p>更多的 GEO 知识可以参看<a href="https://blog.huangz.me/diary/2015/redis-geo.html">Redis GEO 特性简介</a> 和 <a href="https://juejin.im/post/5c525f696fb9a049aa6f806a">Redis GEO &amp; 实现原理深度分析</a></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>到这里，Redis 的基础部分就算是告一段落了。<br>虽然不知道接下来应该如何安排。<br>再接再厉吧。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>关于B站视频的访问量爬虫</title>
    <url>/2020-02-13-PV-spider-of-bilibili/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>“<em>酒香不怕巷子深</em>“，这样的想法在这个时代已经算是非常地消极和落伍的一个思想了。</p>
<p>就像是一部电影，如战狼、哪吒这样，优秀的宣发能够带来远超电影本身质量的收益；而反过来，如闪光少女这样的电影，质量足以称为上乘，但是票房确差强人意，这就是典型的忽视了市场规则的下场。</p>
<p>访问量、点赞、收藏、投币等要素共同决定了一个视频的热度。但是，除了前者之外，都需要一个确切的 B 站账户，笔者目前还没有能力来维持一个基数庞大的 B 站账号池，所以就只能在第一个要素，<strong>点击量</strong> 上下文章咯。</p>
<a id="more"></a>

<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先，先上一个 CSDN 的访问量爬虫。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"user-agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36"</span><span class="token punctuation">&#125;</span>

url <span class="token operator">=</span> <span class="token string">"https://blog.csdn.net/Acher_zxj/article/details/104276531"</span>

count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
	res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"now in loop &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>访问量爬虫的工作原理非常地简单，就是单纯的向服务器发出一个请求，核心的行为<strong>与浏览器访问相类</strong>，每一次访问就算是一个点击量。</p>
<p>不过这里有一个问题，如何让远程服务器承认你的这次访问有效呢？</p>
<p>爬虫本身可以想象为&lt;柯南&gt;中那个小黑人，任谁(服务器)看到这幅打扮的人都会心神警惕吧。而 headers 的作用就是给这个小黑人”变装”，让它看上去更加地像一个”好人”。</p>
<p>这就是笔者上文所说的 <em>与浏览器访问相类</em> ，具体的体现就是 headers 这一行。</p>
<p>这一行规定了爬虫的请求头，这是笔者从自己的浏览器中摘出来的<strong>浏览器请求头</strong>，声明了使用的是什么样的浏览器及其内核版本。</p>
<p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200213202739-538776.png" alt="image-20200213202738417" loading="lazy"></p>
<p>当然，<strong>get</strong> 还有<strong>proxies</strong>这样一个参数，这就相当于是直接给爬虫这个小黑人”换了一个身份”，对于这个有兴趣的可以参看<a href="http://harumonia.top/index.php/archives/212/">构建 proxy pool</a> 一文，这里就不多做赘述了。</p>
<p>之所以先上 CSDN 的访问量爬虫，是因为这个爬虫的实现机制简单，可以作为一个很好的引入案例。</p>
<p>那么，现在开始正餐~</p>
<p>关于 B 站视频的访问量爬虫，有两个很重要的问题需要我们解决。</p>
<ol>
<li>B 站的视频访问是需要登录的，不登录的访问似乎是不计数的(还是只记一次来着)？</li>
<li>B 站视频并不是你<strong>进入页面</strong>时就算是一个访问的，而是你点击了这个视频，即<strong>开始观看</strong>之后，才算是一个视频访问量。</li>
</ol>
<p>由于上述的两个问题，那么很显然我们无法像<em>CSDN 访问量爬虫</em>那样简单地实现了。</p>
<p>关于第一个问题，我们的解决方法很简单。<br>在浏览器中找到你的 cookie，然后将其添加到 headers 中即可。</p>
<p>在解决第二个问题的时候，笔者发现，网络上的主流方法是使用<strong>Selenium</strong>进行自动化的网页访问，模拟点击事件。</p>
<p>这种方法并无不可，但是 Selenium 自动化是真实地启动了 Chrome 内核的，也就是说，它的内存消耗相对很大，进而会拖慢计算机的执行效率，这一点我在以前写 Pixiv 图片爬虫的时候深有体会。</p>
<p>于是，我开始尝试寻找新的方法。2019 年下半年的网站开发工作，让我对<strong>API</strong>这个概念有了更深一层的体会，在每次<strong>点击</strong>开始播放之后，对应的 API 又是什么呢？</p>
<h3 id="1-开始分析网页的-API-结构"><a href="#1-开始分析网页的-API-结构" class="headerlink" title="1. 开始分析网页的 API 结构"></a>1. 开始分析网页的 API 结构</h3><p>以<a href="https://www.bilibili.com/video/av88113854">【德拉科 Draco】个人向踩点混剪（一点都不骚）</a>这个视频为例。</p>
<p>在点击开始之后，一瞬间跳出了一大片的网络请求信息。(难怪 Safari 总是提示 B 站耗能高 (笑))</p>
<p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200213204118-561183.png" alt="image-20200213204116715" loading="lazy"></p>
<h3 id="2-开始寻找”嫌疑人”"><a href="#2-开始寻找”嫌疑人”" class="headerlink" title="2. 开始寻找”嫌疑人”"></a>2. 开始寻找”嫌疑人”</h3><p>主要就是看交互的<strong>参数</strong>和<strong>响应</strong>。</p>
<p>既然要计算点击量，那么在请求中肯定<strong>包含了视频的 av 号和 cid</strong>这些特征信息吧，于是完成第一轮排查。</p>
<p>依然剩下很多，第二轮排查的主要着力点在 API 的名字，优秀的 API 的命名不可能是很随意的，这里我选择相信 B 站程序员的职业素养，于是我赌对了。在挑了两个之后，果然被我命中了。</p>
<p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200213204634-611540.png" alt="image-20200213204634035" loading="lazy"></p>
<p>可以看到，这个名字是<em>h5</em>的小家伙携带了很不得了的信息呢。</p>
<h3 id="3-测试-API"><a href="#3-测试-API" class="headerlink" title="3. 测试 API"></a>3. 测试 API</h3><p>将表单的信息复制下来，我们使用 post 命令来模拟一下，看看是什么结果。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'Host'</span><span class="token punctuation">:</span><span class="token string">'api.bilibili.com'</span><span class="token punctuation">,</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate, br'</span><span class="token punctuation">,</span>
    <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'https://www.bilibili.com'</span><span class="token punctuation">,</span>
    <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://www.bilibili.com/video/av88113854'</span><span class="token punctuation">,</span>
	<span class="token string">'Cookie'</span><span class="token punctuation">:</span><span class="token string">"你的cookie"</span>
<span class="token punctuation">&#125;</span>

data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'aid'</span><span class="token punctuation">:</span><span class="token string">'88113854'</span><span class="token punctuation">,</span>
    <span class="token string">'cid'</span><span class="token punctuation">:</span><span class="token string">'150536365'</span><span class="token punctuation">,</span>
    <span class="token string">'part'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>
    <span class="token string">'mid'</span><span class="token punctuation">:</span><span class="token string">'your mid'</span><span class="token punctuation">,</span>
    <span class="token string">'lv'</span><span class="token punctuation">:</span><span class="token string">'5'</span><span class="token punctuation">,</span>
    <span class="token comment"># 'ftime':'1581244587',</span>
    <span class="token comment"># 'stime':'1581419884',</span>
    <span class="token string">'jsonp'</span><span class="token punctuation">:</span><span class="token string">'jsonp'</span><span class="token punctuation">,</span>
    <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'3'</span><span class="token punctuation">,</span>
    <span class="token string">'sub_type'</span><span class="token punctuation">:</span><span class="token string">'0'</span>
<span class="token punctuation">&#125;</span>

req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://api.bilibili.com/x/click-interface/click/web/h5'</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">,</span>proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当然，不要忘记先”变装”，不然直接就可以进 Bad End 了。</p>
<blockquote>
<p>说明：</p>
<p>ftime 和 stime 这两个参数一直在变动，但是熟悉 Linux 的小伙伴应该知道这是什么意思，所以笔者尝试将这两个参数去掉，果然，没有影响~~<br>mid 和 cookie 是根据每个人的账号信息生成的</p>
</blockquote>
<p>在执行了一遍这个代码之后，发现视频的访问量 <strong>+1</strong> ~</p>
<h3 id="4-完成爬虫"><a href="#4-完成爬虫" class="headerlink" title="4. 完成爬虫"></a>4. 完成爬虫</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time

headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'Host'</span><span class="token punctuation">:</span><span class="token string">'api.bilibili.com'</span><span class="token punctuation">,</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:72.0) Gecko/20100101 Firefox/72.0'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept'</span><span class="token punctuation">:</span> <span class="token string">'application/json, text/javascript, */*; q=0.01'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept-Language'</span><span class="token punctuation">:</span> <span class="token string">'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2'</span><span class="token punctuation">,</span>
    <span class="token string">'Accept-Encoding'</span><span class="token punctuation">:</span> <span class="token string">'gzip, deflate, br'</span><span class="token punctuation">,</span>
    <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'https://www.bilibili.com'</span><span class="token punctuation">,</span>
    <span class="token string">'Connection'</span><span class="token punctuation">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>
    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://www.bilibili.com/video/av88113854'</span><span class="token punctuation">,</span>
	<span class="token string">'Cookie'</span><span class="token punctuation">:</span><span class="token string">"你的cookie"</span>
<span class="token punctuation">&#125;</span>

data_bk1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'aid'</span><span class="token punctuation">:</span><span class="token string">'88113854'</span><span class="token punctuation">,</span>
    <span class="token string">'cid'</span><span class="token punctuation">:</span><span class="token string">'150536365'</span><span class="token punctuation">,</span>
    <span class="token string">'part'</span><span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>
    <span class="token string">'mid'</span><span class="token punctuation">:</span><span class="token string">'your mid'</span><span class="token punctuation">,</span>
    <span class="token string">'lv'</span><span class="token punctuation">:</span><span class="token string">'5'</span><span class="token punctuation">,</span>
    <span class="token comment"># 'ftime':'1581244587',</span>
    <span class="token comment"># 'stime':'1581419346',</span>
    <span class="token string">'jsonp'</span><span class="token punctuation">:</span><span class="token string">'jsonp'</span><span class="token punctuation">,</span>
    <span class="token string">'type'</span><span class="token punctuation">:</span><span class="token string">'3'</span><span class="token punctuation">,</span>
    <span class="token string">'sub_type'</span><span class="token punctuation">:</span><span class="token string">'0'</span>
<span class="token punctuation">&#125;</span>

count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        req <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://api.bilibili.com/x/click-interface/click/web/h5'</span><span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"now in loop &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>proxy_raw<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>


<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'over'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>必要说明：</p>
<p>经过测试，在不更换 ip 和账号的情况下，B 站对每个 ip 的访问频率记数是 400s 左右，所以就以这个时间为睡眠间隔。</p>
<p>同时也是为了防止过度频繁的访问触发反爬虫机制，导致自己的 ip 被封，影响正常使用。</p>
<p><strong>但是，可以同时刷多个视频的播放量</strong></p>
<p>当然，如果使用代理的话，就可以放心大胆地浪了。</p>
</blockquote>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>spider</tag>
        <tag>访问量</tag>
        <tag>BiliBili</tag>
      </tags>
  </entry>
  <entry>
    <title>完成一个自动打卡的脚本</title>
    <url>/2020-02-15-a-Automatic-clocking-script/</url>
    <content><![CDATA[<h1 id="完成一个自动打卡的脚本"><a href="#完成一个自动打卡的脚本" class="headerlink" title="完成一个自动打卡的脚本"></a>完成一个自动打卡的脚本</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于近期疫情猖獗，学校开始要求大家进行每日的健康打卡。</p>
<p>但是对于笔者这种死宅，根本不会出门的那种，每日的打卡基本上都是一模一样的内容。这种情况下打卡反而成了一种负担，如果哪天忙忘了，又免不了被一顿批评。</p>
<p>程序员自然有程序员的解决办法。所以这里就做了一个自动打卡的脚本，托管在服务器上，这样就可以不用去管这件事情咯。</p>
<a id="more"></a>

<h2 id="游戏开始"><a href="#游戏开始" class="headerlink" title="游戏开始"></a>游戏开始</h2><p>技术清单</p>
<ol>
<li>python</li>
<li>Linux</li>
<li>网页制作常识</li>
</ol>
<h3 id="1-捕获-API"><a href="#1-捕获-API" class="headerlink" title="1. 捕获 API"></a>1. 捕获 API</h3><p>交互的一个关键时间节点就在<strong>点击提交的时候</strong>，分析这个时候所有的网络请求，找到向服务器发出请求的那个 api。</p>
<p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200215132905-267194.png" alt="image-20200215132901387" loading="lazy"></p>
<p>这是一个<strong>POST 方法</strong>的 API，我们还要找到 POST 了哪些数据</p>
<p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200215133049-114377.png" alt="image-20200215133047464" loading="lazy"></p>
<p>API 捕获完毕。</p>
<h3 id="2-使用-python-模拟请求"><a href="#2-使用-python-模拟请求" class="headerlink" title="2. 使用 python 模拟请求"></a>2. 使用 python 模拟请求</h3><p>通过 python 向这个 API 发送具有相同数据的 POST 请求，代码如下</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'DATETIME_CYCLE'</span><span class="token punctuation">:</span> <span class="token string">'2020/02/14'</span><span class="token punctuation">,</span>
    <span class="token string">'RYLX_973890'</span><span class="token punctuation">:</span> <span class="token string">'本科生'</span><span class="token punctuation">,</span>
    <span class="token string">'DWMC_52258'</span><span class="token punctuation">:</span> <span class="token string">'人工智能与信息技术学院'</span><span class="token punctuation">,</span>
    <span class="token string">'DLM_368457'</span><span class="token punctuation">:</span> <span class="token string">'masaike'</span><span class="token punctuation">,</span>
    <span class="token string">'XM_28154'</span><span class="token punctuation">:</span> <span class="token string">'masaike'</span><span class="token punctuation">,</span>
    <span class="token string">'RADIO_363902'</span><span class="token punctuation">:</span> <span class="token string">'masaike'</span><span class="token punctuation">,</span>
    <span class="token string">'TEXT_311465'</span><span class="token punctuation">:</span> <span class="token string">'masaike'</span><span class="token punctuation">,</span>
    <span class="token string">'TEXT_834053'</span><span class="token punctuation">:</span> <span class="token string">'masaike'</span><span class="token punctuation">,</span>
    <span class="token string">'RADIO_241490'</span><span class="token punctuation">:</span> <span class="token string">'国内其他城市'</span><span class="token punctuation">,</span>
    <span class="token string">'PICKER_6022'</span><span class="token punctuation">:</span> <span class="token string">'江苏省,南通市,如皋市'</span><span class="token punctuation">,</span>
    <span class="token string">'RADIO_443904'</span><span class="token punctuation">:</span> <span class="token string">'以上都不是'</span><span class="token punctuation">,</span>
    <span class="token string">'RADIO_685230'</span><span class="token punctuation">:</span> <span class="token string">'以上都不是'</span><span class="token punctuation">,</span>
    <span class="token string">'TEXT_252907'</span><span class="token punctuation">:</span> <span class="token string">'36.5'</span><span class="token punctuation">,</span>
    <span class="token string">'TEXT_386522'</span><span class="token punctuation">:</span> <span class="token string">'36.5'</span><span class="token punctuation">,</span>
    <span class="token string">'CHECKBOX_168245'</span><span class="token punctuation">:</span> <span class="token string">'完全健康'</span><span class="token punctuation">,</span>
    <span class="token string">'RADIO_452067'</span><span class="token punctuation">:</span> <span class="token string">'否'</span><span class="token punctuation">,</span>
    <span class="token string">'TEXT_12061'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    <span class="token string">'TEXTAREA_21834'</span><span class="token punctuation">:</span> <span class="token string">''</span>
<span class="token punctuation">&#125;</span>


url <span class="token operator">=</span> <span class="token string">'https://pdc.njucm.edu.cn/pdc/formDesignApi/dataFormSave?wid=9D9A0F8F21FF5286E0533200140A8E52&amp;userId=084517124'</span>


headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">'Host'</span><span class="token punctuation">:</span> <span class="token string">'pdc.njucm.edu.cn'</span><span class="token punctuation">,</span>
    <span class="token string">'Origin'</span><span class="token punctuation">:</span> <span class="token string">'https://pdc.njucm.edu.cn'</span><span class="token punctuation">,</span>
    <span class="token string">'Referer'</span><span class="token punctuation">:</span> <span class="token string">'https://pdc.njucm.edu.cn/pdc/formDesignApi/S/LhU8pTKv'</span><span class="token punctuation">,</span>
    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36'</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span>

res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
<span class="token keyword">if</span> res<span class="token punctuation">.</span>status_code <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'warning!failure.'</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这一步基本上没什么好疑问的，最后判断一下返回码是否是 200。</p>
<h3 id="3-定时执行"><a href="#3-定时执行" class="headerlink" title="3. 定时执行"></a>3. 定时执行</h3><p>这一步可以使用 python 的 time 模块实现，比如程序睡眠 24h 再循环执行一次，但是这样会有一个进程始终活在计算机里，并且一旦计算机运行发生波动，就要重新启动一次，想想就麻烦地头皮发麻。</p>
<p>所以，这里选择使用 Linux 内置的 cron 模块完成。</p>
<h4 id="3-1-修改原来的-python-代码"><a href="#3-1-修改原来的-python-代码" class="headerlink" title="3.1 修改原来的 python 代码"></a>3.1 修改原来的 python 代码</h4><p>原先的 python 代码有一个小问题，_DATETIME_CYCLE_ 这一项被固定了，所以这里使用 python 的 datetime 模块完成时间的动态变化。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">date <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="3-2-Linux-操作"><a href="#3-2-Linux-操作" class="headerlink" title="3.2 Linux 操作"></a>3.2 Linux 操作</h4><h5 id="3-2-1-安装-crontabs-并设置开机自启"><a href="#3-2-1-安装-crontabs-并设置开机自启" class="headerlink" title="3.2.1 安装 crontabs 并设置开机自启"></a>3.2.1 安装 crontabs 并设置开机自启</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> crontabs
systemctl <span class="token builtin class-name">enable</span> crond<span class="token punctuation">(</span>开机启动<span class="token punctuation">)</span>
systemctl start crond<span class="token punctuation">(</span>启动cron服务<span class="token punctuation">)</span>
systemctl status crond<span class="token punctuation">(</span>查看运行状态<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="3-2-2-配置-crontabs"><a href="#3-2-2-配置-crontabs" class="headerlink" title="3.2.2 配置 crontabs"></a>3.2.2 配置 crontabs</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /etc/crontab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>结果如下</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Example of job definition:
.---------------- minute <span class="token punctuation">(</span><span class="token number">0</span> - <span class="token number">59</span><span class="token punctuation">)</span>
<span class="token operator">|</span> .------------- hour <span class="token punctuation">(</span><span class="token number">0</span> - <span class="token number">23</span><span class="token punctuation">)</span>
<span class="token operator">|</span> <span class="token operator">|</span> .---------- day of month <span class="token punctuation">(</span><span class="token number">1</span> - <span class="token number">31</span><span class="token punctuation">)</span>
<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> .------- month <span class="token punctuation">(</span><span class="token number">1</span> - <span class="token number">12</span><span class="token punctuation">)</span> OR jan,feb,mar,apr <span class="token punctuation">..</span>.
<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> .---- day of week <span class="token punctuation">(</span><span class="token number">0</span> - <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Sunday<span class="token operator">=</span><span class="token number">0</span> or <span class="token number">7</span><span class="token punctuation">)</span> OR sun,mon,tue,wed,thu,fri,sat
<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>
* * * * * user-name <span class="token builtin class-name">command</span> to be executed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是一个关于配置服务的参数说明，这里笔者从网上找到了一些更加具体的例子。</p>
<ul>
<li><code>*/30 * * * root /usr/local/mycommand.sh</code> (每天，每 30 分钟执行一次 mycommand 命令)</li>
<li><code>* 3 * * * root /usr/local/mycommand.sh</code> (每天凌晨三点，执行命令脚本，PS:这里由于第一个的分钟没有设置，那么就会每天凌晨 3 点的每分钟都执行一次命令)</li>
<li><code>0 3 * * * root /usr/local/mycommand.sh</code> (这样就是每天凌晨三点整执行一次命令脚本)</li>
<li><code>*/10 11-13 * * * root /usr/local/mycommand.sh</code> (每天 11 点到 13 点之间，每 10 分钟执行一次命令脚本，这一种用法也很常用)</li>
<li><code>10-30 * * * * root /usr/local/mycommand.sh</code> (每小时的 10-30 分钟，每分钟执行一次命令脚本，共执行 20 次)</li>
<li><code>10,30 * * * * * root /usr/local/mycommand.sh</code> (每小时的 10,30 分钟，分别执行一次命令脚本，共执行 2 次）</li>
</ul>
<p>配置完成之后，使用</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">crontab</span> /etc/crontab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>命令重载任务，使我们更改的项目生效。</p>
<h5 id="3-2-3-其他必要说明"><a href="#3-2-3-其他必要说明" class="headerlink" title="3.2.3 其他必要说明"></a>3.2.3 其他必要说明</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">crontab</span> -l      查看任务
<span class="token function">tail</span> -f /var/log/cron     查看运行记录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>一顿操作之后，终于搞完了自动打卡的脚本。</p>
<p>emmmm。。。总共花了大概 20min，感觉如果每天打卡的话反而花的时间会更少一点！？</p>
<p>算了，反正也是闲着(笑</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>疫情之下</tag>
      </tags>
  </entry>
  <entry>
    <title>自用的vim小笔记(1)</title>
    <url>/2020-02-16-vim-note-1/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>随着开发的深入，使用 vim 的频率渐次提升，但是技巧却始终停留在初见阶段（一些技巧虽然学过但是都忘了。。。），极大地影响了开发的效率，所以，再次学习 vim 势在必行。</p>
<a id="more"></a>

<h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h2><table>
<thead>
<tr>
<th align="left">Arguments</th>
<th align="left">Description</th>
</tr>
</thead>
<tbody><tr>
<td align="left">+[num]</td>
<td align="left">Open editor with cursor on line “num”. If “num” is not specified, the cursor will be on the last line of the file.</td>
</tr>
<tr>
<td align="left">+/{pat}</td>
<td align="left">Open editor with cursor on the first occurrence of {pat}.</td>
</tr>
<tr>
<td align="left">-c {command} –cmd {command}</td>
<td align="left">A “ex” command in dowble quotes will be processed against the file specified.</td>
</tr>
<tr>
<td align="left">-b</td>
<td align="left">Binary file mode.</td>
</tr>
<tr>
<td align="left">-C -v</td>
<td align="left">VI compatibility mode. Loses the more advanced vim features.</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left">Diff file mode. Must list all files to perform a diff upon (list 2, 3 or 4 files). Same as vimdiff.</td>
</tr>
<tr>
<td align="left">-g</td>
<td align="left">GUI gvim mode (if compiled in and available).</td>
</tr>
<tr>
<td align="left">-h –help</td>
<td align="left">Print help messages. Also see <code>vimtutor</code></td>
</tr>
<tr>
<td align="left">-i <em>filename</em></td>
<td align="left">Specify viminfo file. Default is <code>~/.viminfo</code></td>
</tr>
<tr>
<td align="left">-r -L</td>
<td align="left">Recovery mode. Used after a crash. The “.swp” file is used. See “:help recovery”.</td>
</tr>
<tr>
<td align="left">-M -R</td>
<td align="left">File modifications and write not allowed.</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">Prohibit “.swp” file generation. Required for special devices of limited space.</td>
</tr>
<tr>
<td align="left">-x</td>
<td align="left">Use encryption when writing files. Will prompt for a crypt key.</td>
</tr>
<tr>
<td align="left">–noplugin</td>
<td align="left">Skip loading plugins.</td>
</tr>
<tr>
<td align="left">–version</td>
<td align="left">Print vim version.</td>
</tr>
</tbody></table>
<h2 id="2-常用命令的复习与强化"><a href="#2-常用命令的复习与强化" class="headerlink" title="2. 常用命令的复习与强化"></a>2. 常用命令的复习与强化</h2><h3 id="2-1-移动"><a href="#2-1-移动" class="headerlink" title="2.1 移动"></a>2.1 移动</h3><h4 id="单词级"><a href="#单词级" class="headerlink" title="单词级"></a>单词级</h4><ul>
<li><code>w</code> or <code>W</code> Move cursor a <strong>word</strong> at a time</li>
<li><code>e</code> or <code>E</code> Move cursor to <strong>end</strong> of word</li>
<li><code>b</code> or <code>B</code> Move cursor <strong>back</strong> a word at a time</li>
</ul>
<blockquote>
<p>对于中文和英文，区分单词的界限不同</p>
</blockquote>
<h4 id="块级"><a href="#块级" class="headerlink" title="块级"></a>块级</h4><ul>
<li><code>gg</code> 到文档第一行</li>
<li><code>G</code> 到文档最后一行</li>
<li><code>0</code> 到行首（第 1 列）</li>
<li><code>^</code> 到第一个非空白字符</li>
<li><code>$</code> 到行尾</li>
<li><code>H</code> 移动到屏幕顶端</li>
<li><code>M</code> 移动到屏幕中间</li>
<li><code>L</code> 移动到屏幕底部</li>
<li><code>Ctrl-d</code> 向下移动半页</li>
<li><code>Ctrl-u</code> 向上移动半页</li>
<li><code>Ctrl-f</code> 向下移动一页</li>
<li><code>Ctrl-b</code> 向上移动一页</li>
<li><code>:&lt;N&gt;</code> or <code>&lt;N&gt;gg</code> 跳转到第 N 行</li>
<li><code>:+&lt;N&gt;</code> or <code>&lt;N&gt;j</code> 向下跳 N 行</li>
<li><code>:-&lt;N&gt;</code> or <code>&lt;N&gt;k</code> 向上跳 N 行</li>
</ul>
<h3 id="2-2-查找"><a href="#2-2-查找" class="headerlink" title="2.2 查找"></a>2.2 查找</h3><ul>
<li><code>*</code> 向后查找光标当前所在单词</li>
<li><code>#</code> 向前查找光标当前所在单词</li>
<li><code>/&lt;search&gt;</code> 向后查找指定字符串</li>
<li><code>?&lt;search&gt;</code> 向前查找指定字符串</li>
<li><code>n</code> 继续查找下一个</li>
<li><code>N</code> 继续查找上一个</li>
</ul>
<p><em>注意： <code>n</code> 和 <code>N</code> 是有方向性的，若你之前通过 <code>*</code> 查找，则 <code>n</code> 会继续向文档尾方向查找，<code>N</code><br>向文档首方向；反之，若你通过 <code>#</code> 查找，则 <code>n</code> 指向文档首，<code>N</code> 指向文档尾</em></p>
<h3 id="2-3-插入"><a href="#2-3-插入" class="headerlink" title="2.3 插入"></a>2.3 插入</h3><ul>
<li>i 当前字符前插入 insert</li>
<li>a 当前字符后插入 append</li>
<li>I 行首插入</li>
<li>A 行尾插入</li>
<li>o 在下一行插入</li>
<li>O 在上一行插入</li>
</ul>
<h3 id="2-4-删除"><a href="#2-4-删除" class="headerlink" title="2.4 删除"></a>2.4 删除</h3><ul>
<li>dd 删除一行并保存到剪切板 delete line (stored in local buffer)<ul>
<li>3dd 删除三行</li>
<li>dw delete word</li>
<li>d) Delete to end of sentence</li>
<li>d$ Delete all characters from cursor to end of line</li>
<li>d- Delete current and previous line</li>
<li>dfx Delete from cursor to first occurance of the letter “x”</li>
<li>d’x Delete from the current line to the line marked with the identifier “x”</li>
<li>‘ad’b Delete from the line of mark “a” to the line marked “b”.</li>
<li>d/cat Delete all characters from the cursor to the next occurance of (but not including) “cat”</li>
</ul>
</li>
<li>cc 删除一行并保存到剪切板，同时进入 insert 模式 <strong>copy</strong> line (stored in local buffer)<ul>
<li>拓展可参照 dd</li>
</ul>
</li>
<li>s 删除当前字符 <strong>Substitute</strong> one character under cursor continue to insert</li>
</ul>
<h4 id="2-5-复制"><a href="#2-5-复制" class="headerlink" title="2.5 复制"></a>2.5 复制</h4><ul>
<li>yy <strong>Yank</strong> (copy) current line into “unnamed” storage buffer.<ul>
<li>扩展看参照 dd</li>
</ul>
</li>
</ul>
<h4 id="2-6-粘贴"><a href="#2-6-粘贴" class="headerlink" title="2.6 粘贴"></a>2.6 粘贴</h4><ul>
<li>p <strong>Paste</strong> unnamed storage buffer after current line.</li>
<li>P <strong>Paste</strong> unnamed storage buffer before current line.</li>
</ul>
<h4 id="2-7-替换"><a href="#2-7-替换" class="headerlink" title="2.7 替换"></a>2.7 替换</h4><ul>
<li><code>r&lt;X&gt;</code> 将当前字符替换为 X <strong>Replace</strong> character</li>
<li><code>gu&lt;X&gt;</code> 将指定的文本转换为小写</li>
<li><code>gU&lt;X&gt;</code> 将指定的文本转换为大写</li>
<li><code>:%s/&lt;search&gt;/&lt;replace&gt;/</code> 查找 search 内容并替换为 replace 内容</li>
</ul>
<h4 id="2-8-撤销、重做"><a href="#2-8-撤销、重做" class="headerlink" title="2.8 撤销、重做"></a>2.8 撤销、重做</h4><ul>
<li><code>u</code> 撤销 <strong>Undo</strong> last change</li>
<li>U <strong>Undo all changes</strong> to entire line</li>
<li><code>Ctrl-c</code> 重做</li>
</ul>
<h4 id="2-9-保存文件"><a href="#2-9-保存文件" class="headerlink" title="2.9 保存文件"></a>2.9 保存文件</h4><ul>
<li><code>:w</code> 保存当前文件</li>
<li><code>:wa</code> 保存全部文件</li>
<li><code>:wq</code> or <code>ZZ</code> 保存并退出</li>
<li><code>:q!</code> or <code>ZQ</code> 强制退出，不保存</li>
<li><code>:saveas &lt;new filename&gt;</code> 文件另存为</li>
<li><code>:w &lt;new filename&gt;</code> 文件另存一份名为 <code>&lt;new filename&gt;</code> 的副本并继续编辑原文件</li>
</ul>
<h3 id="3-进阶操作"><a href="#3-进阶操作" class="headerlink" title="3. 进阶操作"></a>3. 进阶操作</h3><h4 id="3-1-缩进"><a href="#3-1-缩进" class="headerlink" title="3.1 缩进"></a>3.1 缩进</h4><ul>
<li><code>&gt;&gt;</code> 向右缩进当前行</li>
<li><code>&lt;&lt;</code> 向左缩进当前行</li>
</ul>
<h4 id="3-2-自动排版"><a href="#3-2-自动排版" class="headerlink" title="3.2 自动排版"></a>3.2 自动排版</h4><ul>
<li><code>==</code> 自动排版当前行</li>
<li><code>gg=G</code> 当前文档全文自动排版</li>
<li><code>&lt;N&gt;==</code> 对从当前行开始的 N 行进行自动排版</li>
<li><code>=&lt;N&gt;j</code> 对当前行以及向下 N 行进行自动排版</li>
<li><code>=&lt;N&gt;k</code> 对当前行以及向上 N 行进行自动排版</li>
</ul>
<h4 id="3-3-分屏"><a href="#3-3-分屏" class="headerlink" title="3.3 分屏"></a>3.3 分屏</h4><ul>
<li><code>:split</code> 缩写 <code>:sp</code> or <code>Ctrl-w s</code> 上下分屏</li>
<li><code>:vsplit</code> 缩写 <code>:vs</code> or <code>Ctrl-w v</code> 左右分屏</li>
<li><code>:diffsplit</code> 缩写 <code>:diffs</code> diff 模式打开一个分屏，后面可以加上 {filename}</li>
</ul>
<h5 id="窗口跳转"><a href="#窗口跳转" class="headerlink" title="窗口跳转"></a>窗口跳转</h5><ul>
<li><code>Ctrl-w w</code> 激活下一个窗口</li>
<li><code>Ctrl-w j</code> 激活下方窗口</li>
<li><code>Ctrl-w k</code> 激活上方窗口</li>
<li><code>Ctrl-w h</code> 激活左侧窗口</li>
<li><code>Ctrl-w l</code> 激活右侧窗口</li>
</ul>
<h5 id="屏幕缩放"><a href="#屏幕缩放" class="headerlink" title="屏幕缩放"></a>屏幕缩放</h5><ul>
<li><code>Ctrl-w =</code> 平均窗口尺寸</li>
<li><code>Ctrl-w +</code> 增加高度</li>
<li><code>Ctrl-w -</code> 缩减高度</li>
<li><code>Ctrl-w _</code> 最大高度</li>
<li><code>Ctrl-w &gt;</code> 增加宽度</li>
<li><code>Ctrl-w &lt;</code> 缩减宽度</li>
<li><code>Ctrl-w |</code> 最大宽度</li>
</ul>
<h4 id="3-4-标签页"><a href="#3-4-标签页" class="headerlink" title="3.4 标签页"></a>3.4 标签页</h4><h5 id="创建标签页"><a href="#创建标签页" class="headerlink" title="创建标签页"></a>创建标签页</h5><ul>
<li><code>:tabnew</code> or <code>:tabedit</code> 缩写 <code>:tabe</code> 打开新标签页</li>
<li><code>Ctrl-w gf</code> 在新标签页中打开当前光标所在位置的文件名</li>
</ul>
<p><em>注意：<code>:tabnew</code> 和 <code>:tabedit</code> 后面都可以跟一个 &lt;空格&gt;&lt;文件名&gt; 用以在新标签页中<br>打开指定文件，还可以在 <code>:</code> 后面加一个数字，指出新标签页在列表中的位置（从 0 开始）。</em></p>
<h5 id="切换标签页"><a href="#切换标签页" class="headerlink" title="切换标签页"></a>切换标签页</h5><ul>
<li><code>gt</code> or <code>:tabnext</code> 缩写 <code>:tabn</code> 下一个标签页（最后一个会循环到第一个）</li>
<li><code>gT</code> or <code>:tabprevious</code> 缩写 <code>:tabp</code> 上一个标签页（第一个会循环到最后一个）</li>
<li><code>:tabrewind</code> 缩写 <code>:tabr</code> or <code>:tabfirst</code> 缩写 <code>:tabfir</code> 到第一个</li>
<li><code>:tablast</code> 缩写 <code>:tabl</code> 到最后一个标签页</li>
</ul>
<h5 id="关闭标签页"><a href="#关闭标签页" class="headerlink" title="关闭标签页"></a>关闭标签页</h5><ul>
<li><code>:tabclose</code> 缩写 <code>:tabc</code> 关闭当前标签页</li>
<li><code>:-tabc</code> 关闭上一个标签页</li>
<li><code>:+tabc</code> 关闭下一个标签页</li>
<li><code>:tabonly</code> 缩写 <code>:tabo</code> 关闭其他标签页</li>
</ul>
<h2 id="4-Other"><a href="#4-Other" class="headerlink" title="4. Other"></a>4. Other</h2><h3 id="在-vim-中打开其他文件的办法"><a href="#在-vim-中打开其他文件的办法" class="headerlink" title="在 vim 中打开其他文件的办法"></a>在 vim 中打开其他文件的办法</h3><ul>
<li><p><strong>Hyper-Linking to include files:</strong></p>
<ul>
<li>Place cursor over the file name (i.e. <code>#include &quot;fileABC.h&quot;</code>)</li>
<li>Enter the letter combination: <strong>gf</strong><br>(go <em>to</em> file)</li>
</ul>
</li>
<li><p><strong>New session:</strong></p>
<ul>
<li>Use command: “<code>:e filename</code>“<br>Start new edit session on specified file name without closing current vi / vim editor process.</li>
<li>:Explore<br>List files in your current direct</li>
</ul>
</li>
</ul>
<h3 id="Buffer-的使用"><a href="#Buffer-的使用" class="headerlink" title="Buffer 的使用"></a>Buffer 的使用</h3><p>buffer 就是当前 Vim session 的文件历史记录.</p>
<ul>
<li><p>查看：</p>
<ul>
<li><code>:buffers</code></li>
<li><code>:ls</code></li>
</ul>
</li>
<li><p>在 Buffer 之间跳转</p>
<ul>
<li><code>:bn</code> 打开缓存中下一个文件</li>
<li><code>:bp</code> 打开缓存中上一个文件</li>
<li><code>:b&lt;N&gt;</code> 打开缓存中第 N 个文件</li>
</ul>
</li>
</ul>
<blockquote>
<p>你也可以使用 <code>:bdelete&lt;N&gt;</code> 来删除所要关闭的缓冲区，缩写 <code>:bd&lt;N&gt;</code>。</p>
</blockquote>
<h3 id="g命令的使用"><a href="#g命令的使用" class="headerlink" title="g命令的使用"></a><strong>g</strong>命令的使用</h3><p>参考博客<a href="http://einverne.github.io/post/2017/10/vim-global.html">VIm 全局命令 g</a></p>
<h3 id="重复上一次命令"><a href="#重复上一次命令" class="headerlink" title="重复上一次命令"></a>重复上一次命令</h3><ul>
<li><code>.</code> 重复执行上一个命令。</li>
</ul>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>C1.背叛者</title>
    <url>/2020-03-07-C1-The-Betrayer/</url>
    <content><![CDATA[<p>德黑兰王国西部边境，少年兵团营地，夜。</p>
<p>道恩静静地躺在床上，脑海中意识不断地翻腾汹涌，他虽然无法从中捕获到任何有用的信息，但是他清楚，这是自己的灵性在面对危机时的主动预警。而他也正是因为无条件地信任这种虚无缥缈的东西，现在才能以一个活人的身份躺在这里。</p>
<a id="more"></a>

<p>“有危险？但是危险从何而来？”。少年兵团的驻地虽然地处边境，但是前方有西境兵团驻扎，后方又是王国的腹地，按理说应该是十分安全才对。道恩的脑海中不断模拟一个个可能的危机，然后又一个个推翻，迟迟没有头绪，令他不由得有点烦躁。</p>
<p>“道恩，你也睡不着吗”，左边传来乔伊的询问声，他淡蓝色的眼睛在皎月的映照下闪烁着点点星辉。</p>
<p>道恩刚准备回答，克洛确是直接一个鲤鱼打挺跳了起来，”什么嘛，原来你们也没睡啊”。</p>
<p>少年兵团特别任务营，为了培养诸如暗杀、侦查、反侦察等人才而成立，是少年兵团中名副其实的精锐。由于执行任务的特殊性，通常以三人小组为单位。道恩、克洛、乔伊，正是特别任务营的一组。</p>
<p>“嗯”，道恩依旧没有任何的线索，索性暂时就不想了，”我想出去走走”。乔伊和克洛当即表示也要一起出去玩玩。</p>
<p>原则上，兵团夜里除了巡逻的人员，是不允许私自走动的；三人却对此习以为常，因为只要不被发现，那就不算是违反规定。</p>
<p>他们这次确实失算了，刚一出帐，迎面走过来一个面容阴骘的男人。罗德，兵团的副兵团长，欺软怕硬、笑里藏刀，一门心思扑在”升迁”两个字上，很多的行径都被兵团的少年们当做茶余饭后的笑料。</p>
<p>道恩一向与罗德很不对付，因为他能够从罗德的眼中看到那隐晦的厌恶。但是今日不同，他甚至捕捉到了一丝杀念。</p>
<p>“夜里不要乱逛，回营帐，或者军法处置。”罗德恶狠狠地说道，在目送道恩等人进帐之后，便带着一种巡夜士兵离去。</p>
<p>“不太对劲”，道恩仿佛抓到了那一直隐藏在迷雾这种的线索的尾巴，”罗德今天显得太好应付了。”</p>
<p>乔伊也在一旁附和，”来这儿这么久，还是第一次看到罗德亲自巡夜呢。”</p>
<p>“我刚刚瞥了一眼”，克洛补充道，”驻地的灯火比以前要暗很多，说明巡夜的人手减少了。而且能够见到的走动的人，都是成年人。”</p>
<p>“罗德到底想干什么？”，道恩心中疑惑，”看来今天必须要出去逛一逛了呢。”</p>
<hr>
<p>与此同时，少年兵团驻地的四周，一道道黑影俨然已经将这个地方围成了一个铁桶。</p>
<p>罗德结束巡视之后，径直出了驻地东门，一头扎入丛林，一直到一处空旷处。</p>
<p>那里站着一个棕色的短发男人。身着绘有蓝色花纹的银白色铠甲，这在黑兰德是王室才能穿着的配色。他见到罗德，眼睛微微眯起。</p>
<p>“殿下，一切准备就绪。”罗德单膝跪地，尽显卑微。</p>
<p>男人的脸上绽放出残忍的笑容，”全军，目标少年兵团，不留活口。”</p>
<hr>
<p>道恩等人眼看神色匆匆地罗德出了驻地，”有阴谋”，他们现在只能初步肯定这个猜想，但是对有什么阴谋依旧没有头绪。</p>
<p>“算了，不管怎么说，他还能杀了我们不成。”克洛无奈地撇撇嘴，只能以这句话来安慰同伴。</p>
<p>“不，他能。”乔伊忽然出声，他的目光越过丛林，看向了更远的地方。</p>
<p>那里是卡罗领，他们三人的家乡。</p>
<p>道恩一瞬间仿佛明白了什么，”莫尼亚的军队绕过西境军团，本袭西部重镇卡罗领，少年兵团驻地紧邻卡罗，是无论如何都绕不过去的一关。”道恩喃喃道。</p>
<p>“罗德他竟然敢叛国！？”克洛压低声音惊呼。</p>
<p>“做好准备，是与不是，就看今夜了。”道恩不由得又回想起罗德最后一瞥中那隐含的深刻而暴虐的杀意。</p>
<hr>
<p>“莫尼亚的军队夜袭，全军向东撤往卡罗领。”罗德的呼喝声响彻整个少年兵团的驻地，与之一道的，是利箭与空气摩擦而产生的尖锐的啸叫。</p>
<p>早在丛林中的军队开始行动时，道恩便已经察觉到了，随后便发出信号，让塔楼的克洛吹响军哨。</p>
<p>“除了东面，都是莫尼亚的军队，我们被包围了。”克洛一见到道恩，便惊呼道。”快逃吧，我在上面只看到遍地都是黑影，只凭借少年兵团，根本不可能是对手”。</p>
<p>“除了东面？”道恩一惊，”不可能，罗德就是在东面与莫尼亚人接头的……对了，是围三厥一，他们想把少年兵团的人都赶往东面的包围圈里，然后全歼掉。”电光火石之间，道恩已经做出了决断，”前往西面，西境兵团不可能被悄无声息地吃掉，他们一定是绕过西境驻地过来的，我们向西突围，才能有一线生机。”</p>
<p>与回营帐取武器的乔伊回合之后，确是又被罗德给遇上了。</p>
<p>“你们在干什么，快点往东面突围。”罗德表面上似乎是为道恩等人的安危而焦急，一步一步靠近道恩，却是缓缓地抽出了手中的长剑。</p>
<p>“该死的叛国贼。”眼见此事无法善了，道恩决定先发制人，三人当即围攻罗德。</p>
<p>道恩、乔伊、克洛，少年兵团特殊任务营第 23 期摘得”铁三角”荣誉的小组，几乎是一交锋，罗德便被压制，险象环生。</p>
<p>忽然，一柄长剑悍然突入战场，直接逼退了处于上风的三人。持剑的是一个棕发的男子，此刻身上穿着莫尼亚的制式军官铠甲，身上散发出惊人的威势，这种级别的”势”，三人只在西境军团长莫雷德将军身上感受过。</p>
<p>“废物”，棕发男子瞥了一眼罗德嗤笑一身，长剑直指道恩三人。</p>
<p>“敢问阁下是莫尼亚哪支军队的”，道恩出口询问，同时却又是一道暗器射出，直冲男人的面门。他当然不指望得到回答，只是用言谈来分散男人的注意力罢了。</p>
<p>“四殿下小心。”罗德惊呼。四殿下！？莫尼亚的殿下可没排到第四位的，倒是黑兰德，第四顺位继承人，差不多与眼前这个男人同岁。</p>
<p>乔伊神色一变再变，这在他这个一向沉稳的人身上相当罕见。男人的剑锋指向乔伊，”聪明的小子，我这里正缺人才，不如你投靠我，可以保你一条性命。”</p>
<p>“没办法善了了，你们撤，我断后。”乔伊一瞬间就有了决断，手上的纹章散发出熠熠的光辉。</p>
<p>道恩没有任何犹豫，拉起克洛便抽身而退。14 年的相处，他再了解乔伊不过，既然有了决断，就没有必要拖泥带水。</p>
<p>罗德眼看道恩就要遁逃，叫上一队人马便追赶上去。</p>
<hr>
<p>“这是一个阴谋，彻头彻尾的阴谋！”道恩恨声道，”四皇子想以少年兵团为代价，以为少年兵团复仇为借口，发动对莫尼亚的战争，从而获得争夺皇位的功绩。”</p>
<p>一瞬间想明白的不止是乔伊，道恩也在刹那间就想通了今晚发生的一切的前因后果。所以他不顾乔伊的生死，一定要将这个情报送到西境兵团。因为战争机器一旦启动，第一个吞噬的就是位于边境的卡罗领，他们的家乡。</p>
<p>克洛远没有道恩这样”冷血”，他只能默默地跟在道恩的后面。在过去，每当他迷茫时，只要无条件地信任这个人，就能够走出阴霾。所以，即使他对道恩的所作所为颇有怨念，但是依旧愿意跟随他行动。</p>
<p>“话说回来，罗德真是愚蠢，竟然将这么重要的事情给暴露了。”克洛许是为了活跃气氛，干巴巴地说道。</p>
<p>“他不是蠢，如果我们不知道这件事情的真相，那我们就有一线生机，因为我们是’少年兵团的幸存者，目睹了莫尼亚军队暴虐行径的见证人’，他这是彻底断了我们的退路，现在根本没有什么回旋的余地了，四皇子一定会不惜代价地追杀我们。”道恩对一切心如明镜。”快要到了，前面就是断崖，现在各个路线都被罗德封死，那里将是我们的最后的生机所在。”</p>
<hr>
<p>眼看着站在悬崖边上的道恩，罗德露出了畅快的笑容。</p>
<p>“罗德，唯一让我想不明白的是，为什么你如此痛恨我，我跟你在进少年兵团之前应该没有任何交集才对。”道恩疑惑地问道。</p>
<p>罗德显然心情十分愉悦，”因为你那惹人生厌的黑发黑瞳，哼。”</p>
<p>道恩忽然想起来，罗德的父母就是死在了 16 年前与东方帝国的战争之中，而他一直念叨的”复兴祖上的荣光”中的”复兴”，也是根源于此。</p>
<p>“因为不敢与强大的东方帝国对抗，就将仇恨迁怒于自己的同胞吗？罗德，你可真是可笑啊。”道恩嗤笑道，脸上表现出不屑与怜悯混杂的神色。</p>
<p>罗德可不会着了这拙劣的激将法，他明白，单打独斗，他可不是道恩的对手，于是后退到身后的队伍中，防止道恩临死反扑。</p>
<p>“道恩，安心地死吧。我会把你投靠莫尼亚的’光辉事迹’好好宣扬的。’叛国者’，道恩·布莱特，哼哼，哈哈”</p>
<p>道恩不屑一笑，”罗德，你最好祈祷我会死在这里，不然，乔伊的仇，少年兵团袍泽的仇，我会一一让你偿还。”</p>
<p>说罢，纵身跃入峡谷。</p>
<p>“拦住他”，罗德惊呼一声，却已经太迟，等到他跑到崖边，却只是隐约听到了两声沉闷的落水声，随后便被湍急的流水声所掩去。</p>
<hr>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>闲着无聊，悄悄摸一章…………</p>
]]></content>
      <categories>
        <category>摸摸摸</category>
      </categories>
  </entry>
  <entry>
    <title>(打卡)接雨水</title>
    <url>/2020-04-04-catch-rain/</url>
    <content><![CDATA[<blockquote>
<p>难得遇到一道困难的打卡题，就在这里写一下过程吧（虽然并不是很困难。。。）</p>
</blockquote>
<p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/2824310140.png?Expires=1602313299&" alt="p1" loading="lazy"></p>
<p>上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）</p>
<a id="more"></a>

<p>示例:</p>
<blockquote>
<p>输入: [0,1,0,2,1,0,1,3,2,1,2,1]<br>输出: 6</p>
</blockquote>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/old_articles/1989192964.png?Expires=1602313313&" alt="p2" loading="lazy"></p>
<h2 id="解"><a href="#解" class="headerlink" title="解"></a>解</h2><p>首先想到的应该就是暴力法。不过暴力法没有多少分析的价值，所以略过不谈。</p>
<p>个人认为，无论何时，暴力法都应该作为一个最后的保命手段来用比较好的。如果条件允许，还是去追求一些高效率的解法，这样每日的打卡才有意义。</p>
<p>这里用分解子问题的思路，将这个问题进行拆分。</p>
<p>两根柱子之间可以存放多少水？</p>
<ol>
<li>由范围内第二高的柱子决定</li>
<li>去掉范围内的柱子占有的空间</li>
</ol>
<p>如此一来，子问题的条件就集齐了。同时，这个问题具有迭代性质。</p>
<p>思路部分到这里就结束了。</p>
<p>以下为代码，这里首次尝试了全迭代器的写法，感觉还不错，有复健的感觉了。</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> <span class="token function">size</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> maxPosition <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>height<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">auto</span> left <span class="token operator">=</span> maxPosition<span class="token punctuation">;</span>
        <span class="token keyword">auto</span> right <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>maxPosition<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>height<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">!=</span> height<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            left <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>height<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>maxPosition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>maxPosition<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span>left <span class="token operator">-</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>maxPosition<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            maxPosition <span class="token operator">=</span> left<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        maxPosition <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>height<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">!=</span> height<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            res<span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">distance</span><span class="token punctuation">(</span>maxPosition<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token operator">*</span>right <span class="token operator">-</span> <span class="token function">accumulate</span><span class="token punctuation">(</span>maxPosition<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            maxPosition <span class="token operator">=</span> right<span class="token punctuation">;</span>
            right <span class="token operator">=</span> <span class="token function">max_element</span><span class="token punctuation">(</span>maxPosition<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>height<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>leetcodeの解题日志</category>
      </categories>
  </entry>
  <entry>
    <title>雨课堂习题爬虫+文字识别</title>
    <url>/2020-04-29-rain-classroom-exercises-spider-and-OCR/</url>
    <content><![CDATA[<p>感觉已经一万年没有更新博客了。。。这次是制作一个简单的爬虫。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本学期有一门纯文科的课程，名唤“医疗仪器原理”。谓之纯文科，自然是要背诵的题目太多了，多到了梦回高中历史的地步= =。</p>
<p>授课老师喜欢使用雨课堂发布习题，但是雨课堂没有办法导出题目和答案，想要整理就只能一条一条地复制粘贴，更骚的是，这个网站的题目默认被转成了图片格式(？？？)。好嘛，复制粘贴都做不到了。</p>
<p><img src="https://i.loli.net/2020/04/29/WhZH5pTk1MvJULc.png" alt="图片.png" loading="lazy"></p>
<p>这种复习的效率实在是太低了，于是准备重操旧业，开始爬虫工程（面向监狱编程）</p>
<a id="more"></a>

<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="S1-抓包分析"><a href="#S1-抓包分析" class="headerlink" title="S1 抓包分析"></a>S1 抓包分析</h3><p>在进行交互分析之后，发现了一个有趣的链接，这个链接的文本量大得出奇，而且类型是 json！~一般这样的链接，就是我们交互分析的最终目标了。</p>
<p><img src="https://i.loli.net/2020/04/29/SPQrEik3UldRMX9.png" alt="图片.png" loading="lazy"></p>
<p>这样一来，数据来源问题就解决了。</p>
<p>继续分析，他所有的题目和答案都是保存为图片，然后给出了一个图片链接。第一次见到这种奇葩的设计，难道是为了防止我这种”数据小偷”吗?</p>
<p>图片可以直接抓下来，但是就这样贴到笔记本上，十分地麻烦，关键是不美观啊。</p>
<p>于是想到了一个解决方案，OCR~</p>
<h3 id="S2-OCR"><a href="#S2-OCR" class="headerlink" title="S2 OCR"></a>S2 OCR</h3><p>这里我选择直接使用百度的 OCR api，百度家的识别率不错，而且文档也挺齐全的，这里就不多做赘述了，直接放上<a href="https://cloud.baidu.com/doc/OCR/s/Sk3h7xyad">文档链接</a>。</p>
<p>不过在识别的过程中倒是出现了一个小插曲。</p>
<h4 id="png-问题"><a href="#png-问题" class="headerlink" title="png 问题"></a>png 问题</h4><p>第一次识别之后，明明本地每个文字都很清楚，但是识别结果就是空。由于这是一个黑盒的过程，我也不知道中间到底是出了什么问题。</p>
<p>我能想到的第一个解决思路就是尽量拆解黑盒。于是我又找了一家 OCR，然后就发现过程中出现了这样的情况。</p>
<p><img src="https://i.loli.net/2020/04/29/1Yec5JlBIDnx7bQ.png" alt="截屏2020-04-29下午1.42.30.png" loading="lazy"></p>
<p>无背景的 png 格式的图片，上传之后背景默认被填充为了黑色，这样就与原本的文字颜色(黑色)冲突了，直接把文字给同化了。</p>
<h3 id="图像预处理"><a href="#图像预处理" class="headerlink" title="图像预处理"></a>图像预处理</h3><p>我对于数字图像的本质理解并不是很深刻，无法从编码层面解决问题，不过条条大路通罗马。</p>
<p>我的解决思路就是对图像进行一个预处理，赋予图像一个背景颜色，然后再进行 OCR。这个背景颜色自然是与文字颜色越泾渭分明越好，于是选择了白色。</p>
<p><img src="https://i.loli.net/2020/04/29/Iek1qN6YBwfJSbn.png" alt="1.png" loading="lazy"></p>
<p>如此，清晰明了。进行 OCR 之后，顺利识别出了我们需要的内容。</p>
<h3 id="S3-爬虫"><a href="#S3-爬虫" class="headerlink" title="S3 爬虫"></a>S3 爬虫</h3><h4 id="S3-1-批量分析"><a href="#S3-1-批量分析" class="headerlink" title="S3.1 批量分析"></a>S3.1 批量分析</h4><p>真的是有够别扭的，雨课堂所有的答案也是保存为图片格式的，最令人发指的是，他的选择题竟然是拆分的图片，也就是说，一个 ABCD 四项的选择题，连上题目一共有 5 张图。。。</p>
<h4 id="S3-2-区分题型"><a href="#S3-2-区分题型" class="headerlink" title="S3.2 区分题型"></a>S3.2 区分题型</h4><p>回传的数据中，并没有出现类似‘选择’、‘判断’这种能够显示地区分题型的字段。</p>
<p>在分析之后，发现所有的题型可以归总为三大类，选择、填空、解答。</p>
<p>选择题的判断很简单，选择题的答案都是由 ABCD 这样的字母构成，用正则判断是否是全英文答案即可。</p>
<blockquote>
<p>小插曲：忘记了多选题，报错。</p>
<p>其实无论是”A”还是”ABC”，在 python 中都是字符数组，不需要区分单选还是多选，直接遍历字符串即可。然后把得到的结果拼接起来就行了。</p>
</blockquote>
<p>解答题有一个不知道有啥用的特殊字段，正好我们可以那然作为判断标志。</p>
<p>剩下来的就是填空题咯。</p>
<h3 id="S4-结果"><a href="#S4-结果" class="headerlink" title="S4 结果"></a>S4 结果</h3><p>最终爬虫的结果如下（部分）</p>
<pre class="line-numbers language-none"><code class="language-none">7 :   尿液分析仪通常由[填空1]填空2]和[填空3]三部分组成
 &#123;&#39;1&#39;: &#39;机械系统&#39;, &#39;2&#39;: &#39;光学系统&#39;, &#39;3&#39;: &#39;电路系统&#39;&#125;
8 :   临床应用最普遍的自动化血培养检测系统主要有利用感受器的[填空1和利用培养基中变化的[填空2两种检测技术。
 &#123;&#39;1&#39;: &#39;比色法&#39;, &#39;2&#39;: &#39;荧光测定法&#39;&#125;
9 :   聚合酶链反应技术类似于DNA的天然复制过程,其特异性依赖于靶序列两端互补的寡核苷酸引物,由[填空们、[填空2]、[填空3]三个基本反应步骤构成。
 &#123;&#39;1&#39;: &#39;变性&#39;, &#39;2&#39;: &#39;退火&#39;, &#39;3&#39;: &#39;延伸&#39;&#125;
10 :   血液细胞分析仪的血细胞计数原理是()
 电阻抗脉冲法
11 :   使用鞘流技术的设备是()
 流式细胞仪
12 :   流式细胞仪的荧光检测使用()
 光电倍增管
13 :   全自动血凝仪基本组成不包括
 紫外线产生系统<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>识别率尚可~</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">ans_dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span>
url <span class="token operator">=</span> <span class="token string">'https://www.yuketang.cn/v2/api/web/quiz/quiz_result?classroom_id=*****&amp;quiz_id=****'</span>
headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    涉及隐私，战术打码
<span class="token punctuation">&#125;</span>
req <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
slides <span class="token operator">=</span> req<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Slides'</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">pic_process</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">)</span>
    x<span class="token punctuation">,</span>y <span class="token operator">=</span> im<span class="token punctuation">.</span>size
    p <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGBA'</span><span class="token punctuation">,</span> im<span class="token punctuation">.</span>size<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>im<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> im<span class="token punctuation">)</span>
    pic_processed_path <span class="token operator">=</span> pic_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'pre_process'</span><span class="token punctuation">,</span><span class="token string">'process'</span><span class="token punctuation">)</span>
    p<span class="token punctuation">.</span>save<span class="token punctuation">(</span>pic_processed_path<span class="token punctuation">)</span>
    <span class="token keyword">return</span> pic_processed_path

<span class="token keyword">def</span> <span class="token function">ocr</span><span class="token punctuation">(</span>pic_processed_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    request_url <span class="token operator">=</span> <span class="token string">"https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic"</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>pic_processed_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>
    img <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"image"</span><span class="token punctuation">:</span>img<span class="token punctuation">&#125;</span>
    access_token <span class="token operator">=</span> 继续打码
    request_url <span class="token operator">=</span> request_url <span class="token operator">+</span> <span class="token string">"?access_token="</span> <span class="token operator">+</span> access_token
    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">&#125;</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>request_url<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">'words_result'</span> <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>foo<span class="token punctuation">[</span><span class="token string">'words'</span><span class="token punctuation">]</span> <span class="token keyword">for</span> foo <span class="token keyword">in</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'words_result'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>pic_processed_path<span class="token punctuation">,</span><span class="token string">'failed.'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>slides<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    answer <span class="token operator">=</span> slides<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'result'</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>answer<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'(\D+)'</span><span class="token punctuation">,</span>answer<span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">:</span>
        fin_answer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> foo <span class="token keyword">in</span> answer<span class="token punctuation">:</span>
            name <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'.*?cn/(.*)'</span><span class="token punctuation">,</span>slides<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Shapes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ans_dic<span class="token punctuation">[</span>foo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'URL'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            pic_url <span class="token operator">=</span> slides<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Shapes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ans_dic<span class="token punctuation">[</span>foo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'URL'</span><span class="token punctuation">]</span>
            req_pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pic_url<span class="token punctuation">)</span>
            pic_path <span class="token operator">=</span> <span class="token string">'yuketang_pic/pre_process/'</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">'.png'</span>
            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
                <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>req_pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
            pic_process_path <span class="token operator">=</span> pic_process<span class="token punctuation">(</span>pic_path<span class="token punctuation">)</span>
            answer <span class="token operator">=</span> ocr<span class="token punctuation">(</span>pic_process_path<span class="token punctuation">)</span>
            fin_answer<span class="token punctuation">.</span>append<span class="token punctuation">(</span>answer<span class="token punctuation">)</span>
        answer <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>fin_answer<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">'is_subject_finish'</span> <span class="token keyword">in</span> slides<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        answer <span class="token operator">=</span> slides<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Problem'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Remark'</span><span class="token punctuation">]</span>

    name <span class="token operator">=</span> re<span class="token punctuation">.</span>match<span class="token punctuation">(</span><span class="token string">'.*?cn/(.*)'</span><span class="token punctuation">,</span>slides<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Shapes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'URL'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    pic_url <span class="token operator">=</span> slides<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'Shapes'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'URL'</span><span class="token punctuation">]</span>
    req_pic <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pic_url<span class="token punctuation">)</span>
    pic_path <span class="token operator">=</span> <span class="token string">'yuketang_pic/pre_process/'</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">'.png'</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>req_pic<span class="token punctuation">.</span>content<span class="token punctuation">)</span>
    pic_process_path <span class="token operator">=</span> pic_process<span class="token punctuation">(</span>pic_path<span class="token punctuation">)</span>
    ques <span class="token operator">=</span> ocr<span class="token punctuation">(</span>pic_process_path<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token string">":  "</span><span class="token punctuation">,</span>ques<span class="token punctuation">,</span><span class="token string">'\n'</span><span class="token punctuation">,</span>answer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>日常表白 tt，晚上早点睡觉哦</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>spider</tag>
        <tag>自制学习小工具</tag>
      </tags>
  </entry>
  <entry>
    <title>自动化的每日打卡工具v1.1</title>
    <url>/2020-05-04-a-Automatic-clocking-script/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>惯例的前言，这次这个小玩具又是一个来源于生活的东西了。</p>
<p>上次写了一个基于 linux 的自动打卡机，但是最近又有了新的需求。。。</p>
<p>其一是学校的每一次表单变更都需要进入项目进行代码级别的修改、测试、部署，实在是太过麻烦。</p>
<p>其二是以往的自动化需求太高，而对于没有服务器的同学只能看着眼馋。</p>
<p>于是这次写了一个基于 flask 的自动打卡网站，emmm，暂时没啥 bug。</p>
<a id="more"></a>

<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="构建思路"><a href="#构建思路" class="headerlink" title="构建思路"></a>构建思路</h3><p>本来是想要用传统的 Flask+MySQL 结构的，不过想想要写一大堆的数据库构建语句，好麻烦啊。。。。于是掏出了寒假学的 redis，嗯，不用设计数据库真香。</p>
<p>那么这个项目有哪些核心问题呢？</p>
<ul>
<li>使用了 redis 之后，省略了 models 一步，但并不意味着数据库就啥都不用考虑了。应该选择哪种数据格式？键值如何对应？这些都是问题。</li>
<li>定时任务。总不可能真的就 time.sleep(24*60*60-10)来安排吧~</li>
</ul>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><h2 id="如何实现定时"><a href="#如何实现定时" class="headerlink" title="如何实现定时"></a>如何实现定时</h2><p>在 Linux 中，我们使用 cronlab 来实现时间调度，但是查阅资料之后，Flask 也有一个很有趣的时间调度框架——APScheduler。</p>
<p>在一年之前更新的版本之中，APScheduler 引入了装饰器写法。以下给出一个小例子。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@scheduler<span class="token punctuation">.</span>task</span><span class="token punctuation">(</span>trigger<span class="token operator">=</span><span class="token string">'cron'</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">'test_job'</span><span class="token punctuation">,</span> hour<span class="token operator">=</span><span class="token string">'*'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'harumonia'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><p>键值对如何设计呢？首要考虑的一个因素就是<em>索引方便</em>。</p>
<p>既然提到了索引，那么最佳备选跃然纸上——哈希。</p>
<p>需要提一下的就是，这里并不是指作者索引，而是程序索引。如何使程序用较少的执行步骤完成作业内容呢？定时任务，自然是以时间为主轴，于是初步选定以时间为 key。然后 field 如何选择？这里剩下两个选择方向 curl 和执行者索引，执行者索引明显效率更高，索引结果更清楚，于是 input 这一块的数据结构就敲定了。</p>
<p>最后是 output 这一块的数据结构。这个打卡机不能是一个“黑洞”，有输入必然要有输出，这里的输出就是执行的结果。每次打卡完成之后，根据返回的 json，来判断打卡是否完成，如果没有完成，那么需要显示出来，毕竟我们做的是一个便民的工具，而不是一个害人的工具:D</p>
<p>出于方便聚合的考虑，输出这里依然使用哈希结构。同时，根据 value 中的 name 来实现 key-value 与 value-key 的嵌套约束，这样可以省去很多的判断和循环。</p>
<h2 id="如何执行"><a href="#如何执行" class="headerlink" title="如何执行"></a>如何执行</h2><p>录入的是 curl 命令，笔者一开始的想法是直接使用 python 去执行 shell，但是这样做的一个问题就是，给熟悉的人使用自然没有问题，给坏心思的使用，直接一个注入攻击，把服务器搞瘫痪了咋办？</p>
<p>于是还是保险一点，使用 requests 来完成 post 操作。curl 可以让用户更加方便地输入（仅仅一行，不是不 post 表单要方便多辣），所以就保留了。我们要做的就是从 curl 中提取我们所需要的信息，</p>
<p>这里选择使用正则表达式来进行分析，最终我们可以顺利地提取出 url、headers、data 等关键信息。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p>已经部署好啦 <a href="http://daka.harumonia.top:5008/">http://daka.harumonia.top:5008/</a></p>
<p><img src="https://i.loli.net/2020/05/04/x2MHB96ivYkwufV.png" alt="图片.png" loading="lazy"></p>
<h3 id="S1-获取-curl-命令"><a href="#S1-获取-curl-命令" class="headerlink" title="S1 获取 curl 命令"></a>S1 获取 curl 命令</h3><p>进入浏览器,进入开发者界面,然后进行一次成功的打卡交互.</p>
<p>这时可以在开发者界面的”网络(network)”中发现一个 post 交互,进行如下图的操作(Copy as cURL),就可以得到 curl 命令</p>
<p>curl 例子: curl ‘<a href="https://pdc.njucm.edu.cn/pdc/formDesignApi/dataFormSave?wid=****&amp;userId=****&#39;">https://pdc.njucm.edu.cn/pdc/formDesignApi/dataFormSave?wid=****&amp;userId=****&#39;</a> -H ‘User-Agent: Mozill…</p>
<p><img src="https://i.loli.net/2020/05/04/2aFN3uyjLB6TizK.png" alt="图片.png" loading="lazy"></p>
<h3 id="S2-录入"><a href="#S2-录入" class="headerlink" title="S2 录入"></a>S2 录入</h3><p>将得到的 cURL 录入到网页的表单中</p>
<p>第二个选项是选择打卡的时间,if 输入 3,就是每天 3 点进行打卡.</p>
<p><strong>默认一次录入一条,如果一天中需要多次打卡的,多次录入即可</strong></p>
<h3 id="S3-检查"><a href="#S3-检查" class="headerlink" title="S3 检查"></a>S3 检查</h3><p>第一次录入之后,在到点时检查一下是否正确执行了,over</p>
<h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><h4 id="v1-1"><a href="#v1-1" class="headerlink" title="v1.1"></a>v1.1</h4><ol>
<li>使用一个萌萌的机器人来进行事务完成和失败的相关通知</li>
</ol>
<p><img src="https://i.loli.net/2020/05/05/wn5VfGXHuaMx21B.png" alt="图片.png" loading="lazy"></p>
<ol start="2">
<li>修改配置文件的存放思路</li>
</ol>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个系统还有很多强化的地方，预计加入一个邮件提示，失败的时候可以及时知道相关的信息。</p>
<p>感觉要感冒了，不想被隔离啊 o(╥﹏╥)o</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>无题</title>
    <url>/2020-06-07-no-title-1/</url>
    <content><![CDATA[<p>大三末，学院的生活已经接近尾声，何去何从，这是贯穿整个五月的问题。</p>
<a id="more"></a>

<h2 id="五月初"><a href="#五月初" class="headerlink" title="五月初"></a>五月初</h2><p>自从四月份阿里的面试失败之后，我想了很多</p>
<p>“主攻方向是 Python，却去投了 Java 的职位，知识积淀不足，经验不足，失败也是理所当然的事情。”这种接口可以搪塞一时，但是如果只是用这种借口来麻痹自己，未免也太幼稚了。</p>
<p>第一次面试失败，之后的一个多月，我在这个阴影之中思考了更多的东西。</p>
<p>校招所看重的无非两点，本科出身和项目经验。我唯一能够拿出手的只有后者，一直让我沾沾自喜的也是后者，但是它却没有带给我想象中的那些美好。所谓的经验丰富，只是针对本校的学生而言罢了——意识到这一点，大概是 5 月初的时候。和袁君、高君等人的联系，让我深刻明白了何谓井底之蛙。</p>
<p>“<strong>眼界决定境界，格局决定结局</strong>”。这句话在初上大学时某人赠送与我。彼时，理所当然地理解为是对我的安慰，因为彼时的我确实可以说是具备了较高的眼界与格局。但是现在看来，这倒更像是一种告诫。我曾经见过的天空，湛蓝无垠，白日里风云变幻，至夜晚星河漫漫，但是，呆在井底久了，天空在不知不觉之间就真的只有井口那么大了。</p>
<p>这是一次脱变，艰难而又痛苦，它将一层名为骄傲的表皮从身体上剥去，切肤之痛，深刻地提醒我，现在的你是一个平平无奇的本科学生，扔到数百万的毕业大潮中溅不起一丝水花的普通人罢了。一切的辉煌都有尽头，再华美的宫殿，也会变为墟场，但是废墟并不是终结，新的开拓者会在这里生根、发芽。当年董卓一把大火将洛阳变成焦土，数十年的光景，这里又是富丽堂皇。</p>
<p>这真实而残酷，却并不是什么值得羞耻的事情。中华上下五千年，惊才绝艳者就那么多人，能够当涛头而立，搅动时代大潮的，有始皇帝这样雄才大略者，也有刘邦这样普普通通者，一切都是时代的选择，世易时移，白衣苍狗，又都作一抔黄土。</p>
<h2 id="五月末"><a href="#五月末" class="headerlink" title="五月末"></a>五月末</h2><p>成功得到了几份不错的 offer，在经历了最开始几天的兴奋之后，这份情感有转变为担忧与恐惧。</p>
<p>这大概是每一个从学校出去的学生都会有的感觉。虽说大四是象牙塔和大熔炉的过渡期，但是这一步终归是要迈出去的。前方会是地狱还是天堂，我无法知道。未知的东西总是令人恐惧，所幸，即使是到了苏州这样一个异乡，我也不算是异客，这所众多亲友生活多年的城市，给我的感觉并不像初来南京时这样纯粹的冰冷。</p>
<p>也是这个时候，我第一次开始正视一个问题——对未来的长远规划。</p>
<p>还记得大学当开学那天，偌大的南京站，一个人，两个沉重的包裹，耳机中是没有什么意义的音乐，外面是灰色的天空和濛濛细雨，七八知己，天涯零落。没有比这更糟糕的了，抱着这样的想法，我踏出了在南京的第一步。</p>
<p>但是就像是 Clannad 第一集的第一段，朋也的世界逐渐从灰白与冰冷转变为彩色与温暖那样，这也我大学三年的完美写照，虽然这个转场的时间有一点点长。</p>
<p>“如果能够一直这样生活多好呢”，这样的想法在我每次想到要去苏州，一个人租房、工作时，不可抑止地出现。现在的每天固然美好，与喜欢的人在一起，三五个好友成群，忙时奋笔，闲时则找个僻静的地方翻翻书。就是这样一个养老的心态。渐渐地不再想去追求刺激，太过美好的生活会消磨掉人的进取心，就像是做机器学习实验，调整出一个 90%的结果就可以了，再浪费算力也不一定得到更好的结果，甚至可能会让结果变得更糟，对吧。</p>
<p>但是这样的想法太过幼稚和理想了。离别，这是自懂事起就一直经历的事情。与朋友的离别，与学院生活的离别，这是很艰难的一个抉择。</p>
<p>比较戏剧性的是，在纠结的过程中，这份焦虑逐渐就转变成了一种迷之期待。说到底，我的骨子里还是渴望着刺激与疯狂的，这或许是中二时期的后遗症，又或许是更久远时期的积淀吧。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>结尾该写点什么？在“挥手自兹去，萧萧班马鸣”和“莫愁前路无知己，天下谁人不识君”之间纠结了几秒钟。忽然模糊地想起昨晚的摸不着头脑的梦，那么就是它吧。用于此时此刻，堪称绝妙，当浮一大白~</p>
<blockquote>
<p>海客谈瀛洲，烟涛微茫信难求。</p>
<p>越人语天姥，云霞明灭或可睹。</p>
<p>天姥连天向天横，势拔五岳掩赤城。</p>
<p>天台四万八千丈，对此欲倒东南倾。</p>
<p>我欲因之梦吴越，一夜飞度镜湖月。</p>
<p>湖月照我影，送我至剡溪。</p>
<p>谢公宿处今尚在，渌水荡漾清猿啼。</p>
<p>脚著谢公屐，身登青云梯。</p>
<p>半壁见海日，空中闻天鸡。</p>
<p>千岩万转路不定，迷花倚石忽已暝。</p>
<p>熊咆龙吟殷岩泉，栗深林兮惊层巅。</p>
<p>云青青兮欲雨，水澹澹兮生烟。</p>
<p>列缺霹雳，丘峦崩摧。</p>
<p>洞天石扉，訇然中开。</p>
<p>青冥浩荡不见底，日月照耀金银台。</p>
<p>霓为衣兮风为马，云之君兮纷纷而来下。</p>
<p>虎鼓瑟兮鸾回车，仙之人兮列如麻。</p>
<p>忽魂悸以魄动，恍惊起而长嗟。</p>
<p>惟觉时之枕席，失向来之烟霞。</p>
<p>世间行乐亦如此，古来万事东流水。</p>
<p>别君去兮何时还？</p>
<p>且放白鹿青崖间，须行即骑访名山。</p>
<p>安能摧眉折腰事权贵，使我不得开心颜！</p>
</blockquote>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
  </entry>
  <entry>
    <title>写在实习第一周</title>
    <url>/2020-06-21-the-first-week-of-practice/</url>
    <content><![CDATA[<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>正式实习已经差不多一周的时间了，爬虫工程师的工作比预想中的要轻松一点，也许因为这只是实习的原因吧，正式工的老哥们倒是回去得挺晚的了。</p>
<p>老实说，在入职之前，对于同期的实习生是抱有一些幻想的。就像是《半泽直树》中的半泽、渡边等同期生一样，结成同期阵营，互相扶持。不过事实和理想还是有所差距的，同期的 6 月份加入的实习生只有一位，还是个没有多少共同语言的女生，emmmmm，还是老老实实工作吧。</p>
<p>mentor 挺不错的，就像是在 HR 面中所说的那样，一直不厌其烦地指导我进行学习。mentor 画饼的功力不如涛哥，所以他所描绘的画卷并没有在我心中掀起多少波澜，只是表面上迎合了一下。吃饼吃多了，还是务实胜过务虚好。</p>
<p>爬虫算是我进入大学后学习的第一个技术了，但是当时并没有深入地了解，只是草草地构建了 requests、selenium 等爬虫常用的技术栈之后，就浅尝辄止了。大学生涯以爬虫始，后端终；职业生涯也是以爬虫始，而且大概率会以后端终。emmmmmm，这么一想，总有一种“这就是命”的奇怪感觉。</p>
<a id="more"></a>

<h2 id="独居"><a href="#独居" class="headerlink" title="独居"></a>独居</h2><p>就在前天，我正式开始了蜗居的生活。地方很小，偶尔拉开窗帘，看看外面的广阔世界，白天看湛蓝的天空，云卷云舒；夜晚看这片土地上散布的星星点点的灯火；出门向左，即是繁华的商业广场，向右，即是面积辽阔的白沙湖公园。自给自足，虽是闹事，却也有隐居之感。年纪轻轻却已经有这种老年人的心态，仔细想想倒也有趣。</p>
<p>生活单调却也不算无趣。只是在夜深人静、万籁俱寂之时，孤独的感觉总会如潮水一般一波一波地冲刷而来。</p>
<p>天星寥寥，高悬于空；地上的世界繁华喧闹，广厦华灯映衬出一座不夜之城。身处地界，心却在深空，一眼看下去，人潮人海，伸出手时，却发现这之间是天地云泥的距离。我所认识的人中距离我最近的那位，直线距离是 14 公里，就好像天与地在辽远处交汇……却不在这里。</p>
<p>是啊，这种孤独的感觉，就像是潮水，来得快，去得也快。还是工作吧，工作吧，工作吧。</p>
<h2 id="一个网站"><a href="#一个网站" class="headerlink" title="一个网站"></a><a href="http://39.108.229.166:5002/">一个网站</a></h2><p>这个周末，抽了点时间来完成了一个小网站。</p>
<p>这两年来，做了很多的网站，但是大抵都是为了别人而做的，还没有实打实地为自己做一个呢，所以这个网站就是给自己给自己做的一个小礼物，庆祝自己工作生活的开始吧。</p>
<p>我将其命名为 <em>yoyo daily</em> ，意思就是 <strong>优哉游哉的日常</strong> 的意思，嘿嘿，老咸鱼了。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>这一个星期的学习的知识密度有点高，抵得上在学校一个月了。</li>
<li>618 又买了很多的东西，感觉这工作才没几天，一个月的工资就没了= =</li>
<li>愚蠢的 tt 给我买了一堆东西，如何放置这些可以说是现在最头疼的事情了。</li>
<li>etc.</li>
</ul>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
      <tags>
        <tag>实习</tag>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>万历十五年</title>
    <url>/a-Year-of-No-Significance-The-Ming-Dynasty-in-Decline/</url>
    <content><![CDATA[<p>《万历十五年》（英语：1587, a Year of No Significance: The Ming Dynasty in Decline）是美籍华裔历史学家黄仁宇最出名、也是体现其“大历史观”的一部明史研究专著。</p>
<a id="more"></a>

<h1 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h1><ul>
<li>皇室的情谊不同于世俗，它不具有世俗友谊那种由于互相关怀而产生的永久性。</li>
<li>今日受刑，明日名扬史册，这样的做法，说明忠臣烈士的名誉，确乎是一种高贵的商品，否则，何以有许多人愿意付出昂贵的代价，放弃经过千辛万苦挣来的进士出身，继之以血肉深知生命去追求。</li>
<li>张居正的根本错误在于自信过度，不能谦虚谨慎，不肯对事实比做出必要的让步。</li>
<li>仪式典礼只会产生更多的仪式典礼。</li>
</ul>
<blockquote>
<p>但是迷信与非迷信，其间的分野也可能极为模糊。例如，当一个人强迫自己对一件事情、一种前途建立信念，则其与宗教式的皈依就相去极微，因为凡是一个人处于困境，他就不愿放弃任何足以取得成功的可能性，即使这种可能性极为渺茫，没有根据，他也要把它作为自己精神上的寄托。</p>
</blockquote>
<ul>
<li><p>武将领兵作战，和文官集团的施政原则在根本上是不能相容的。</p>
</li>
<li><p>性恶来自先天，性善来自天赋。</p>
</li>
<li><p>文官政治确立后，儒家单独的伦理性格已经不能完全适应时代的需要，集权的中央政府不得不创立新的哲学理论，掺和理智上的新因素，适应新的环境。</p>
</li>
<li><p>朱熹</p>
</li>
</ul>
<blockquote>
<p>大凡高度的概括，总带有想象的成分。尤其是在现代科学尚未发达的时代，哲学家不可能说明宇宙就是这样，而只能假定宇宙就是这样。</p>
</blockquote>
<blockquote>
<p>王阳明并没有为真理而真理的倾向。和朱熹一样，他的目的也在于利用他的思想系统，去证实他从小接受的儒家教条，以求经世致用。他的方法较之朱熹更为直接，然而这里也埋伏着危险。如果一个人把王阳明的学说看成一种单纯的方法，施用于孔孟教条之前，就很可能发生耿定向所说的“未信先横”，以为自己的灵感可以为真理的主宰。</p>
</blockquote>
<ul>
<li><p>如入火聚，得清凉门。</p>
</li>
<li><p>当一个人口众多的国家，各人行动全凭儒家粗浅而又无法固定的原则所限制，而法律又缺乏创造性，则其社会发展的程度，必然受到限制。。</p>
</li>
<li><p>道德虽高于法律和技术，但要提出做争论的根据时，则要在法律及技术之后提出。</p>
</li>
</ul>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><p>汉唐尚武，故外敌辟易，畏其如虎，而最终亡于内乱。<br>宋明尚文，国内能勉强依靠高度强化的集权制度稳定，但最终亡于外敌。<br>所以在下认为，文极与武极俱是取死之道，如本朝一般，文武并举，方可大治。至于党争的问题，则暂且悬束。</p>
<p>我认为，党争的根源在于执政理念与政治追求的冲突，至于会形成乡党、朋党等，不过是时事所近逼的结果。</p>
<p>万历十五年一书从帝国的最高层万历皇帝，而至帝国的决策者首辅张居正、申时行，再到被轻视的武将群体的代表人物戚继光，最后是在野的名士李贽，这各个层面，反映了万历朝由盛而衰的历程，其中豪迈悲壮之处，令人叹服，令人唏嘘，令人悲嗟。<br>万历十五年是平凡的一年，这一年没有多少能被记述在历史年表之中的大事，但正如我们所知的，历史几乎是不存在突变的，任何山雨来临之前，总是有狂风黑云的积聚。万历十五年正是这样的一年，我们看不见石破天惊，天地乖离，却能感受到，那看似平静的王朝之下涌动的暗流。<br>我们不放就先依照黄仁宇先生的顺序，来看看这个庞大的帝国，它的上层而至下层，曾是如何的励精图治，最后又是如何的堕落腐朽。<br>万历皇帝登极之初，不可否认他是有着满腔的热血与抱负，只可惜，生不逢时。万历前期，朝政大事皆由张居正把与太后把持（太后怎样姑且不论，但张居正作为文臣之首，确实是有相应的才干），这也就直接导致了他后期的弱势，他不能再像正德那样任意操纵社稷神器，因为文官们的意见很大程度上左右了他的想法（我理解为文官们尝到了张居正时期文官左右君主的甜头，故而不愿再减损或者放下这份庞大到让人心动的权利），由于师从于张居正，所以万历在很多事物上</p>
<p>与张居正是有相同态度的，这一点从张居正在世时君臣之间融洽的关系可以窥见一斑，但自张居正逝世后，申时行作为首辅，没有张居正那样的资历与手腕来镇压群臣，从而导致朝野上下群魔乱舞，万历在很多观念上与反张派事实上相悖，直接导致了很多他的想法无法得到施行，或者是下层官员阳奉阴违，政治抱负无法伸张，所以万历就采用了消极的方式来表达自己的抵触，而这又促进了君臣不协调的恶性循环，由此，万历朝开始走向衰败。<br>中央集权制度，权利本应集中在作为中央的皇帝手中，虽然我们都说张居正是权臣，但是他在位期间</p>
]]></content>
      <categories>
        <category>桂苑酌记</category>
      </categories>
  </entry>
  <entry>
    <title>数学之美笔记</title>
    <url>/art-of-math/</url>
    <content><![CDATA[<p>大学读书笔记之一:数学之美</p>
<blockquote>
<p>数学，正确看待时，不仅具有真理，还具有至高的美-一种冷而严峻的美，一种屹立不摇的美，如雕塑一般，一种不为我们软弱天性所动摇的美。也不像绘画或音乐有富丽堂皇的装饰，而是纯粹地崇高、绝对地完美，是最伟大的艺术，然而这是极其纯净的美，只有这个最伟大的艺术才能显示出最严格的完美。数学中一定能找到最卓越的试金石——超越自我时之喜悦感，如同写诗。<br>– Bertrand Arthur William Russell</p>
</blockquote>
<a id="more"></a>

<h1 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h1><blockquote>
<p>文字是信息的载体，而非信息本身。</p>
</blockquote>
<h2 id="罗塞塔石碑带来的启示"><a href="#罗塞塔石碑带来的启示" class="headerlink" title="罗塞塔石碑带来的启示"></a>罗塞塔石碑带来的启示</h2><p>·信息的冗余是信息安全的保障。<br>·语言的数据（语料），尤其是双语式或者多语的，对照语料对翻译至关重要，它是我们从事机器翻译研究的基础。</p>
<h3 id="基于统计的自然语言的处理方法：统计语言模型"><a href="#基于统计的自然语言的处理方法：统计语言模型" class="headerlink" title="基于统计的自然语言的处理方法：统计语言模型"></a>基于统计的自然语言的处理方法：统计语言模型</h3><h4 id="隐含马尔可夫模型"><a href="#隐含马尔可夫模型" class="headerlink" title="隐含马尔可夫模型"></a>隐含马尔可夫模型</h4><p>最初应用于通信领域，继而推广到语言和语音处理之中，成为连接自然语言处理和通信的桥梁。 同时，也 是机器学习的主要工具之一。需要一个训练算法（鲍姆—韦尔奇算法）和使用时的解码算法（维特比算法）。<br><strong>马尔可夫链（Markov Chain）</strong></p>
<h2 id="信息熵（H-单位：bit）"><a href="#信息熵（H-单位：bit）" class="headerlink" title="信息熵（H 单位：bit）"></a>信息熵（H 单位：bit）</h2><p>一条信息的信息量与其不确定性有着直接的关系。（信息量等于不确定性）<br>一本书重复的内容多，信息量就小，冗余度大。<br>互信息在解决二义性方面的作用</p>
<p>布尔代数不仅把逻辑和数学合二为一，而且给了我们一个看待世界的全新的视角。</p>
<blockquote>
<p>Truth is ever to be found in simplicity,and not in the multiplicity and confusion of things. -Newton</p>
</blockquote>
<h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><p>哥尼斯堡七桥问题<br>广度优先搜索（BFS）<br>深度优先搜索（DFS）</p>
<p>“握手”——下载服务器和网站的服务器建立通信的过程。</p>
<p>网络爬虫对网页遍历的次序不是简单地 BFS 或者 DFS，而是有一个相对复杂的下载优先级排序的方法。<br>在爬虫中 BFS 的成分多一点。</p>
<p>页面分析和 URL 提取问题（脚本语言编写的难提取）</p>
<h2 id="PageRank-算法——民主表决式网页排名技术"><a href="#PageRank-算法——民主表决式网页排名技术" class="headerlink" title="PageRank 算法——民主表决式网页排名技术"></a>PageRank 算法——民主表决式网页排名技术</h2><p>度量网页的质量</p>
<p>搜索引擎的质量<br>·用户的点击数据<br>·完备的索引<br>·对网页质量的度量<br>·用户偏好<br>·确定一个网页和某个查询的相关性的方法</p>
<p>搜索关键词权重的科学度量 TF-IDF<br>TF-IDF（Term Frequency/Inverse Document Frequency） 信息检索领域的重要发明<br><strong>加权</strong></p>
<h3 id="动态规划（Dynamic-Programming，DP）"><a href="#动态规划（Dynamic-Programming，DP）" class="headerlink" title="动态规划（Dynamic Programming，DP）"></a>动态规划（Dynamic Programming，DP）</h3><p>横切（非典型二分法）的应用</p>
<h3 id="余弦定理（自底向上）—-gt-聚类算法——在大量数据的分类中的应用"><a href="#余弦定理（自底向上）—-gt-聚类算法——在大量数据的分类中的应用" class="headerlink" title="余弦定理（自底向上）—&gt;聚类算法——在大量数据的分类中的应用"></a>余弦定理（自底向上）—&gt;聚类算法——在大量数据的分类中的应用</h3><p>根据每个网页的特征制作特征向量，进而计算余弦，比较余弦大小。<br><strong>迭代</strong></p>
<h3 id="矩阵运算（文本和词汇的矩阵）—-gt-奇异值分解（AMN-XMM✘BMN✘YNN）"><a href="#矩阵运算（文本和词汇的矩阵）—-gt-奇异值分解（AMN-XMM✘BMN✘YNN）" class="headerlink" title="矩阵运算（文本和词汇的矩阵）—&gt;奇异值分解（AMN=XMM✘BMN✘YNN）"></a>矩阵运算（文本和词汇的矩阵）—&gt;奇异值分解（AMN=XMM✘BMN✘YNN）</h3><p>（第十五章，有点意思）</p>
<blockquote>
<p>能较快的得出结果，但很粗糙，适合进行超大规模文本的粗分类</p>
</blockquote>
<p>上述两方法结合使用，节省时间，并获得很好的准确性。</p>
<p>信息指纹<br>可以简单理解为讲一段信息（文字、图片、音频、视频等）随机映射到一个多为二进制空间中的一个点（一个二进制数字）。（不同信息产生相同指纹的概率几乎为 0，10e19 量级）</p>
<blockquote>
<p>关键算法：伪随机数产生器算法（Pseudo-Random Number Generator ,PRNG）</p>
</blockquote>
<p>特征：<strong>不可逆性</strong></p>
<p>素相同，那么他们的指纹一定相同。</p>
<h3 id="相似哈希——排查重复网页"><a href="#相似哈希——排查重复网页" class="headerlink" title="相似哈希——排查重复网页"></a>相似哈希——排查重复网页</h3><p>如果两个网页的相似哈希差越小，这两个网页相似性就越高。</p>
<p>密码设计——加密函数不应该通过几个自变量和函数值就能推出函数本身</p>
<p>一般来讲，密码之间分布均匀且统计独立时，提供的信息量最小。均匀分布使敌方无从统计，而统计独立可保证敌人即使知道了加密算法，并且看到一段密码和明码后，也无法破译另一段密码。</p>
<h4 id="公开密钥好处"><a href="#公开密钥好处" class="headerlink" title="公开密钥好处"></a>公开密钥好处</h4><p>·简单，一些乘除而已<br>·可靠。保证产生的密文是统计独立而分布均匀的（无法根据已知的密文和明文来破译下一份密文）。只有掌握密钥 D 的人才能解密，即使加密者自己都无法解密。<br>·灵活，可以产生很多的公开密钥 E 和私钥 D 的组合给不同的加密者。</p>
<p>利用信息可以消除一个系统的不确定性</p>
<p>搜索引擎反作弊问题和搜索结果权威性问题</p>
<h2 id="数学模型"><a href="#数学模型" class="headerlink" title="数学模型"></a>数学模型</h2><ol>
<li>一个正确的数学模型应当在形式上是简单的。</li>
<li>一个正确的模型一开始可能还不如一个精雕细琢过的错误的模型来的准确，但是，如果我们认定大方向是对的，就应该坚持下去。</li>
<li>大量准确的数据对研发很重要。</li>
<li>准确的模型也可能受噪音干扰而显得不准确；这是不应该用一种凑合的修正方法加以弥补，而是要找到噪音的根源，这也许能通往重大的发现。</li>
</ol>
<blockquote>
<p>最大熵原理和最大熵模型（保留全部的不确定性，将风险降到最小）</p>
</blockquote>
<h3 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h3><blockquote>
<p>数学原理：两个完全随机的数字相冲突的概率很小，因此，可以在很小的误差识别率条件下，用很少的空间存储大量的信息。比较常见办法是再建立一个小的白名单，存储那些可能被误判的信息。</p>
</blockquote>
<p>马尔可夫链的扩展—&gt;贝叶斯网络（加权的有向图）<br>所有的因果关系都可以有一个量化的可信度（Belief），即用一个概率描述。也就是说，贝叶斯网络的弧上可以有附加权重。所以，贝叶斯网络也被称为信念网络（Belief Networks）。<br>贝叶斯网络的拓扑结构比马尔可夫链灵活。可以将讲，马尔可夫链是贝叶斯网络的特例，而贝叶斯网络是马尔可夫链的推广。<br>使用贝叶斯网络必须先知确定这个网络的拓扑结构，然后还要知道各个状态之间相关的概率。得到拓扑结构和这些参数的过程分别叫做结构训练和参数训练，统称训练。<br>相比马尔可夫链。贝叶斯网络训练比较复杂，从理论上讲，他是一个 NP 完备问题（NP-Complete），即对于现在的计算机是不可计算的。但是，对于某些应用，这个训练过程可以简化，并在计算机上实现。</p>
<blockquote>
<p>从数学层面来讲，贝叶斯网络是一个加权的有向图，是马尔科夫链的扩展。<br>从认识论的层面来看，贝叶斯网络克服了马尔科夫链那种机械的线性的约束，他可以把任何有关联的事件统一到它的框架下面。<br>因此，贝叶斯网络有很多应用。贝叶斯网络的描述简单易懂，但导出的模型却十分复杂。</p>
</blockquote>
<p>条件随机场是一个非常灵活的用于预测的统计模型。</p>
<h3 id="期望最大化算法（Expectation-Maximization-Algorithm）"><a href="#期望最大化算法（Expectation-Maximization-Algorithm）" class="headerlink" title="期望最大化算法（Expectation Maximization Algorithm）"></a>期望最大化算法（Expectation Maximization Algorithm）</h3><p>文本的自收敛分类</p>
<p>逻辑回归模型和搜索广告</p>
<p>大数据在现在和未来社会中的重要性。</p>
<p>2018 年 05 月 28 日 09:07:32，初次阅读，完。</p>
]]></content>
      <categories>
        <category>桂苑酌记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>毕业旅行</title>
    <url>/chengdu-seven-day/</url>
    <content><![CDATA[<p>本篇又是一个日常记述, 主要内容是博主毕业旅行的二三事.</p>
<p>目的地定在 <em>成都</em> , 来回耗时 <em>7</em> 天, 包括交通费在内的人均总开销 <em>3985.51RMB</em>. 乘兴而来, 兴尽而归, 总的来说世一趟很不错的旅行.</p>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于大学毕业旅行的目的地, 其实一开始是想去 <em>日本</em> 的, 毕竟是老二次元了. 所以从大三开始实习到大四毕业, 磕磕绊绊差不多一年的时间, 攒了小两万的旅行预算, 结果日本疫情处理实在拉胯, 所以就把目的地选在了国内. 最终, 我们将地点锁定在了 <strong>成都</strong>, 武侯祠\都江堰\大熊猫等一个个自然或人文风景令人神往.</p>
<p>关于毕业旅行, 我见过还有一个比较有趣的说法是”资本主义的消费陷阱”, 其实仔细想想这个说法是站不住脚的. 毕业是很纪念价值的事情, 而旅行又是很有纪念意义的事情, 两件有纪念意义的事情结合在一起……打住打住(笑.</p>
<h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>第一天 01:30 a.m. 几经辗转终于抵达程度双流机场, 然后在某个路痴的带领下绕了半天的路, 最后选择打的前往预定的民宿.</p>
<p>民宿这种东西, 实在是比酒店差了不止一个档次, 无论是卫生环境还是配套设施, 所以当晚在体验了一下传说中的 “lofter 民宿” 之后, 我们果断地将第二天的下榻地点更改为市中心的酒店.</p>
<h3 id="春熙路"><a href="#春熙路" class="headerlink" title="春熙路"></a>春熙路</h3><p>春熙路\太古里, 在以往我对于这些地方的印象就是”超大商圈”, 这类型的大商圈, 无论是布局还是店铺的种类, 往往千篇一律. 在实际游玩之前, 我还是兴趣缺缺的.</p>
<p>显然最后我真香了. 成都与东部沿海地区的地理气候差异\经济发展差异造就了迥异的人文风情. 就以大学四年常去的新街口为例吧, 印象里的新街口就是庞大复杂的地下交通网络和熙熙攘攘的人潮. 而春熙路的整体设计则是要精巧很多, 感觉上从设计之初就不仅仅是作为超模商圈, 而且兼顾了旅游景点的设计, 最典型的例证就是繁多的网红打卡地点, 我们一行几人虽然购买欲并不是很强, 但一个下午依旧是玩得不亦乐乎.</p>
<h3 id="宽窄巷子"><a href="#宽窄巷子" class="headerlink" title="宽窄巷子"></a>宽窄巷子</h3><p>晚饭过后我们原本是没啥安排的, 不过走着走着就到了一个不在行程计划中的地方, 宽窄巷子.</p>
<p>宽窄巷子由宽巷子\窄巷子\井巷子构成, 建筑风格保留古建筑风格, 所以整体上还是很有观赏性的, 不过遗憾的是这里基本上晚上 9 点就休市了, 这让打算来逛逛夜市的我们有点败兴. 难怪说”少不入川,老不出蜀”, 这里的生活节奏确实适合养老.</p>
<p>在宽窄巷子买了不少的纪念品, 本着过一地必买一书的习惯, 我在这里的三联书店购入了一本黄仁宇的&lt;中国大历史&gt;, 以衬这一个历史悠久且留存良好的城市. 可惜并没有找到一款具有成都城市特色的书签.</p>
<p>还有一个意外之喜, 在宽巷子里竟然还有一个 <strong>鬼灭之刃</strong> 的主题道馆, 可以到那里的时候已经接近休市了, 只能草草进去拍了几张蠢蠢的照片= =.</p>
<h3 id="饮食-D1"><a href="#饮食-D1" class="headerlink" title="饮食 D1"></a>饮食 D1</h3><p>第一天的饮食并不是很讲究, 只是在春熙路找了两家评价不错的连锁店. 午饭吃的是 <strong>小郡肝</strong> , 一家传统的成都串串店, 晚饭则是 <strong>豪虾传</strong> , 尝试了一下中辣难度的成都小龙虾, 只能说中规中矩, 无论是价格还是味道, 俱无可圈可点之处.</p>
<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>第二天终于回归了正常的作息, 开始正式推进旅行计划了.</p>
<h3 id="大熊猫保护基地"><a href="#大熊猫保护基地" class="headerlink" title="大熊猫保护基地"></a>大熊猫保护基地</h3><p>四川和熊猫几乎是一个具备强绑定关系的两个实体, 来四川自然少不了看熊猫. 所以, 旅行计划的第一站就是大熊猫保护基地.</p>
<p>基地的位置还是挺偏僻的, 我们一番地铁转站+网约车的交通工具 combo, 才在接近 10 点的时候到达目的地. 只能说不愧是成都的特产景点, 即使我们选在了工作日, 仍然是有很多的游客, 期间遇到不少热心的本地人, 指点我们少走了很多不必要的路.</p>
<p>我无意对大熊猫做过多的赘述, 这早就见诸于义务教育的课本, 并且文字见的感染力也必然是比我强上不少的, 只说说我所见到的一些新鲜的吧. 我们所见到的大熊猫, 懒懒散散地群聚在树上或者深林之中, 人潮的喧闹并没有引起它们过多的反应, 也许是司空见惯了吧, 不过这群躺平的大家伙们确实让我一阵没来由的羡慕, 毕竟虽然即将进入社会拼搏奋斗, 不过谁内心不向往过衣来伸手饭来张口的闲散生活呢. 倒是旁边的路人大叔, 指着其中某只, 大发感慨, “你看他们这样子, 也是被圈养着磨没了脾气, 人家当年也是被称为食铁兽的狠角色啊”, 他语气中不乏揶揄和怜悯, 倒是令我颇觉有趣.</p>
<h3 id="成都博物馆"><a href="#成都博物馆" class="headerlink" title="成都博物馆"></a>成都博物馆</h3><p>原计划中的行程安排里面是没有成博的, 不过在预定川博的时候误打误撞订到了成博, 实际在成博游玩之后, 这个无心之失确是歪打正着了.</p>
<p>成博总共有六层, 与传统的城市博物馆的安排相近, 分为历史展馆和文化展馆两个大部分, 其中历史展馆展出了川渝地区从远古时期到近现代的文明历程, 而文化馆则是从衣食住行乐展现了程度人文风情的一隅.</p>
<p>最妙的是在我们开始参观的同时, 正好搭上了下午班次的讲解员, 一路下来, 讲解员抛出的一些问题与讲述的一些小故事, 与我在历史课本和读物资料上所看到的, 相互印证, 从未开化的蛮夷之地到享誉中原的天府之国, 从”千载谁堪伯仲间”的诸葛孔明到”捐躯赴国难”的川军, 在川渝巴蜀数千年历史的长河中溯游, 不亦乐乎.</p>
<h3 id="饮食-D2"><a href="#饮食-D2" class="headerlink" title="饮食 D2"></a>饮食 D2</h3><p>中午在逛完了大熊猫基地之后, 由于附近都是荒地, 所以我们原路回到了来时的地铁站, 不过这里整体上都比较偏僻, 没什么大规模的商圈, 所以我们干脆丢掉了点评软件, 随便找了家 <strong>眉山跷脚牛肉</strong> 的馆子, 一餐下来 4 个人虽然只花了一百多, 却是吃得十分满足.</p>
<p>而与之形成鲜明对比的, 我们晚上在大众点评上挑选了半天, 最后去了 <strong>何师烧烤</strong> 这家成都地区的网红店, 老实说, 一般般, 远没有中午的随意之选来的惊艳, 也许是抱有的期望值太高了吗?</p>
<p>与美食的不期而遇是如此的令人着迷与怀念, 与李君在上海吃到的 <strong>红烧牛肉面</strong> 如是, 这次吃到的 <strong>跷脚牛肉</strong> 亦如是, 也许在旅行时, 偶尔抛掉那天花乱坠的点评软件, 相信一下自己与美食的缘分, 亦是一种不错的选择?</p>
<h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2><h3 id="四川博物院"><a href="#四川博物院" class="headerlink" title="四川博物院"></a>四川博物院</h3><p>前一天一番旅途奔波着实苦了我们这帮疏于锻炼的人, 所以第三天的上午全都我在酒店休息, 直到下午才出来继续旅程.</p>
<p>四川博物馆院, 说实在的, 比起这个规格更高的地方, 我还是更喜欢前一天的成博. 川博这里按照不同的门类, 安排了陶器展\张大千书画展\少数民族文化展等一系列的主题展馆.</p>
<p>可惜的是, 这些展馆的主题我都是兴致缺缺, 大概是这些苍白的物件, 没有足够支撑起它的的历史片段吧.</p>
<p>川博的旅行在很流程化的转了一圈之后便正式结束, 给我的一个经验教训就是, 以后去这种主题性质的博物展览一定要预先看一下展览的内容, 不然实在是浪费宝贵的旅行时间.</p>
<h3 id="杜甫草堂"><a href="#杜甫草堂" class="headerlink" title="杜甫草堂"></a>杜甫草堂</h3><p>从川博出来之后, 发现时间不过才过了差不多两个小时, 距离晚饭还有很长的一段时间, 于是几个人一合计, 将明日的杜甫草堂之旅提前到了今天.</p>
<p>杜甫草堂, 除去不算很多的游客, 风景还是当得上清幽之称的. 不过几经整改扩建, 在我的视角中这个地方与杜甫有关的已经是寥寥无几了. 甚至感觉里面的文创馆的面积要比杜甫他老人家的纪念设施都要大很多, 作为一个需要门票进来的地方, 这种敛财的嘴脸实在是让人讨厌.</p>
<h3 id="饮食-D3"><a href="#饮食-D3" class="headerlink" title="饮食 D3"></a>饮食 D3</h3><p>中午是在 <strong>源贡</strong> 这家比较知名的连锁川菜馆吃的桌菜, 辣子鸡\兔子\豆豉烤鱼等, 与前几日的感觉相同, 这些川菜馆的辣度还是太 easy 了, 与我们所期待的有不小的落差, 不过从传统的色香味角度点评, 这些菜品还是很中规中矩的. 后来想想, 这些地方的辣度如此, 大概和成都这个旅游城市有关吧, 毕竟直接把外地人送进医院太不友好了(笑, 下次可以试一试本地人喜欢的一些菜馆, 而不是外地人打分高的菜馆.</p>
<p>晚饭则是在春熙路的 <strong>巴蜀大将</strong> 这家店吃的火锅, 只能说实在是浪费生命, 甚至提不起任何点评的兴趣. 倒是它楼下的甜品店中的甜点很是好吃.</p>
<h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2><h3 id="武侯祠"><a href="#武侯祠" class="headerlink" title="武侯祠"></a>武侯祠</h3><p>在成博参观的时候, 那里的解说员小哥就推荐我们这帮三国爱好者去武侯祠走一趟. 所以在旅行的第四天, 我们将行程定在了 <strong>武侯祠</strong> 及其周边.</p>
<p>进入武侯祠, 首先是蜀汉重臣的一条长廊, 居中的是汉昭烈帝刘备, 左右自然是关张, 而下首则是赵云等一种文官武将. 实际上, &lt;三国演义&gt;这本书从我幼时开始, 青少年版到原文版, 各种版本的三国看了不下 10 遍, 不过大多看到丞相星落五丈原, 旧蜀汉派的顶梁柱几乎全都崩倒, 便再不忍看下去. 所以这里所列出的一众文官武将, 大多是只记其名而不省其事. 长廊其后则是武侯的祠堂, 在这里听信徐君怂恿打开 FGO 抽了一发十连, 无事发生. 再往后又是刘关张三人的结义纪念之所, 所后是一片模拟的桃园, 可惜并不是桃花的时节.</p>
<p>转过桃园, 我们来到了限定展区, &lt;永远的三国志&gt;主题展览, 这里列出了自黄巾之乱起, 到三国各自走向末路而终, 这段时间中波澜壮阔的历史, 其展品有全国各地的博物馆所出, 到这里进行限时的展览. 对于最后的晋朝并未作过多的介绍, 饶是这样, 一想到最后是司马家窜朝, 建立晋朝将中原大地带入第一段黑暗的胡人霍乱时期, 对魏蜀吴的唏嘘变回全都转化为对这个废物朝代的愤慨.</p>
<p>武侯祠的占地面积并不算大, 实际上我们参观的时候, 一些重要的区域也是在维护状态, 这是比较遗憾的, 即使是这样, 依旧逛了我们四个多小时.</p>
<p>出武侯祠之后, 四点多钟, 吃晚饭又太早了, 于是我们到了旁边的 <strong>锦里</strong> 打发时间. 在这里我们找了家茶馆, 听了一会儿戏. 茶水一般, 戏也是拿着四川的 <strong>耙耳朵</strong> 文化作为噱头, 最后还来了一个只在我小时候见过的蹩脚消费套路, 也是一个浪费生命的地方.</p>
<h3 id="饮食-D4"><a href="#饮食-D4" class="headerlink" title="饮食 D4"></a>饮食 D4</h3><p>中午我们尝试了春熙路附近的成都小吃, 唯一的印象大概就是便宜了, 不过想想, 小吃嘛, 便宜也是理所当然的咯.</p>
<p>中午省下的预算被我们加进了晚餐, 于是我们又找了一家本地的川菜馆子, <strong>堂前燕</strong>, 老实说, 堂前燕这种名字在成都作为一个川菜馆子, 还是挺违和的. 饮食的体验与前天在 <strong>源贡</strong> 差不多, 总的消费也是相近, 不过没什么太高的预期, 所以也不算很失望吧.</p>
<h3 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h3><p>由于飞机票是第二天的 6 点, 所以我们这一天就没有在做什么观光旅游, 而是直接将行李搬到了机场附近的旅馆, 然后在机场附近找了一家普普通通的烤鸭馆子吃了一顿, 最后晚饭则是又回到了春熙路, 吃了一下 <strong>小龙坎</strong> 的总店. 在旅程的最后, 终于是吃到了我们心目中的川味火锅.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总的来说, 作为一次随缘成分比较高的毕业旅行, 这还是十分令人满意的, 虽然最后由于时间原因没能去 <em>都江堰</em>/<em>峨眉山</em> 这些城外的景点游玩, 不过我以及同行诸君都算是有所收获.</p>
<p>这几日的行程中最令人回味的是 <strong>成博</strong> 与 <strong>武侯祠</strong>, <strong>滚滚基地</strong> 和 <strong>宽窄巷子</strong> 次之, 余者并列吧.</p>
<p>其它的还有不少有趣的事情, 比如第一次尝试王者荣耀这个游戏 / 晚间活动斗地主等, 此间之乐不足为外人道, 团体旅行十分推荐尝试一下的.</p>
<p>毕业旅行, 算是大学这场游戏的后日谭吧, 在毕业旅行的终点, 也是大学的终点, 一场短暂的旅行结束了, 一场漫长的旅行也结束了, 我的内心远比我所表现的要激荡, 而这些激荡, 都在返程飞机外的平流层风景中归为了对未来的踌躇与憧憬.</p>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
      <tags>
        <tag>旅行</tag>
      </tags>
  </entry>
  <entry>
    <title>Christin开发记录(1)</title>
    <url>/christin-develop-1/</url>
    <content><![CDATA[<h2 id="关于-Christin"><a href="#关于-Christin" class="headerlink" title="关于 Christin"></a>关于 Christin</h2><p><code>Christin</code> 是笔者本科毕业设计的伴生项目, 笔者本科毕业设计的课题叫做 <strong>基于多元异构数据的中医药知识图谱构建及应用</strong> , 作为其实践产物的平台,我将其命名为 <strong>Christin</strong> , 选名自我所以喜爱的 ARPG 游戏系列 <em>&lt;伊苏&gt;</em> 的主角 <em>亚特鲁-克里斯汀( Adol Christin )</em> 以及我第二喜欢的小说家 <em>Dame Agatha Mary Clarissa Christie</em>. 当然, 其对外的平台名称叫做 <strong>中医药知识图谱构建平台</strong>.</p>
<p>本系列将主要介绍这个项目开发的 <strong>思路</strong> / <strong>完善过程</strong> 与 <strong>技术栈</strong> . (截止到毕设答辩前夕)</p>
<a id="more"></a>

<h2 id="平台设计思路"><a href="#平台设计思路" class="headerlink" title="平台设计思路"></a>平台设计思路</h2><p>平台的开发流程采用 <em>敏捷开发</em> 的软件开发方法.即:</p>
<ol>
<li>需求分析</li>
<li>设计</li>
<li>编码</li>
<li>测试</li>
<li>CI/CD/部署 </li>
</ol>
<h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>不妨先来一个头脑风暴, 想一想整个过程的流程是什么样, 在这个过程中会遇到哪些问题.</p>
<p>平台面临两个来自”用户”的需求: 提取多源异构数据;构建知识图谱. 此外, 还存在一个来自平台的隐含的需求, 数据管理.</p>
<p>对于”提取多源异构数据” 这个问题, 我们可以进一步拆分为两个需求, <strong>数据提取</strong> 和 <strong>数据归一化</strong> .</p>
<ul>
<li>如何从 <em>结构化</em>/ <em>半结构化</em> / <em>非结构化</em> 的数据中提取出所需要的数据?</li>
<li>如何将提取出的数据进行归一化, 使其符合后续数据使用的标准?</li>
</ul>
<p>而”构建知识图谱”这个需求则是要求我们能上一步归一化之后的数据中 <em>自动化</em> 地构建出一个知识图谱. 这个知识图谱需要结合我们已有的数据, 比如用户的数据中存在”板蓝根” 这味中药(仅仅是一个名称), 我们需要将 “板蓝根” 的中药特性/主治功效/组成蛋白质/基因结构等内容放入知识图谱中.</p>
<p>这里又是个问题, 这条数据是从关系型数据库中抽取对应的数据构建知识图谱, 还是从一个现成的图数据库中抽取出对应的实体和关系?</p>
<p>而后, 构建完图数据库后, 如何将图数据进行展示? 构建的数据库与它的源数据如何串联起来?</p>
<p>最后, 关于数据管理, 这个倒是简单, 与传统的数据管理一样即可. 需要进行管理的数据分为以下类型:</p>
<ul>
<li>平台维护的基础数据, 中药/方剂/蛋白质/基因等</li>
<li>用户数据</li>
<li>项目以及项目分析数据</li>
</ul>
<p><del>最后的最后, 登录注册, 这个功能太常见了, 所以不做讨论</del></p>
<p>以上问题的涉及到项目如何架构, 技术如何应用, 是整个项目的前驱, 也是整个项目的核心. 需求分析阶段, 我们需要的就是对上面这些问题进行思考并提出对应的可行的解决方案.</p>
<p>Q<sub>1</sub>: 如何从 <em>结构化</em>/ <em>半结构化</em> / <em>非结构化</em> 的数据中提取出所需要的数据?<br>A<sub>1</sub>: 这一点在 <em>&lt;知识图谱方法、实践与应用&gt;</em> 一书中有很好的解释, 结构化数据/ 半结构化数据考虑 <strong>映射规则</strong> , 而对于非结构化数据, 则需要构建一个命名实体识别模型.</p>
<p>Q<sub>2</sub>: 如何将提取出的数据进行归一化, 使其符合后续数据使用的标准?<br>A<sub>2</sub>: 归根结底, 我们需要从多元异构数据中提取出实体关系信息, 归一化的要求就是最后取得格式一致的实体\关系信息, 但是在后续的开发过程中, 这一点看似理所当然的要求却实际上遇到了很多困难, 以至于最后不得不将 结构化/ 半结构化 与 非结构化 割裂开来分别处理.</p>
<p>Q<sub>3</sub>: 用户的这些分析数据应该以何种方式进行管理?<br>A<sub>3</sub>: 用户每次的分析作为一个分析记录, 生成一个分析项目, 其中包含了 <em>源数据</em> / <em>分析结果</em> / <em>项目描述信息</em> 等内容.</p>
<p>Q<sub>4</sub>: 从关系型数据库中抽取数据 or 预构建图数据库并中抽取数据<br>A<sub>4</sub>: 预构建一个图数据所需要考虑的问题很多, 两个数据库的同步方案 / 性能代价等, 而直接从关系型数据库中抽取数据, 则需要进行一次实体和关系的链接处理. 但是实际的考虑并不止于此, 实体属性本质上是文档型数据而非关系型数据, 使用关系型数据库存储不利于实体属性的扩展. 比如我要给某个中药加上备注, 而关系型数据库中没有备注这个字段, 这种临时性的需求, 如果是分数据库的构建方案, 解决起来会非常简.<br>所以, 最后决定使用 <strong>预构建图数据库的方案</strong>, 而关系型数据库则负责约束图数据库的关键字段.</p>
<p>Q<sub>5</sub>: 构建的数据库与它的源数据如何串联起来?<br>A<sub>5</sub>: 接上一条 QA, 我们选择预构建图数据库的方案, 这样就可以使用 <em>主从数据库</em> 的设计思路, 与 neo4j 官网的 <em>sandbox</em> 架构模式. 用户构建的数据库直接从源数据库中抽取数据, 其内容受源数据库和用户数据的共同约束, 其操作权限归用户和管理员共有. 这里对 A<sub>3</sub> 进行补充, 分析项目还应当包含 <em>sandbox 图数据库</em> 和 <em>图数据库的配置信息</em> .</p>
<p>Q<sub>6</sub>: 构建完图数据库后, 如何将图数据进行展示?<br>A<sub>6</sub>: 图数据库的可视化有两种方案, 其一是经由后端查询, 然后包装数据, 前端只负责数据的渲染; 其二是前端直接链接图数据库进行查询然后渲染, 这样做的好久就是, 简单快速, 降低服务器的性能消耗(这个性能主要是 IO 性能消耗), 弊端也很明显, 这需要将图数据库的配置信息暴露给使用者. 而在我们的架构模式中, 数据库采用主从数据库的设计思路, 用户具有从库的操作权限, 所以这个 “弊端” 实际上并不会影响到系统的安全性.</p>
<p>至此, 一个平台的雏形已经模拟完成, 接下来需要做的就是进行详细的设计工作.</p>
<h3 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h3><p>对需求分析阶段的得到的需求进行抽象, 划分出平台所具有的功能模块, 设计出平台的总体架构如下图所示.</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/%E6%80%BB%E4%BD%93%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="总体架构图" loading="lazy"></p>
<p>其中, 浅蓝色色块为前端负责功能, 黄色色块为后端负责的功能, 深蓝色色块为数据库功能, 淡红色色块为服务器级负责的功能. 每个功能模块中, 又标注了该模块的主要任务.</p>
<p>详细解释一下吧.</p>
<p>对应 <em>Q<sub>1</sub></em>, 抽象为 <strong>异构数据录入模块</strong> , 在 <strong>数据交互模块</strong> 中存放了对应的后端实现逻辑.</p>
<p>对应 <em>Q<sub>2</sub></em>, 设计了 <strong>数据标注模块</strong>, 该模块的任务承接 <strong>异构数据录入</strong>, 为录入数据进行标注与归一化.</p>
<p>对应 <em>Q<sub>3</sub></em>, 用户的项目管理可以分为基础数据管理和 sandbox 管理, 将该系列的逻辑抽象为 <strong>项目管理模块</strong>.</p>
<p>对应 <em>Q<sub>4</sub></em>, 该问题的设计方案比较繁琐, 中间也走了不少的弯路, 最后它的设计归属于数据存储模块, 也就是预构建一个主图数据库.</p>
<p>对应 <em>Q<sub>5</sub></em>, 串联数据最核心的问题是如何保证主图数据库与关系型数据库的数据的 <strong>一致性</strong> , 这里的一致性主要在编码当中进行实现, 一致性设计方案参考了关系型数据库的 <em>事务</em> 的设计思路.</p>
<p>对应 <em>Q<sub>6</sub></em>, 设计出 <strong>数据可视化模块</strong> , 该模块具备直接连通前端和图数据库的能力.</p>
<p>数据管理的需求则是设计出对应的前后端模块即可.</p>
<p>最后还剩下 <strong>分布式</strong> 和 <strong>集群容器</strong> 模块, 这两个模块是对项目架构的进一步优化, 其本质与 <em>基础数据管理</em> 相类, 属于 <em>常见划分类型</em>, 在之后也许会进一步阐释.</p>
<p>而至于数据库的设计, 由于太过于公式化了, 所以这里就不做赘述.</p>
<h2 id="编码-amp-amp-测试"><a href="#编码-amp-amp-测试" class="headerlink" title="编码 &amp;&amp; 测试"></a>编码 &amp;&amp; 测试</h2><p>这二者是可以合并起来讲的, 因为实际上二者都是没什么可以讲的… 顶多是遇到了很多技术方面的问题, 但是这些问题详细铺开却又不是单独一篇文章能够解释清楚的了.</p>
<p>笔者的毕设使用 Flask + React 的前后端分离式设计. 其实在项目的初期, 平台使用的是纯 Flask 的前后端一体化的开发模式, 前端的样式交由 <em>Bootstrap</em> 的 dashlite 样式库, 只是后来随着项目的功能完善, 一体化的开发模式对功能的扩展, 代码的维护等等诸多方面都不太友好, 所以最后选择对项目功能进行进一步的解耦, 然后设计为前后端分离的模式.</p>
<p>测试则是直接使用 pytest 进行单元测试, 而没有再去选择 selenium 这些做更细致的自动化测试. 其中, 单元测试的主要目的就是避免 api 迭代过程中导致的函数或接口失效的问题.</p>
<p>关于这个过程中的一系列技术问题,计划之后在完成一些文章进行系统地阐释.</p>
<h2 id="CI-CD-部署"><a href="#CI-CD-部署" class="headerlink" title="CI/CD/部署"></a>CI/CD/部署</h2><p>本项目在 CI/CD 方面, 使用 <strong>pre-commit</strong> 做代码的质量控制, 使用 <strong>Github Action</strong> 来做线上代码质量的控制, 以及对不同版本的 Python 的支持能力, 使用 <strong>DockerHub</strong> 来对容器的构建进行验证. 并未使用 Jenkins 之类的更专业的持续集成工具.</p>
<p>部署上, 由于采用纯前后端分离的开发形式, 所以前端页面有自己的一套路由, 无法也没有必要与 flask 做兼容, 所以, 使用 nginx 将前后端代理至统一的端口即可.</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本篇的主要内容是毕设项目的整体设计, 值得一提的是, 这篇文章写于毕设答辩前夕, 站在总结的角度来对项目初期的一些设计和问题进行梳理, 看看整个项目的演进过程与预期的异同, 倒也别是一番滋味~</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>附录中将会链上毕设相关的一些内容.</p>
<p><a href="https://blog.harumonia.moe/fastnlp-and-spacy/">Python 自然语言处理应用 - fastnlp 和 spaCy</a><br><a href="https://blog.harumonia.moe/christin-develop-2/">Nginx 在纯粹前后端分离设计中的桥梁作用</a></p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Christin开发记录(2) - nginx和前后端分离</title>
    <url>/christin-develop-2/</url>
    <content><![CDATA[<p>在<a href="https://blog.harumonia.moe/christin-develop-1/">Christin 开发记录(1)</a>中， 我们讲过了这个项目的大体的设计思路，本篇以及之后的几篇将会详细地阐述各个技术要点的具体实现方案。</p>
<p>本篇主要的内容是 nginx 在 <em>前后端分离</em> 和 <em>多语言开发</em> 的代理作用.</p>
<a id="more"></a>

<p>在网站的开发过程中, 前端和后端该如何协调, 常见的有两种方式, 服务器渲染和前后端分离.</p>
<p>在过去, 笔者最常使用的就是服务器渲染为主, 前后端分离为辅的开发方式. 这样做的一个坏处就是很容易造成前后端的开发逻辑混乱, 什么时候用服务器渲染, 什么时候用 api. 最常见的, 在渲染列表时该如何选择, 使用 jinja 进行服务器渲染能够进行朴素循环, 而使用 JavaScrip 同样可以实现基于朴素循环的 DOM 操作, 而根据所使用的 JavaScript 库的不同, 同一种列表可能会分别采用两种不同的操作方式(开发速度优先的话), 这无疑会给后续的维护带来不必要的困扰.</p>
<p>所以, 这次的毕设笔者采用了 <strong>完全前后端分离</strong> 的开发思路, 彻底抛弃服务器端渲染.</p>
<h2 id="分离式开发"><a href="#分离式开发" class="headerlink" title="分离式开发"></a>分离式开发</h2><p>在过去笔者也尝试过类似的分离式开发, 其中遇到的首要问题就是, 前端应用的端口和后端应用的端口不同(不同源), 那么前端后端的数据交互就是跨域的, 因此就需要在 flask 的应用中配置 <strong>CORS</strong> 来允许来自前端的跨域请求.</p>
<p>而在 <a href="https://blog.miguelgrinberg.com/post/how-to-create-a-react--flask-project">How To Create a React + Flask Project</a> 一文中, <em>miguelgrinberg</em> 介绍了如何进行 react+flask 前后端分离式的开发. 通过前端规定代理接口的地址来实现 <strong>同源请求</strong> , 这就避免了在 flask 中去配置跨域许可(毕竟泛滥的跨域许可也给网站的安全性带来了不利的影响).</p>
<p>这解决了网站开发时出现的问题, 但是又引出了一个新的问题, 这一份前端的代码应该如何使用?</p>
<p>如果没有引入前端路由体系, 那么打包为静态文件之后只需要进行一些简单的配置, 即可让它成为 flask 项目组的一部分.</p>
<blockquote>
<p>当然, 从它成为 flask 的一部分的时候起, 整个前后端交互也就重新回到了 <em>混合式</em> 了.</p>
</blockquote>
<p>但是, 实际情况是, 由于项目结构比较复杂, 所以在前端使用了 react 自带的路由体系, 毫无疑问, 如果就这样打包放入 flask 模板文件下, 势必会造成路由逻辑的冲突. 所以在部署时就出现了两种思路.</p>
<ol>
<li>分离式部署, 即, 按照项目开发时的逻辑进行部署.</li>
<li>使用 nginx 进行代理, 统合部署.</li>
</ol>
<h3 id="分离式部署"><a href="#分离式部署" class="headerlink" title="分离式部署"></a>分离式部署</h3><p>这种部署方式最终会占用两个端口, React 一个端口, flask 一个端口, 显然, 这两个端口是违背了 <strong>同源策略</strong> 的, 所以还是会回到上文所述的跨域问题.</p>
<p>另外, 这种部署方式所引出的另一个问题, react 的服务端本质上是 node 的服务端, 需要考虑的是 <strong>同时启动多个服务端对服务器产生的性能压力</strong> .</p>
<h3 id="nginx-代理"><a href="#nginx-代理" class="headerlink" title="nginx 代理"></a>nginx 代理</h3><p>这是我最终选择的一个方案.</p>
<p>将文件打包, nginx 作为 web 服务器来管理这些静态文件. 而至于 flask 的 api 接口, 则通过 nginx 进行代理, 从而实现端口的统一.</p>
<p>最终的 nginx 配置文件核心配置如下.</p>
<pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>
    <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>

    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">root</span>   <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token punctuation">;</span>
        <span class="token keyword">index</span>  <span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>
        <span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token operator">/</span><span class="token keyword">index</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment"># 代理api接口</span>
    <span class="token keyword">location</span> <span class="token operator">/</span>api <span class="token punctuation">&#123;</span>
      <span class="token keyword">proxy_pass</span>  <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>backend<span class="token operator">/</span>api<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中, <code>try_files $uri /index.html;</code> 适配了 react 本身的路由.</p>
<h2 id="多语言开发"><a href="#多语言开发" class="headerlink" title="多语言开发"></a>多语言开发</h2><p>在概述所提到的另一个重点就是多语言开发, 实际上这是项目在后续演进过程中才会关注的问题, 不过在 <a href="#%E5%88%86%E7%A6%BB%E5%BC%8F%E9%83%A8%E7%BD%B2">分离式部署</a> 这个废案中进行过一次简单的尝试.</p>
<p>上面我们通过 nginx 的代理功能将 flask 后端的 api 接口摘出, 作为唯一 api 服务提供. 而之后我们可能会进行 Go \ Node 等语言的 api 开发,这时候只要对路由进行前缀定义, 比如 <code>/go/api</code> , 然后在 nginx 配置文件中作出相关的代理配置即可.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇介绍了 nginx 如何成为前后端分离式开发的桥梁, 当然, 想要达成这一目的, 方法并不是唯一的, 只是笔者基于自身现有的技术栈而想到的一个方法, 如果有更好更先进的策略, 欢迎赐教.</p>
<h2 id="篇外"><a href="#篇外" class="headerlink" title="篇外"></a>篇外</h2><p>如果看了 Christin 的源码, 不难发现项目存在 v1 和 v2 两个 api 版本, 前者是采用混合式开发思路, 而在开发过程中愈发觉得这种思路的混乱与难以维护, 所以就有了 v2 版本.</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>起居杂录小纲</title>
    <url>/dailylife/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote>
<p>正经人谁写日记啊？ –《邪不压正》</p>
</blockquote>
<p><strong>纲者,维紘绳也.从糸冈声.<br>它将是整篇起居录的起点,也是结点.</strong></p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>如第一引言所述，话虽然是戏谑调侃,但我对这个观点是非常赞同的。</p>
<p>私以为,少年人的日记,无病呻吟,不过抒发自己内心的愤懑与骚动,宣泄情感而已;步入社会之后,中青年人是不会有日记的,因为日记存在的唯一意义就是授人以柄,落人口实,弊大于利,即使是有,也不过是因为有利可图罢了,这种情境下的日记也已经称不上日记了.</p>
<p>再说网络。网络从来不是表达感情的好地方，因为这是一个从不缺乏恶意的地方，所以自从中学之后，便鲜有在网络上流露自己真情实感，也不再相信会有成熟的人会在网络上推心置腹。这是一个暴力的地方，自它诞生起，这一属性就从未变过。</p>
<p>那么,我为什么要写这样一组日记式的博客呢.</p>
<p><strong>博客，是用来炫技的地方</strong>。</p>
<p>本博客建立之初，我就是抱着将它打造成一个技术博客的想法，不过后来有所经历，有所感悟，于是壮志渐消,热血渐凉.</p>
<p><em>我离开了一个秘密基地,然后又找到了一个秘密基地</em>. 这就是第二引言的含义.</p>
<p>在这里,我在无聊的大学时光里第一次找回了追求技术,实现技术的兴奋,第一次进入这个页面,第一次发文章,第一次 diy 页面(虽然最后从高冷的极客风降格成了 qq 空间….)……太多的感动,太多的回忆沉淀在这里.</p>
<p>所以,我想赋予它更深层次的意义.不仅仅是一个夸耀技术的地方,而是作为一处宝藏,可以是我的,也可以是很多人的……</p>
<hr>
<p>写于 2019 年 07 月 19 日的结句.</p>
<p><strong>在破碎的地方埋藏梦想,将情感寄托于虚妄,悲悯于过去,彷徨于现在,最后在孤独之中书写未来.</strong></p>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
      <tags>
        <tag>章节纲记</tag>
      </tags>
  </entry>
  <entry>
    <title>桂苑酌记小纲</title>
    <url>/drink-with-reading/</url>
    <content><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote>
<p>花间一壶酒，独酌无相亲。举杯邀明月，对饮成三人。<br>——李白《月下独酌四首·其一》</p>
</blockquote>
<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>先来解一下为什么要叫做桂苑酌记吧，这当然不是什么一拍脑门随手所书。</p>
<p>之所以称之为桂，原因有三。<br>其一，桂者，草木之滋。胜者之冠。<br>其二，我所就读的大学与中医药密切相关，不过我又不是正统的医学出身，故而舍杏而取桂。<br>其三，佛曰：“不可说”，哈哈。</p>
<p>苑者，取自汉·刘向的《说苑》。适时恰读冯友兰先生的《中国哲学简史》，至第一十七章，得“苑”字，取其雅意，另和于桂。</p>
<p>酌者，对应了引言之中的月下独酌。南京很大，我很渺小，湮没在芸芸众生之中，我也不过是平凡者中的一位罢了。一个人看过日出，一个人看过日落，一个人游过花海，一个人登过栖霞。没错，与其说我取了一个酌字，不如说我取了一个独字，不过细细品味就会发现，酌本身就蕴含了独的意境，而又囊括了看淡世事的沉静。推敲再三，取第三字为酌。</p>
<p>至于“记”。</p>
<blockquote>
<p>记者,书也。 ——《广雅》</p>
</blockquote>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>大学，两种书。</p>
<p>专业书和非专业书。</p>
<p>先说专业书吧，大学有很多的专业课，自然也就有浩繁如烟海的专业类书籍，这些书会让我们在日后的职业生涯中的路<strong>更宽、更阔</strong> ，这一点毋庸置疑。</p>
<p>不过，这一节并不准备留给这些“专业书”。</p>
<p><strong>我还是喜欢看一些非专业书，因为他能让我的路走得更远。</strong></p>
<p>高中毕业已经很久，与计算机相处久了，感觉自己已经说不出多少煽情的话了。</p>
<p>不过，我还是享受。享受和阿加莎、柯南道尔一同解谜的时光，享受冯友兰、南怀瑾的说教，享受 kleon 的诡辩，享受马丁所创造的奇幻瑰丽的新世界……</p>
<p>这些是过去的感动，曾经不只是我一个人而现在独属于我的感动；这些是现在的欢愉，哪怕是百年的孤独，也不必有所畏惧；这些是未来的回忆，是我曾走过的路……</p>
<p>于此，我将专业书和非专业书割裂，也是将工作与生活割裂。我们谁也不是也不应该是只知道工作的生活的奴仆，而是生活的掌控者，是生活的享受者。</p>
<p>Harumonia<br>初稿 2018.10.30<br>第一次修改 2019.7.20</p>
]]></content>
      <categories>
        <category>桂苑酌记</category>
      </categories>
      <tags>
        <tag>章节纲记</tag>
      </tags>
  </entry>
  <entry>
    <title>fastNLP和spaCy的使用</title>
    <url>/fastnlp-and-spacy/</url>
    <content><![CDATA[<p>fastNLP 和 spaCy 都是自然语言处理常用的算法包,本篇将会应用的角度,分别使用这两个算法包训练一个可用的命名实体识别模型.</p>
<a id="more"></a>

<h2 id="fastNLP"><a href="#fastNLP" class="headerlink" title="fastNLP"></a>fastNLP</h2><p><a href="https://fastnlp.readthedocs.io/zh/latest/user/installation.html">fastNLP</a> 是复旦大学邱锡鹏教授的团队所维护的开源算法包, 其中以 Modules 和 Models 的形式封装了很多的算法结构, 能够很方便地组合出想要的结构模型.比如这篇 <a href="https://zhuanlan.zhihu.com/p/326135985">FLAT</a>, 以及官网所提供的 <a href="https://fastnlp.readthedocs.io/zh/latest/tutorials/%E5%BA%8F%E5%88%97%E6%A0%87%E6%B3%A8.html">BiLSTMCRF</a>.</p>
<h3 id="fastNLP-应用流程"><a href="#fastNLP-应用流程" class="headerlink" title="fastNLP 应用流程"></a>fastNLP 应用流程</h3><p>在官网文档的序列标注模块, 已经给出了模型训练的整体使用流程, 并且代码也没有什么问题. 不过原教程所使用的是其封装好的 <em>DataSet</em> 模块数据, 这里对导入第三方数据的描述不甚了了,本篇要补充的也就是数据集的规范处理而已.</p>
<h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p>以笔者用来分析的数据集为例, 文件夹中存在很多的 excel, 每条数据为一个 excel 文件, 每个文件的内容如下表所示.</p>
<table>
<thead>
<tr>
<th></th>
<th>内容</th>
<th>标记</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>肺</td>
<td>O</td>
</tr>
<tr>
<td>1</td>
<td>部</td>
<td>O</td>
</tr>
<tr>
<td>2</td>
<td>恶</td>
<td>O</td>
</tr>
<tr>
<td>3</td>
<td>变</td>
<td>O</td>
</tr>
<tr>
<td>4</td>
<td>,</td>
<td>O</td>
</tr>
<tr>
<td>5</td>
<td>精</td>
<td>O</td>
</tr>
<tr>
<td>6</td>
<td>神</td>
<td>O</td>
</tr>
<tr>
<td>7</td>
<td>改</td>
<td>O</td>
</tr>
<tr>
<td>8</td>
<td>善</td>
<td>O</td>
</tr>
<tr>
<td>9</td>
<td>,</td>
<td>O</td>
</tr>
<tr>
<td>10</td>
<td>左</td>
<td>B-BW</td>
</tr>
<tr>
<td>11</td>
<td>侧</td>
<td>I-BW</td>
</tr>
<tr>
<td>12</td>
<td>胸</td>
<td>I-BW</td>
</tr>
<tr>
<td>13</td>
<td>痛</td>
<td>B-ZZ</td>
</tr>
<tr>
<td>14</td>
<td>减</td>
<td>O</td>
</tr>
<tr>
<td>15</td>
<td>轻</td>
<td>O</td>
</tr>
<tr>
<td>16</td>
<td>,</td>
<td>O</td>
</tr>
<tr>
<td>17</td>
<td>纳</td>
<td>O</td>
</tr>
<tr>
<td>18</td>
<td>好</td>
<td>O</td>
</tr>
<tr>
<td>19</td>
<td>转</td>
<td>O</td>
</tr>
<tr>
<td>20</td>
<td>,</td>
<td>O</td>
</tr>
</tbody></table>
<p>如上图, 这里数据集的标志整体采用 IOB(Inside-Outside-Begining) 的标注方式. fastNLP 目前不支持这种类型的文件读取, 所以需要手动写一段代码将这个文件组转化为它能直接读取的数据结构. 这里分享一下我的转换代码.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> glob
<span class="token keyword">from</span> fastNLP <span class="token keyword">import</span> Instance

<span class="token keyword">def</span> <span class="token function">transfer_sentence</span><span class="token punctuation">(</span>df_input<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    将标注好的句子转为实例

    return: 将单个数据集的特征打包为一个数据示例(Instance)
    """</span>
    words <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    targets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    raw_chars <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>df_input<span class="token punctuation">.</span>内容<span class="token punctuation">)</span>
    idx <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment"># 遍历原始数据集,只保留符合标注规范的数据</span>
    <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>df_input<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> df_input<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>idx<span class="token punctuation">,</span><span class="token string">'标记'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">:</span>
            words<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>idx<span class="token punctuation">,</span><span class="token string">'内容'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            idx <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">elif</span> df_input<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>idx<span class="token punctuation">,</span><span class="token string">'标记'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            targets<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df_input<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>idx<span class="token punctuation">,</span><span class="token string">'标记'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            tmp <span class="token operator">=</span> <span class="token string">''</span>
            tmp <span class="token operator">+=</span> df_input<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>idx<span class="token punctuation">,</span><span class="token string">'内容'</span><span class="token punctuation">]</span>
            idx <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">while</span> idx <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>df_input<span class="token punctuation">.</span>index<span class="token punctuation">)</span> <span class="token keyword">and</span> df_input<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>idx<span class="token punctuation">,</span><span class="token string">'标记'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'I'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                tmp <span class="token operator">+=</span> df_input<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>idx<span class="token punctuation">,</span><span class="token string">'内容'</span><span class="token punctuation">]</span>
                idx <span class="token operator">+=</span> <span class="token number">1</span>
            words<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            idx <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">return</span>
    <span class="token comment"># 如果目标列表为空,说明数据集中没有特征数据,丢弃</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> targets<span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    <span class="token keyword">return</span> Instance<span class="token punctuation">(</span>
        raw_chars <span class="token operator">=</span> raw_chars<span class="token punctuation">,</span>
        chars <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>df_input<span class="token punctuation">.</span>内容<span class="token punctuation">)</span><span class="token punctuation">,</span>
        target <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>df_input<span class="token punctuation">.</span>标记<span class="token punctuation">)</span><span class="token punctuation">,</span>
        seq_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>df_input<span class="token punctuation">.</span>标记<span class="token punctuation">)</span><span class="token punctuation">,</span>
        words <span class="token operator">=</span> words<span class="token punctuation">,</span>
        whole_targets <span class="token operator">=</span> targets
    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于笔者的代码集是委托中医学人士手动标注的, 所以其中存在一些不规范的标注, 代码中有一部分就是用来手动清洗纠正, 这种纠正具备泛用性, 在其他领域的标注集上也能使用.</p>
<p>调用代码就多种多样了, 最终, 我通过如下的代码将其组成为一个传统的数据集形式.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">dataset <span class="token operator">=</span> DataSet<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> file_path <span class="token keyword">in</span> file_path_list<span class="token punctuation">:</span>
    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>index_col<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    ins <span class="token operator">=</span> transfer_sentence<span class="token punctuation">(</span>df<span class="token punctuation">)</span>
    <span class="token keyword">if</span> ins<span class="token punctuation">:</span>
        dataset<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ins<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>得到的数据集如下所示.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span> raw_chars         <span class="token operator">|</span> chars            <span class="token operator">|</span> target           <span class="token operator">|</span> seq_len <span class="token operator">|</span> words            <span class="token operator">|</span> whole_targets     <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span> 代诉：右肺癌<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'代'</span><span class="token punctuation">,</span> <span class="token string">'诉'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O... | 77      | ['</span>代<span class="token string">', '</span>诉<span class="token string">', ... | ['</span>ZZ<span class="token string">', '</span>ZZ<span class="token string">', '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">|</span> 代诉：服上药后<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'代'</span><span class="token punctuation">,</span> <span class="token string">'诉'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O... | 114     | ['</span>代<span class="token string">', '</span>诉<span class="token string">', ... | ['</span>BW<span class="token string">', '</span>BW<span class="token string">', '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">|</span> 右下肺占位<span class="token punctuation">,</span>右<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'右'</span><span class="token punctuation">,</span> <span class="token string">'下'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O... | 94      | ['</span>右<span class="token string">', '</span>下<span class="token string">', ... | ['</span>ZZ<span class="token string">', '</span>ZZ<span class="token string">', '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">|</span> 右上肺占位<span class="token punctuation">,</span>经<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'右'</span><span class="token punctuation">,</span> <span class="token string">'上'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O... | 133     | ['</span>右<span class="token string">', '</span>上<span class="token string">', ... | ['</span>ZZ<span class="token string">', '</span>ZZ<span class="token string">', '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">|</span> 今年<span class="token number">6</span>月左右开<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'今'</span><span class="token punctuation">,</span> <span class="token string">'年'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O... | 100     | ['</span>今<span class="token string">', '</span>年<span class="token string">', ... | ['</span>ZZ<span class="token string">', '</span>ZZ<span class="token string">', '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">|</span> 自觉体力有所改<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'自'</span><span class="token punctuation">,</span> <span class="token string">'觉'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O... | 56      | ['</span>自<span class="token string">', '</span>觉<span class="token string">', ... | ['</span>ZZ<span class="token string">', '</span>ZZ<span class="token string">', '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">|</span> 疲劳乏力<span class="token punctuation">,</span>右胸<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'疲'</span><span class="token punctuation">,</span> <span class="token string">'劳'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'B-ZZ'</span><span class="token punctuation">,</span> <span class="token string">'I-Z... | 55      | ['</span>疲劳乏力<span class="token string">', ... | ['</span>ZZ<span class="token string">', '</span>BW<span class="token string">', '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">|</span> <span class="token number">2000</span>年右肺细胞<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'0... | ['</span>O<span class="token string">', '</span>O<span class="token string">', '</span>O<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token number">86</span>      <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">,</span> <span class="token string">'0... | ['</span>CD<span class="token string">', '</span>ZZ<span class="token string">', '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">|</span> 午后身热<span class="token punctuation">,</span>作业<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'午'</span><span class="token punctuation">,</span> <span class="token string">'后'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O... | 52      | ['</span>午<span class="token string">', '</span>后<span class="token string">', ... | ['</span>ZZ<span class="token string">', '</span>ZZ<span class="token string">', '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">|</span> 右肺<span class="token number">94</span>年癌手术<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'右'</span><span class="token punctuation">,</span> <span class="token string">'肺'</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span> <span class="token punctuation">[</span><span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O'</span><span class="token punctuation">,</span> <span class="token string">'O... | 72      | ['</span>右<span class="token string">', '</span>肺<span class="token string">', ... | ['</span>ZZ<span class="token string">', '</span>CD<span class="token string">', '</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="fastNLP-模型训练"><a href="#fastNLP-模型训练" class="headerlink" title="fastNLP 模型训练"></a>fastNLP 模型训练</h4><p>随后, 通过如下的代码可以直接在这个数据集上训练模型.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">vocab <span class="token operator">=</span> Vocabulary<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#  从该dataset中的chars列建立词表</span>
vocab<span class="token punctuation">.</span>from_dataset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> field_name<span class="token operator">=</span><span class="token string">'chars'</span><span class="token punctuation">)</span>
<span class="token comment">#  使用vocabulary将chars列转换为index</span>
vocab<span class="token punctuation">.</span>index_dataset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> field_name<span class="token operator">=</span><span class="token string">'chars'</span><span class="token punctuation">)</span>

target_vocab <span class="token operator">=</span> Vocabulary<span class="token punctuation">(</span>unknown<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
<span class="token comment">#  从该dataset中的chars列建立词表</span>
target_vocab<span class="token punctuation">.</span>from_dataset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> field_name<span class="token operator">=</span><span class="token string">'target'</span><span class="token punctuation">)</span>
<span class="token comment">#  使用vocabulary将chars列转换为index</span>
target_vocab<span class="token punctuation">.</span>index_dataset<span class="token punctuation">(</span>dataset<span class="token punctuation">,</span> field_name<span class="token operator">=</span><span class="token string">'target'</span><span class="token punctuation">)</span>

<span class="token comment"># 重命名列名, fastnlp这里似乎是写死的, 只有words能被识别读取</span>
dataset<span class="token punctuation">.</span>rename_field<span class="token punctuation">(</span><span class="token string">'chars'</span><span class="token punctuation">,</span> <span class="token string">'words'</span><span class="token punctuation">)</span>

<span class="token comment"># *设置输入列和目标列</span>
dataset<span class="token punctuation">.</span>set_input<span class="token punctuation">(</span><span class="token string">'words'</span><span class="token punctuation">,</span><span class="token string">'target'</span><span class="token punctuation">,</span><span class="token string">'seq_len'</span><span class="token punctuation">)</span>
dataset<span class="token punctuation">.</span>set_target<span class="token punctuation">(</span><span class="token string">'target'</span><span class="token punctuation">,</span><span class="token string">'seq_len'</span><span class="token punctuation">)</span>

<span class="token comment"># 设置训练集和开发集</span>
train  <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1750</span><span class="token punctuation">]</span>
dev <span class="token operator">=</span> dataset<span class="token punctuation">[</span><span class="token number">1750</span><span class="token punctuation">:</span><span class="token number">1900</span><span class="token punctuation">]</span>

embed <span class="token operator">=</span> StaticEmbedding<span class="token punctuation">(</span>vocab<span class="token operator">=</span>vocab<span class="token punctuation">,</span> model_dir_or_name<span class="token operator">=</span><span class="token string">'cn-char-fastnlp-100d'</span><span class="token punctuation">)</span>

model <span class="token operator">=</span> BiLSTMCRF<span class="token punctuation">(</span>embed<span class="token operator">=</span>embed<span class="token punctuation">,</span> num_classes<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>target_vocab<span class="token punctuation">)</span><span class="token punctuation">,</span> num_layers<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> dropout<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> target_vocab<span class="token operator">=</span>target_vocab<span class="token punctuation">)</span>
<span class="token comment"># 使用其他的模型结构</span>
<span class="token comment"># model = SeqLabeling(embed=embed, num_classes=len(target_vocab), hidden_size=200)</span>
<span class="token comment"># model = AdvSeqLabel(embed=embed, num_classes=len(target_vocab), hidden_size=200, dropout=0.5)</span>

metric <span class="token operator">=</span> SpanFPreRecMetric<span class="token punctuation">(</span>tag_vocab<span class="token operator">=</span>target_vocab<span class="token punctuation">)</span>
optimizer <span class="token operator">=</span> Adam<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
loss <span class="token operator">=</span> LossInForward<span class="token punctuation">(</span><span class="token punctuation">)</span>

device<span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">'cpu'</span>
trainer <span class="token operator">=</span> Trainer<span class="token punctuation">(</span>train<span class="token punctuation">,</span> model<span class="token punctuation">,</span> loss<span class="token operator">=</span>loss<span class="token punctuation">,</span> optimizer<span class="token operator">=</span>optimizer<span class="token punctuation">,</span>
                    dev_data<span class="token operator">=</span>dev<span class="token punctuation">,</span> metrics<span class="token operator">=</span>metric<span class="token punctuation">,</span> device<span class="token operator">=</span>device<span class="token punctuation">,</span>n_epochs<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
trainer<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里详细的代码说明可以去<a href="https://fastnlp.readthedocs.io/zh/latest/user/installation.html">官方文档</a>的序列标注以及详细说明查看.</p>
<p>其中, <strong>设置输入列和目标列</strong> 这一点比较重要, 笔者也是看了源码之后才发现这个操作的, 不知道是不是有其他的配置办法.s</p>
<p>最终得到形如下数据结构的输出, 就是我们的模型结果.</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"best_eval"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"SpanFPreRecMetric"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token property">"f"</span><span class="token operator">:</span> <span class="token number">0.821678</span><span class="token punctuation">,</span> <span class="token property">"pre"</span><span class="token operator">:</span> <span class="token number">0.827951</span><span class="token punctuation">,</span> <span class="token property">"rec"</span><span class="token operator">:</span> <span class="token number">0.8155</span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"best_epoch"</span><span class="token operator">:</span> <span class="token number">97</span><span class="token punctuation">,</span>
  <span class="token property">"best_step"</span><span class="token operator">:</span> <span class="token number">2328</span><span class="token punctuation">,</span>
  <span class="token property">"seconds"</span><span class="token operator">:</span> <span class="token number">297.19</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="fastNLP-工具评价"><a href="#fastNLP-工具评价" class="headerlink" title="fastNLP 工具评价"></a>fastNLP 工具评价</h3><p>总的来说, fastNLP 是绝佳的科研拍档, 我的毕设的 NLP 部分将诸多文献从理论转为实践, fastNLP 功不可没.</p>
<p>它虽然能够训练模型, 并验证模型的准确率等各种指标参数, 但是这个模型如何实际应用, 却并没有提供一个很好的接口. 而从应用的角度来说, 尽管后续开发出了 <a href="https://github.com/fastnlp/fastHan">fastHan</a>来不足这些短板, 但是它的使用效果还是不如人意.</p>
<h2 id="spaCy"><a href="#spaCy" class="headerlink" title="spaCy"></a>spaCy</h2><p>正如其官网所言, <em>Industrial-Strength Natural Language Processing</em> , spaCy 提供了一套完整的从训练集到实际应用的流程, 在 spaCy 3.0 中, 这一优势得到了进一步的放大.</p>
<h3 id="spaCy-应用流程"><a href="#spaCy-应用流程" class="headerlink" title="spaCy 应用流程"></a>spaCy 应用流程</h3><h4 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h4><p>spaCy 支持多种的数据集导入, 如 <a href="#%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86">数据处理</a> 一节中所述的数据集, 将其转换为 <code>.conll</code> 形式, 并拆分为 <code>train.conll</code> 和 <code>dev.conll</code> 两种形式, 然后通过如下命令进行数据集的转换.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python -m spacy convert ./dataSet/train.conll ./corpus
python -m spacy convert ./dataSet/dev.conll ./corpus<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>最终, 在 corpus 文件夹中得到两个文件, train.spacy 和 dev.spacy, 这就是将要用来训练的文件.</p>
<h4 id="spaCy-模型训练"><a href="#spaCy-模型训练" class="headerlink" title="spaCy 模型训练"></a>spaCy 模型训练</h4><p>spaCy 提供一种简单地模型训练方法, 即 <a href="https://spacy.io/usage/training">通过配置文件训练</a>.</p>
<p>这里采用默认的配置文件, 其内容可见于<a href="#config.cfg">附录-config.cfg</a>, 然后使用如下命令进行训练.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">python -m spacy train config.cfg --output ./output --paths.train ./corpus/train.spacy --paths.dev ./corpus/dev.spacy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里使用 <code>--output</code> 参数, 将模型的训练结果保存到制定的文件夹下, 方便后续的使用. 在训练的过程中, 会有形似下表的训练过程, 其中包含了模型的评价信息.</p>
<table>
<thead>
<tr>
<th>E</th>
<th>#</th>
<th>LOSS TRANS…</th>
<th>LOSS NER</th>
<th>ENTS_F</th>
<th>ENTS_P</th>
<th>ENTS_R</th>
<th>SCORE</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>2185.35</td>
<td>798.95</td>
<td>0.42</td>
<td>0.27</td>
<td>0.97</td>
<td>0.00</td>
</tr>
<tr>
<td>5</td>
<td>200</td>
<td>160333.23</td>
<td>85173.11</td>
<td>73.68</td>
<td>69.85</td>
<td>77.97</td>
<td>0.74</td>
</tr>
<tr>
<td>11</td>
<td>400</td>
<td>21187.02</td>
<td>18633.31</td>
<td>81.52</td>
<td>77.72</td>
<td>85.71</td>
<td>0.82</td>
</tr>
<tr>
<td>17</td>
<td>600</td>
<td>7271.55</td>
<td>9616.02</td>
<td>82.09</td>
<td>78.97</td>
<td>85.47</td>
<td>0.82</td>
</tr>
<tr>
<td>22</td>
<td>800</td>
<td>3748.11</td>
<td>6245.82</td>
<td>82.90</td>
<td>80.05</td>
<td>85.96</td>
<td>0.83</td>
</tr>
<tr>
<td>28</td>
<td>1000</td>
<td>2176.55</td>
<td>5025.63</td>
<td>83.35</td>
<td>80.80</td>
<td>86.08</td>
<td>0.83</td>
</tr>
<tr>
<td>34</td>
<td>1200</td>
<td>1047.27</td>
<td>4341.49</td>
<td>83.43</td>
<td>80.52</td>
<td>86.56</td>
<td>0.83</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
<td>…</td>
</tr>
</tbody></table>
<h4 id="模型使用"><a href="#模型使用" class="headerlink" title="模型使用"></a>模型使用</h4><p>spaCy 的模型调用非常简单, 使用如下的代码即可.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> spacy

nlp <span class="token operator">=</span> spacy<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"./output/model-best"</span><span class="token punctuation">)</span>
doc <span class="token operator">=</span> nlp<span class="token punctuation">(</span><span class="token string">'巅顶疼痛基本稳定,但转侧不舒,昏重,视物稍糊,不咳,无痰,食纳少味,舌面下唇粘膜辣痛,口不干,尿少,大便正常'</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> ent <span class="token keyword">in</span> doc<span class="token punctuation">.</span>ents<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>ent<span class="token punctuation">.</span>text<span class="token punctuation">,</span> ent<span class="token punctuation">.</span>start_char<span class="token punctuation">,</span> ent<span class="token punctuation">.</span>end_char<span class="token punctuation">,</span> ent<span class="token punctuation">.</span>label_<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>得到如下的输出.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">转侧不舒 <span class="token number">10</span> <span class="token number">14</span> ZZ
昏 <span class="token number">15</span> <span class="token number">16</span> ZZ
重 <span class="token number">16</span> <span class="token number">17</span> ZZ
视物稍糊 <span class="token number">18</span> <span class="token number">22</span> ZZ
不 <span class="token number">23</span> <span class="token number">24</span> CD
咳 <span class="token number">24</span> <span class="token number">25</span> ZZ
无痰 <span class="token number">26</span> <span class="token number">28</span> ZZ
食纳少味 <span class="token number">29</span> <span class="token number">33</span> ZZ
舌面下唇粘膜 <span class="token number">34</span> <span class="token number">40</span> BW
辣 <span class="token number">40</span> <span class="token number">41</span> ZZ
痛 <span class="token number">41</span> <span class="token number">42</span> ZZ
口 <span class="token number">43</span> <span class="token number">44</span> BW
不 <span class="token number">44</span> <span class="token number">45</span> CD
干 <span class="token number">45</span> <span class="token number">46</span> ZZ
尿少 <span class="token number">47</span> <span class="token number">49</span> ZZ
大便正常 <span class="token number">50</span> <span class="token number">54</span> ZZ<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="spaCy-工具评价"><a href="#spaCy-工具评价" class="headerlink" title="spaCy 工具评价"></a>spaCy 工具评价</h3><p>spaCy 唯一的缺陷也许就是没有完备的中文文档了, 在实际应用方面, 这绝对是我所用过的 <em>最为省心与顺手</em> 的 NLP 工具包.</p>
<p>上面的例子中展示的是其中的一个模型, 它还支持更多的模型结构, 当然也包括自定义的模型结构. 另外, 它还包括了非常美观的<a href="https://spacy.io/usage/visualizers">可视化</a>接口.</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="config-cfg"><a href="#config-cfg" class="headerlink" title="config.cfg"></a>config.cfg</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># This is an auto-generated partial config. To use it with 'spacy train'</span>
<span class="token comment"># you can run spacy init fill-config to auto-fill all default settings:</span>
<span class="token comment"># python -m spacy init fill-config ./base_config.cfg ./config.cfg</span>
<span class="token punctuation">[</span>paths<span class="token punctuation">]</span>
train <span class="token operator">=</span> null
dev <span class="token operator">=</span> null

<span class="token punctuation">[</span>system<span class="token punctuation">]</span>
gpu_allocator <span class="token operator">=</span> <span class="token string">"pytorch"</span>

<span class="token punctuation">[</span>nlp<span class="token punctuation">]</span>
lang <span class="token operator">=</span> <span class="token string">"zh"</span>
pipeline <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"transformer"</span><span class="token punctuation">,</span><span class="token string">"ner"</span><span class="token punctuation">]</span>
batch_size <span class="token operator">=</span> <span class="token number">128</span>

<span class="token punctuation">[</span>components<span class="token punctuation">]</span>

<span class="token punctuation">[</span>components<span class="token punctuation">.</span>transformer<span class="token punctuation">]</span>
factory <span class="token operator">=</span> <span class="token string">"transformer"</span>

<span class="token punctuation">[</span>components<span class="token punctuation">.</span>transformer<span class="token punctuation">.</span>model<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@architectures</span> <span class="token operator">=</span> <span class="token string">"spacy-transformers.TransformerModel.v1"</span>
name <span class="token operator">=</span> <span class="token string">"bert-base-chinese"</span>
tokenizer_config <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"use_fast"</span><span class="token punctuation">:</span> true<span class="token punctuation">&#125;</span>

<span class="token punctuation">[</span>components<span class="token punctuation">.</span>transformer<span class="token punctuation">.</span>model<span class="token punctuation">.</span>get_spans<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@span_getters</span> <span class="token operator">=</span> <span class="token string">"spacy-transformers.strided_spans.v1"</span>
window <span class="token operator">=</span> <span class="token number">128</span>
stride <span class="token operator">=</span> <span class="token number">96</span>

<span class="token punctuation">[</span>components<span class="token punctuation">.</span>ner<span class="token punctuation">]</span>
factory <span class="token operator">=</span> <span class="token string">"ner"</span>

<span class="token punctuation">[</span>components<span class="token punctuation">.</span>ner<span class="token punctuation">.</span>model<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@architectures</span> <span class="token operator">=</span> <span class="token string">"spacy.TransitionBasedParser.v2"</span>
state_type <span class="token operator">=</span> <span class="token string">"ner"</span>
extra_state_tokens <span class="token operator">=</span> false
hidden_width <span class="token operator">=</span> <span class="token number">64</span>
maxout_pieces <span class="token operator">=</span> <span class="token number">2</span>
use_upper <span class="token operator">=</span> false
nO <span class="token operator">=</span> null

<span class="token punctuation">[</span>components<span class="token punctuation">.</span>ner<span class="token punctuation">.</span>model<span class="token punctuation">.</span>tok2vec<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@architectures</span> <span class="token operator">=</span> <span class="token string">"spacy-transformers.TransformerListener.v1"</span>
grad_factor <span class="token operator">=</span> <span class="token number">1.0</span>

<span class="token punctuation">[</span>components<span class="token punctuation">.</span>ner<span class="token punctuation">.</span>model<span class="token punctuation">.</span>tok2vec<span class="token punctuation">.</span>pooling<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@layers</span> <span class="token operator">=</span> <span class="token string">"reduce_mean.v1"</span>

<span class="token punctuation">[</span>corpora<span class="token punctuation">]</span>

<span class="token punctuation">[</span>corpora<span class="token punctuation">.</span>train<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@readers</span> <span class="token operator">=</span> <span class="token string">"spacy.Corpus.v1"</span>
path <span class="token operator">=</span> $<span class="token punctuation">&#123;</span>paths<span class="token punctuation">.</span>train<span class="token punctuation">&#125;</span>
max_length <span class="token operator">=</span> <span class="token number">500</span>

<span class="token punctuation">[</span>corpora<span class="token punctuation">.</span>dev<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@readers</span> <span class="token operator">=</span> <span class="token string">"spacy.Corpus.v1"</span>
path <span class="token operator">=</span> $<span class="token punctuation">&#123;</span>paths<span class="token punctuation">.</span>dev<span class="token punctuation">&#125;</span>
max_length <span class="token operator">=</span> <span class="token number">0</span>

<span class="token punctuation">[</span>training<span class="token punctuation">]</span>
accumulate_gradient <span class="token operator">=</span> <span class="token number">3</span>
dev_corpus <span class="token operator">=</span> <span class="token string">"corpora.dev"</span>
train_corpus <span class="token operator">=</span> <span class="token string">"corpora.train"</span>

<span class="token punctuation">[</span>training<span class="token punctuation">.</span>optimizer<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@optimizers</span> <span class="token operator">=</span> <span class="token string">"Adam.v1"</span>

<span class="token punctuation">[</span>training<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>learn_rate<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@schedules</span> <span class="token operator">=</span> <span class="token string">"warmup_linear.v1"</span>
warmup_steps <span class="token operator">=</span> <span class="token number">250</span>
total_steps <span class="token operator">=</span> <span class="token number">20000</span>
initial_rate <span class="token operator">=</span> <span class="token number">5e</span><span class="token operator">-</span><span class="token number">5</span>

<span class="token punctuation">[</span>training<span class="token punctuation">.</span>batcher<span class="token punctuation">]</span>
<span class="token decorator annotation punctuation">@batchers</span> <span class="token operator">=</span> <span class="token string">"spacy.batch_by_padded.v1"</span>
discard_oversize <span class="token operator">=</span> true
size <span class="token operator">=</span> <span class="token number">2000</span>
<span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token number">256</span>

<span class="token punctuation">[</span>initialize<span class="token punctuation">]</span>
vectors <span class="token operator">=</span> null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
        <tag>自然语言处理</tag>
      </tags>
  </entry>
  <entry>
    <title>字体反爬虫解决方案-自动化通过字体文件生成映射字典</title>
    <url>/font-antispider-cracker/</url>
    <content><![CDATA[<h2 id="字体反爬虫"><a href="#字体反爬虫" class="headerlink" title="字体反爬虫"></a>字体反爬虫</h2><p>初级的字体反爬虫可以参照<a href="https://segmentfault.com/a/1190000021631732">字体反爬的解决方案——突破抖音反爬虫机制</a>这边文章.</p>
<p>类似的文章教程不胜枚举,所以这里对于 <em>字体反爬虫基础</em> 就不做赘述.本篇要讨论的是如何处理在多大数百、数千个自定义字体的复杂情况下完成从字体文件生成映射字典的工作.</p>
<p>上面提到的文章,采用的是人工映射,这在只有 0~10 这样的简单情况下自然是最方便的处理办法,但是对于大量字体的情况,就捉襟见肘了.并且,即使花了半天时间将这些字体一一映射,万一网站的字体库发生变化,或者网站本身就采用动态字体库,就很麻瓜了.</p>
<p>本着”花半天时间做重复性的苦力工作,不如花一天时间做创造性工作”的原则(<del>预估的开发时间比较充裕,才有时间来实践这些突发的灵感</del>),决定搞一些懒人方法.</p>
<a id="more"></a>

<h2 id="映射-xml-文件"><a href="#映射-xml-文件" class="headerlink" title="映射 xml 文件"></a>映射 xml 文件</h2><p>这里给出一个实例情况.</p>
<p>百度云 链接: “<a href="https://pan.baidu.com/s/16rKqDaSdN8sA-5fCAktDVA&quot;">https://pan.baidu.com/s/16rKqDaSdN8sA-5fCAktDVA&quot;</a> 提取码: th84</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fontTools<span class="token punctuation">.</span>ttLib <span class="token keyword">import</span> TTFont

goudi_font <span class="token operator">=</span> TTFont<span class="token punctuation">(</span><span class="token string">'gRYimlGgKp1mW5ldNU5LIoLTJdKXEnKo.ttf'</span><span class="token punctuation">)</span>
goudi_font<span class="token punctuation">.</span>saveXML<span class="token punctuation">(</span><span class="token string">'font_antispider.xml'</span><span class="token punctuation">)</span>
font_map <span class="token operator">=</span> goudi_font<span class="token punctuation">.</span>getBestCmap<span class="token punctuation">(</span><span class="token punctuation">)</span>

newmap<span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span> key <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>font_map<span class="token punctuation">)</span><span class="token punctuation">:</span>
    value <span class="token operator">=</span> font_map<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
    <span class="token comment"># hex() 函数用于将10进制整数转换成16进制,以字符串形式表示</span>
    key <span class="token operator">=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
    newmap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到,这个实例并不像 <em>字体反爬的解决方案</em> 这篇文章中所呈现的,可以直接在 xml 中找到映射关系这么简单.</p>
<p>那么接下来,就是我的工作了.</p>
<h2 id="自动构建映射表"><a href="#自动构建映射表" class="headerlink" title="自动构建映射表"></a>自动构建映射表</h2><h3 id="方案-1"><a href="#方案-1" class="headerlink" title="方案 1"></a>方案 1</h3><p>利用<a href="http://fontstore.baidu.com/static/editor/index.html">百度字体编辑器</a>将字体文件可视化.可视化的结果为规则的方块,所以这里可以考虑使用 opencv 或者 pillow 进行图像切割,将每个字体独立成一个”麻将块”,然后使用百度的 ocr 接口对每个块进行识别.</p>
<h4 id="S1-获取-token"><a href="#S1-获取-token" class="headerlink" title="S1. 获取 token"></a>S1. 获取 token</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re
<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> cv2
<span class="token keyword">import</span> time
<span class="token keyword">import</span> os
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> requests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># client_id 为官网获取的AK, client_secret 为官网获取的SK</span>
host <span class="token operator">=</span> <span class="token string">'https://aip.baidubce.com/oauth/2.0/token?grant_type=client_credentials&amp;client_id=[cid]&amp;client_secret=[csrc]'</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>host<span class="token punctuation">)</span>
<span class="token keyword">if</span> response<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'access_token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="S2-图片切块"><a href="#S2-图片切块" class="headerlink" title="S2. 图片切块"></a>S2. 图片切块</h4><p>将字体编辑器的结果截图,并将其存储为 <strong>p1.PNG</strong> <img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/p1.PNG" alt="p1" loading="lazy"></p>
<p>这里我选择使用 opencv 进行切分,在用 Google 开发者工具丈量之后,使用 (138,100) 作为每个块的大小.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'./raw_font_pic/p1.PNG'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'img_shap:'</span><span class="token punctuation">,</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>
cropped <span class="token operator">=</span> img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">]</span>
plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>cropped<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># output</span>
    img_shap: <span class="token punctuation">(</span><span class="token number">834</span>, <span class="token number">1706</span>, <span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/output_7_1.png" alt="png" loading="lazy"></p>
<h4 id="S3-对单个图片进行尝试"><a href="#S3-对单个图片进行尝试" class="headerlink" title="S3. 对单个图片进行尝试"></a>S3. 对单个图片进行尝试</h4><p>首先,选择的图片是 <img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/uni3075.png" alt="3075" loading="lazy"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">request_url <span class="token operator">=</span> <span class="token string">"https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic"</span>
<span class="token comment"># 二进制方式打开图片文件</span>
f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./font_pic/uni3075.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>
img <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"image"</span><span class="token punctuation">:</span>img<span class="token punctuation">&#125;</span>
access_token <span class="token operator">=</span> <span class="token string">'your_token'</span>
request_url <span class="token operator">=</span> request_url <span class="token operator">+</span> <span class="token string">"?access_token="</span> <span class="token operator">+</span> access_token
headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">&#125;</span>
response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>request_url<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
<span class="token keyword">if</span> response<span class="token punctuation">:</span>
    result <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># output</span>
    <span class="token punctuation">&#123;</span><span class="token string">'words_result'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'words'</span><span class="token builtin class-name">:</span> <span class="token string">'政'</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">'words'</span><span class="token builtin class-name">:</span> <span class="token string">'3075'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>,
     <span class="token string">'log_id'</span><span class="token builtin class-name">:</span> <span class="token number">1333299295083823104</span>,
     <span class="token string">'words_result_num'</span><span class="token builtin class-name">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到,已经有我们需要的结果了,即,这条路是可行的.</p>
<h4 id="S4-构造文字识别函数"><a href="#S4-构造文字识别函数" class="headerlink" title="S4. 构造文字识别函数"></a>S4. 构造文字识别函数</h4><p>OCR 毕竟不比人工,所以对于返回的结果,需要加上一层错误处理.</p>
<p>首先是’error_code’.如果返回结果中出现了错误码,将错误码输出出来.这里的错误一般不是识别文字的错误,所以选择进行人工处理.在开发的过程中,遇到过一次这样的情况,原因是 QPS 太高了,于是加上了 sleep 函数.</p>
<p>其次是对’words_result’进行判断.根据我们切分的麻将块,返回的’words_result’必然是一个长度为 2 的列表.同时,每一张图片下面的编码都是可以确定的,我们可以用如下的代码抽取出 xml 文件中的字体编码.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./font_antispider.xml'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    <span class="token keyword">for</span> foo <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        re_ <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'&lt;GlyphID id="\d+" name="(.*?)"/>'</span><span class="token punctuation">,</span>foo<span class="token punctuation">)</span>
        <span class="token keyword">if</span> re_<span class="token punctuation">:</span>
            name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>re_<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token punctuation">,</span>name_list<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># output</span>
    <span class="token number">395</span> <span class="token punctuation">[</span><span class="token string">'.notdef'</span>, <span class="token string">'uni0000'</span>, <span class="token string">'uni0001'</span>, <span class="token string">'space'</span>, <span class="token string">'uni3075'</span>, <span class="token string">'uni3116'</span>, <span class="token string">'uni4E41'</span>, <span class="token string">'uni4E67'</span>, <span class="token string">'uni4E82'</span>, <span class="token string">'uni4FE5'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>编码的顺序与字体编辑器展示的顺序相同,所以我们在切分图片的同时,可以将图片的文件名命名为对应的字符编码,用来做 OCR 的校验工作.</p>
<p>于是,就有了如下的代码.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">baidu_ocr</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">,</span>verify<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''
    文字识别
    pic_path:图片的地址, 如./font_pic/uni3075.png
    verify:图片对应的校验码,如 uni3075
    '''</span>
    request_url <span class="token operator">=</span> <span class="token string">"https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic"</span>
    <span class="token comment"># 二进制方式打开图片文件</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>
    img <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"image"</span><span class="token punctuation">:</span>img<span class="token punctuation">&#125;</span>
    <span class="token comment"># 隐藏配置</span>
    access_token <span class="token operator">=</span> <span class="token string">'24.56bd39bf2934ed3278812d639068a80e.2592000.1609298605.282335-15745908'</span>
    request_url <span class="token operator">=</span> request_url <span class="token operator">+</span> <span class="token string">"?access_token="</span> <span class="token operator">+</span> access_token
    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">&#125;</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>request_url<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    <span class="token keyword">if</span> response<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'error_code'</span> <span class="token keyword">in</span> result<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span>pic_path<span class="token punctuation">,</span>result<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> result<span class="token punctuation">[</span><span class="token string">'words_result_num'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> result<span class="token punctuation">[</span><span class="token string">'words_result'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'words'</span><span class="token punctuation">]</span> <span class="token operator">==</span> verify<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token string">'uni'</span><span class="token operator">+</span>verify<span class="token punctuation">:</span>result<span class="token punctuation">[</span><span class="token string">'words_result'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'words'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">,</span>result<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>准备工作结束,接下来就是将上述代码碎片进行整合.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 读取截图文件夹 raw_font_pic 下的图片,图片的命名需要按照 p1.PNG,p2.PNG...这样的顺序,防止造成校验码的错位.</span>
png_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'./raw_font_pic/'</span><span class="token operator">+</span>foo <span class="token keyword">for</span> foo <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'./raw_font_pic/'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> foo<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'PNG'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment"># 100 per page</span>
<span class="token keyword">for</span> turn<span class="token punctuation">,</span>png <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>png_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
    img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>png<span class="token punctuation">)</span>
    <span class="token comment"># 第二层和第三层的循环对应 百度字体编辑器 的 6*17 布局</span>
    <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            count <span class="token operator">=</span> turn<span class="token operator">*</span><span class="token number">100</span><span class="token operator">+</span>row<span class="token operator">*</span><span class="token number">17</span><span class="token operator">+</span>col
            <span class="token comment"># count &lt; 100 是因为 字体编辑器 虽然是 6*17=102 的布局,但是实际展示的只有100个字符.</span>
<span class="token comment">#             if count &lt; 8 and count > 5 and count &lt; len(name_list): 测试用例</span>
            <span class="token keyword">if</span> count <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token keyword">and</span> count <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
                file_name <span class="token operator">=</span> name_list<span class="token punctuation">[</span>count<span class="token punctuation">]</span>
                cropped <span class="token operator">=</span> img<span class="token punctuation">[</span>row<span class="token operator">*</span><span class="token number">138</span><span class="token punctuation">:</span><span class="token punctuation">(</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">138</span><span class="token punctuation">,</span> col<span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">:</span><span class="token punctuation">(</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">]</span>
                plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>cropped<span class="token punctuation">)</span>
                plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
                file_path <span class="token operator">=</span> <span class="token string">'./font_pic/'</span><span class="token operator">+</span>file_name<span class="token operator">+</span><span class="token string">'.png'</span>
                cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>cropped<span class="token punctuation">)</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>baidu_ocr<span class="token punctuation">(</span>file_path<span class="token punctuation">,</span>file_name<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment"># 睡眠以避开百度的QPS限制,这个时间可以更短</span>
                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/output_16_0.png" alt="png" loading="lazy"></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># output</span>
    <span class="token punctuation">&#123;</span><span class="token string">'words_result'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'words'</span><span class="token builtin class-name">:</span> <span class="token string">'络'</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">'words'</span><span class="token builtin class-name">:</span> <span class="token string">'4E41'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>, <span class="token string">'log_id'</span><span class="token builtin class-name">:</span> <span class="token number">1333310904309121024</span>, <span class="token string">'words_result_num'</span><span class="token builtin class-name">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/output_16_2.png" alt="png" loading="lazy"></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># output</span>
    <span class="token punctuation">&#123;</span><span class="token string">'words_result'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'words'</span><span class="token builtin class-name">:</span> <span class="token string">'届'</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">'words'</span><span class="token builtin class-name">:</span> <span class="token string">'4E67'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>, <span class="token string">'log_id'</span><span class="token builtin class-name">:</span> <span class="token number">1333310908155297792</span>, <span class="token string">'words_result_num'</span><span class="token builtin class-name">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/output_16_4.png" alt="png" loading="lazy"></p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># output</span>
    <span class="token punctuation">&#123;</span><span class="token string">'words_result'</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'words'</span><span class="token builtin class-name">:</span> <span class="token string">'文'</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">'words'</span><span class="token builtin class-name">:</span> <span class="token string">'4E82'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span>, <span class="token string">'log_id'</span><span class="token builtin class-name">:</span> <span class="token number">1333310911858868224</span>, <span class="token string">'words_result_num'</span><span class="token builtin class-name">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token string">'uni4E41'</span><span class="token builtin class-name">:</span> <span class="token string">'络'</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">'uni4E67'</span><span class="token builtin class-name">:</span> <span class="token string">'届'</span><span class="token punctuation">&#125;</span>, <span class="token punctuation">&#123;</span><span class="token string">'uni4E82'</span><span class="token builtin class-name">:</span> <span class="token string">'文'</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以看到输出的最后一行.至此,映射表完成.</p>
<h3 id="方案-2"><a href="#方案-2" class="headerlink" title="方案 2"></a>方案 2</h3><p>方案 1 是一通乱拳的尝试,本质上,这是一个半自动化的结果,其中人工截图、命名文件、修改调用等操作都是需要手动进行的,虽然人工截图可以使用 selenium 代替,其它的也有对应的代码解决方案,但是如果想要做成一个通用式的服务,开发和维护代价实在是太高了.</p>
<p>有没有办法跳过这些人工操作?或者使其更加简化?既然字体编辑器是通过 xml 中的坐标描述来完成字体绘制,那 Python 中自然就应该有对应的方法完成这个工作.</p>
<p>基于这些问题,我查阅了很多的资料,于是就有了这个对 linux 更加友好的、更加符合自动化 <del>偷懒</del> 初衷方案 2.</p>
<p>方案 2 的前期处理–对应于方案一的截图、命名等操作–依托于<a href="https://fontforge.org/en-US/">fontforge</a>,我们可以通过这个将 ttf 直接转变成 png.</p>
<h4 id="S1-ttf2png"><a href="#S1-ttf2png" class="headerlink" title="S1. ttf2png"></a>S1. ttf2png</h4><p>Linux 可以,依照<a href="https://github.com/fontforge/fontforge/blob/master/INSTALL.md">INSTALL.md</a>进行安装.</p>
<p>Windows 可以直接去<a href="https://fontforge.org/en-US/">官方网站</a>下载使用.</p>
<p>首先,需要写一个 python 脚本,暂且命名为 script.py.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> fontforge
F <span class="token operator">=</span> fontforge<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"gRYimlGgKp1mW5ldNU5LIoLTJdKXEnKo.ttf"</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> name <span class="token keyword">in</span> F<span class="token punctuation">:</span>
    filename <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">".png"</span>
    F<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>export<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后通过</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">fontforge -script script.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>即可完成 ttf -&gt; png 的工作.结果如下.</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/fontforceres.PNG" alt="fontres" loading="lazy"></p>
<p>真正意义上的一步到位~</p>
<h4 id="S2-OCR"><a href="#S2-OCR" class="headerlink" title="S2. OCR"></a>S2. OCR</h4><p>这里我们将校验的部分去掉,而编码的对应工作则通过文件名来实现.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">baidu_ocr</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''
    文字识别(百度)
    pic_path:图片的地址, 如./font_pic/uni3075.png
    '''</span>
    request_url <span class="token operator">=</span> <span class="token string">"https://aip.baidubce.com/rest/2.0/ocr/v1/general_basic"</span>
<span class="token comment">#     request_url = "https://aip.baidubce.com/rest/2.0/ocr/v1/webimage"</span>
    f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>
    img <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"image"</span><span class="token punctuation">:</span>img<span class="token punctuation">&#125;</span>
    <span class="token comment"># 将accessToken替换为自己的</span>
    access_token <span class="token operator">=</span> <span class="token string">'AT'</span>
    request_url <span class="token operator">=</span> request_url <span class="token operator">+</span> <span class="token string">"?access_token="</span> <span class="token operator">+</span> access_token
    headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'content-type'</span><span class="token punctuation">:</span> <span class="token string">'application/x-www-form-urlencoded'</span><span class="token punctuation">&#125;</span>
    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>request_url<span class="token punctuation">,</span> data<span class="token operator">=</span>params<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    <span class="token keyword">if</span> response<span class="token punctuation">:</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">,</span>response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        result <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'error_code'</span> <span class="token keyword">in</span> result<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span>pic_path<span class="token punctuation">,</span>result<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> result<span class="token punctuation">[</span><span class="token string">'words_result_num'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> result<span class="token punctuation">[</span><span class="token string">'words_result'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'words'</span><span class="token punctuation">]</span>
        <span class="token keyword">elif</span> result<span class="token punctuation">[</span><span class="token string">'words_result_num'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">''</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">,</span>result<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
    <span class="token keyword">return</span> <span class="token boolean">None</span>

<span class="token keyword">def</span> <span class="token function">tencent_ocr</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    文字识别(腾讯)
    """</span>
    <span class="token keyword">import</span> json
    <span class="token keyword">from</span> tencentcloud<span class="token punctuation">.</span>common <span class="token keyword">import</span> credential
    <span class="token keyword">from</span> tencentcloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>client_profile <span class="token keyword">import</span> ClientProfile
    <span class="token keyword">from</span> tencentcloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>http_profile <span class="token keyword">import</span> HttpProfile
    <span class="token keyword">from</span> tencentcloud<span class="token punctuation">.</span>common<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>tencent_cloud_sdk_exception <span class="token keyword">import</span> TencentCloudSDKException
    <span class="token keyword">from</span> tencentcloud<span class="token punctuation">.</span>ocr<span class="token punctuation">.</span>v20181119 <span class="token keyword">import</span> ocr_client<span class="token punctuation">,</span> models
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment"># 将SecretId和SecretKey替换为自己的</span>
        cred <span class="token operator">=</span> credential<span class="token punctuation">.</span>Credential<span class="token punctuation">(</span><span class="token string">"SecretId"</span><span class="token punctuation">,</span> <span class="token string">"SecretKey"</span><span class="token punctuation">)</span>
        httpProfile <span class="token operator">=</span> HttpProfile<span class="token punctuation">(</span><span class="token punctuation">)</span>
        httpProfile<span class="token punctuation">.</span>endpoint <span class="token operator">=</span> <span class="token string">"ocr.tencentcloudapi.com"</span>

        clientProfile <span class="token operator">=</span> ClientProfile<span class="token punctuation">(</span><span class="token punctuation">)</span>
        clientProfile<span class="token punctuation">.</span>httpProfile <span class="token operator">=</span> httpProfile
        client <span class="token operator">=</span> ocr_client<span class="token punctuation">.</span>OcrClient<span class="token punctuation">(</span>cred<span class="token punctuation">,</span> <span class="token string">"ap-shanghai"</span><span class="token punctuation">,</span> clientProfile<span class="token punctuation">)</span>

<span class="token comment">#         req = models.GeneralAccurateOCRRequest()</span>
        req <span class="token operator">=</span> models<span class="token punctuation">.</span>GeneralBasicOCRRequest<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            img <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">"ImageBase64"</span><span class="token punctuation">:</span>img<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token string">"LanguageType"</span><span class="token punctuation">:</span> <span class="token string">"zh"</span>
        <span class="token punctuation">&#125;</span>
        req<span class="token punctuation">.</span>from_json_string<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">#         resp = client.GeneralAccurateOCR(req)</span>
        resp <span class="token operator">=</span> client<span class="token punctuation">.</span>GeneralBasicOCR<span class="token punctuation">(</span>req<span class="token punctuation">)</span>
        resp_json <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>resp<span class="token punctuation">.</span>to_json_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> resp_json<span class="token punctuation">[</span><span class="token string">'TextDetections'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'DetectedText'</span><span class="token punctuation">]</span>

    <span class="token keyword">except</span> TencentCloudSDKException <span class="token keyword">as</span> err<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>

png_list <span class="token operator">=</span> <span class="token punctuation">[</span>foo <span class="token keyword">for</span> foo <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">'./fontforge_output_str/'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> foo<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">'png'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>

res_str_basic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>png<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>tencent_ocr<span class="token punctuation">(</span><span class="token string">'./fontforge_output/'</span><span class="token operator">+</span>png<span class="token punctuation">)</span> <span class="token keyword">for</span> png <span class="token keyword">in</span> png_list<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="图片强化"><a href="#图片强化" class="headerlink" title="图片强化"></a>图片强化</h4><p>从结果上看,识别的效果并不理想,仍然又差不多 5%没有识别出来,所以接下来就要对图片进行强化处理.</p>
<p>这里摘出一个很典型的无法识别\识别错误的图片</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/uni5078.png" alt="ying" loading="lazy"></p>
<p>对于这种问题的成因,我个人的猜想是,在进行卷积处理的时候,选择的算子在边界处理上更倾向于重新计算,而实际上我们的边界是不需要计算的,所以这里手动将边界扩张.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">strength_pic</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image

    old_im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>pic_path<span class="token punctuation">)</span>
    old_size <span class="token operator">=</span> old_im<span class="token punctuation">.</span>size

    new_size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>
    new_im <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span> new_size<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'white'</span><span class="token punctuation">)</span>   <span class="token comment">## luckily, this is already black!</span>
    new_im<span class="token punctuation">.</span>paste<span class="token punctuation">(</span>old_im<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>new_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>old_size<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                          <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>new_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>old_size<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    new_im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>pic_path<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'output'</span><span class="token punctuation">,</span><span class="token string">'output_str'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> png <span class="token keyword">in</span> png_list<span class="token punctuation">:</span>
    strength_pic<span class="token punctuation">(</span><span class="token string">'./fontforge_output/'</span><span class="token operator">+</span>png<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>结果如下:</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/goudi-font-str.PNG" alt="res_str" loading="lazy"></p>
<p>扩张之后,百度的识别结果准确率在 80%<del>87%,腾讯的识别准确率在 90%</del>95%,这种程度的准确率暂时是够用了.</p>
<h4 id="进一步提升准确率"><a href="#进一步提升准确率" class="headerlink" title="进一步提升准确率"></a>进一步提升准确率</h4><p>为什么准确率无法更进一步?也许问题就出在我们的样本太过于简单了,纯白色边缘的清晰的单个汉字,正是由于这个场景太过于理想化了,使得商用 OCR 发生了过拟合的情况,最终导致了识别率低的结果.</p>
<p>TODO: 特化 OCR 模型,提高识别的准确率.</p>
<p>这个估计得等到目前阶段的任务结束才能开始做了.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>曾在网上看到一个鼓吹字体反爬,称之为”终极方案”的文章.我个人是不敢苟同的,信息的世界没有所谓的绝对防御,道高一尺魔高一丈而已.</p>
<p>通过这篇文章所阐述的思路,可以完成绝大多数情境下的字体反爬虫,毕竟字体再怎么变形,终究是给人看的.最后提到的特化 OCR 模型,在实际的大规模业务中非常必要,因为这不仅能提高字体识别的正确率,更加能将破解的成本(无论时间还是资金)降到最低.</p>
<p>以上.</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>spider</tag>
        <tag>antispider crack</tag>
      </tags>
  </entry>
  <entry>
    <title>Frankenstein开发记录(1)</title>
    <url>/frankenstein-develop-1/</url>
    <content><![CDATA[<p><code>Frankenstein</code> 是用来搜索可用数据源的一个小工具,它包含两个主要功能</p>
<ol>
<li>友链扫描</li>
<li>关键字扫描</li>
</ol>
<p>这两个部分本质上都是对现存的数据源进行遍历搜索,区别在于二者的扫描侧重点不同.</p>
<p>本篇主要是 <strong>友链扫描</strong> 的开发记录.</p>
<a id="more"></a>

<p>友链扫描的基础网站选择的是 <a href="http://www.mee.gov.cn/">生态环境部</a> 的网站,基础目标是找到所有省、地级市的生态环境数据源,最终目标是开发出具有泛化能力的友链扫描工具.</p>
<p>整个脚本的开发主要划分为 3 个阶段.</p>
<ol>
<li>分析</li>
<li>开发(设计)</li>
<li>归总</li>
</ol>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>分析的第一步是需求分析.本篇的需求在开头就已经有所描述.</p>
<p>在明确了需求之后,开始分析项目的可行性,即,如何达成这个需求；需要怎样的技术框架、时间成本等</p>
<p>最后,确认项目主体流程能够走通,就开始进行一些技术细节的分析.</p>
<h3 id="技术分析"><a href="#技术分析" class="headerlink" title="技术分析"></a>技术分析</h3><p>网站群存在一些特性,比如网站的友链分布特征,链接的命名特征等.</p>
<p>具体来讲,就是我所需要的 <em>环境保护</em> 数据源友链都在某一个<code>a|li|option</code>标签群组中,并且名字中都会带有<em>环保</em>等标识字段.其中,前者是大部分友链的共性特征(可泛化),后者是该任务的独有特征(不可泛化).</p>
<p>除此之外,友链还有其他的特征,比如 <strong>域名不同</strong> 等.</p>
<p>根据这些特性,我们可以制作出一系列的 <code>过滤器</code> . 过滤器的价值在于能够使用更少的请求次数获得同等价值的数据,简言之,提高爬虫的命中率.在这次的项目中,如果不使用这些过滤器,总共需要大约 3 万次的请求,得到的有效结果是 447 条,而使用这些过滤器之后总共的请求次数只需要 4000+而已.</p>
<p>在完成了这些分析之后,就可以开始下一步的开发设计了.</p>
<h2 id="开发-设计"><a href="#开发-设计" class="headerlink" title="开发(设计)"></a>开发(设计)</h2><p>开发阶段又可以细分为几个步骤.</p>
<ol>
<li>整体设计,特征抽取</li>
<li>对分析阶段得到的各种特性进行代码层面的抽象</li>
<li>遍历算法</li>
<li>深度过滤</li>
</ol>
<h3 id="整体设计"><a href="#整体设计" class="headerlink" title="整体设计"></a>整体设计</h3><p>这个项目可以划分为一下几个模块.</p>
<h4 id="动态页面请求模块"><a href="#动态页面请求模块" class="headerlink" title="动态页面请求模块"></a>动态页面请求模块</h4><p>页面请求模块所负责的内容是 <strong>获取整个页面的内容</strong> ,这里之所以强调 <em>整个页面</em> ,是因为有些网站存在 动态加载 ,简单的 url 请求是无法获取到页面的全部数据的.</p>
<p>这一类的典型是 <a href="http://hbt.jiangsu.gov.cn/">江苏生态环境厅</a>, 抓包后可以发现,它的友链是从 “<a href="http://hbt.jiangsu.gov.cn/col/col3603/index.html&quot;">http://hbt.jiangsu.gov.cn/col/col3603/index.html&quot;</a> 这个链接动态加载的.如果只进行简单请求,那么很容易就得出 <em>这个网站没有友链</em> 这样错误的结论.</p>
<p>爬虫方面,解决动态加载的方法有很多,我所选择的是 <code>Selenium</code>. 在等待页面完全加载之后,进行页面内容的解析.</p>
<h4 id="简单页面请求模块"><a href="#简单页面请求模块" class="headerlink" title="简单页面请求模块"></a>简单页面请求模块</h4><p>区别于<a href="#%E5%8A%A8%E6%80%81%E9%A1%B5%E9%9D%A2%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97">前者</a>,这个模块就是简单的 url 请求(requests),但是封装了代理等请求机制.考虑到可以在之后的并行工具 – <strong>站点扫描工具</strong> 中复用,将其独立为一个模块.</p>
<h4 id="过滤器组"><a href="#过滤器组" class="headerlink" title="过滤器组"></a>过滤器组</h4><p>过滤器组在扫描的同时对获取到的 url 进行过滤,留下符合条件的 url 进行下一轮的爬取.</p>
<p>同时,过滤器组的设计需要考虑如下问题.</p>
<ol>
<li>过滤器是否存在顺序关系？什么样的顺序性能最优？</li>
<li>过滤器是否存在泛用性？</li>
</ol>
<p>强调顺序,是因为不同的过滤器有不同的时间复杂度,按照复杂度由低到高的顺序排列,将会得到理论上的性能最优解.</p>
<p>而泛用性上,我们可以将具有泛用性的过滤器保存下来,并封装到对象中；而不具备泛用性的,可以直接扔到一个外部的 <code>utils.py</code> 这样的工具文件中,或者不做保留.</p>
<h4 id="遍历模块"><a href="#遍历模块" class="headerlink" title="遍历模块"></a>遍历模块</h4><p>遍历模块对基础 url 进行 DFS,同时,它还有调度两个请求模块和过滤器模块的职责.</p>
<h4 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h4><p>子模块按需构建,这里我构建了一个模块用来根据行政区划来将扫描的结果归档为 excel,不过子模块中的模块组显然不具备 <em>泛用性</em>,所以这里不做讨论 .</p>
<h3 id="代码抽象"><a href="#代码抽象" class="headerlink" title="代码抽象"></a>代码抽象</h3><p>分析阶段我们抽取出一系列的网站特性,并初步设计了过滤器组.这里通过代码实现过滤器组.</p>
<h4 id="节点过滤器"><a href="#节点过滤器" class="headerlink" title="节点过滤器"></a>节点过滤器</h4><p>节点过滤器用来筛选出所有的外链.</p>
<p>外链的特征:</p>
<ul>
<li>必然是 <code>a</code> or <code>option</code> 标签</li>
<li>必然 <strong>跨域</strong></li>
<li>URI 长度限定</li>
</ul>
<p>节点过滤器可以嵌入到 <code>BeautifulSoup</code> 的 <code>find()</code> 函数中.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__fixed_filter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">a_tag_checker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        href <span class="token operator">=</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> href<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> get_domain<span class="token punctuation">(</span>href<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>exist_domain_groups<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> href<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>
            <span class="token string">'http'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>domain <span class="token keyword">not</span> <span class="token keyword">in</span> href <span class="token keyword">and</span> <span class="token string">'?'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> href <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>
            re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> href<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> MAX_URI

    <span class="token keyword">def</span> <span class="token function">option_tag_checker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        href <span class="token operator">=</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'value'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> href<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">if</span> get_domain<span class="token punctuation">(</span>href<span class="token punctuation">)</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>exist_domain_groups<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> href <span class="token keyword">and</span> href<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span> \
            domain <span class="token keyword">not</span> <span class="token keyword">in</span> href <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> href<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> MAX_URI \
               <span class="token keyword">and</span> <span class="token string">'?'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> href

    tag_check_res <span class="token operator">=</span> a_tag_checker<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> tag<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'a'</span> \
        <span class="token keyword">else</span> option_tag_checker<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> tag_check_res <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tag<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="群组过滤器"><a href="#群组过滤器" class="headerlink" title="群组过滤器"></a>群组过滤器</h4><p>群组过滤器用来过滤孤立的节点.友链一般是一群具有相同父节点的节点集群.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__float_filter_parents_tag</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    parent_tag_dict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    tmp_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> tag <span class="token keyword">in</span> self<span class="token punctuation">.</span>tag_list<span class="token punctuation">:</span>
        <span class="token keyword">if</span> tag<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">'li'</span><span class="token punctuation">:</span>
            hash_ <span class="token operator">=</span> tag<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>text<span class="token punctuation">.</span>__hash__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            hash_ <span class="token operator">=</span> tag<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>text<span class="token punctuation">.</span>__hash__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> hash_ <span class="token keyword">in</span> parent_tag_dict<span class="token punctuation">:</span>
            parent_tag_dict<span class="token punctuation">[</span>hash_<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            parent_tag_dict<span class="token punctuation">[</span>hash_<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> parent_tag_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">>=</span> MIN_PER_TAG_GROUP<span class="token punctuation">:</span>
            tmp_list <span class="token operator">+=</span> v
    self<span class="token punctuation">.</span>tag_list <span class="token operator">=</span> tmp_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="黑名单过滤"><a href="#黑名单过滤" class="headerlink" title="黑名单过滤"></a>黑名单过滤</h4><p>白名单过滤会将 <strong>在顶级域名黑名单内的域名</strong> 滤出. 这个白名单是由开发者自己指定,一般是用在第一次过滤结束之后,一些难以根据代码规则滤出的 url,我们可以手动添加进黑名单中,这样以后跑的时候就不用再受这些坏链接的困扰了.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__float_filter_domain_suffix</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>domain_suffix<span class="token punctuation">:</span>
        <span class="token keyword">return</span>

    result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> tag <span class="token keyword">in</span> self<span class="token punctuation">.</span>tag_list<span class="token punctuation">:</span>
        url <span class="token operator">=</span> self<span class="token punctuation">.</span>__get_url_from_tag<span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
        <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'(\d+\.\d+\.\d+\.\d+)'</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>
            result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tag<span class="token punctuation">)</span>
        domain_re <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'https?://.*?\.(\w+)/.*'</span><span class="token punctuation">,</span> url <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> domain_re<span class="token punctuation">:</span>
            domain_suffix <span class="token operator">=</span> domain_re<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> domain_suffix <span class="token keyword">in</span> self<span class="token punctuation">.</span>domain_suffix<span class="token punctuation">:</span>
                result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tag<span class="token punctuation">)</span>

    self<span class="token punctuation">.</span>tag_list <span class="token operator">=</span> result_list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="后缀过滤器"><a href="#后缀过滤器" class="headerlink" title="后缀过滤器"></a>后缀过滤器</h4><p>我们需要的只是 <strong>网页</strong> , 而 <em>图片、css、js 甚至是 exe</em> , 这些都没有实际价值, 反而会严重拖慢我们的扫描速度.</p>
<p>这里我根据爬取的记录加入了一些后缀, <strong>并不全面哦</strong> .</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__core_filter</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>

    normal_suffix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.html'</span><span class="token punctuation">,</span> <span class="token string">'.asp'</span><span class="token punctuation">,</span> <span class="token string">'.php'</span><span class="token punctuation">,</span> <span class="token string">'.cgi'</span><span class="token punctuation">,</span> <span class="token string">'.jsp'</span><span class="token punctuation">]</span>
    invalid_suffix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'.exe'</span><span class="token punctuation">,</span> <span class="token string">'.pdf'</span><span class="token punctuation">,</span> <span class="token string">'.xls'</span><span class="token punctuation">,</span> <span class="token string">'.xlsx'</span><span class="token punctuation">,</span> <span class="token string">'.doc'</span><span class="token punctuation">,</span>
                      <span class="token string">'.docx'</span><span class="token punctuation">,</span> <span class="token string">'.txt'</span><span class="token punctuation">,</span> <span class="token string">'.png'</span><span class="token punctuation">,</span> <span class="token string">'.jpg'</span><span class="token punctuation">,</span> <span class="token string">'.jpeg'</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">tag_suffix_checker</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> foo <span class="token keyword">in</span> invalid_suffix<span class="token punctuation">:</span>
            <span class="token keyword">if</span> tag<span class="token punctuation">.</span>attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'href'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

    <span class="token keyword">return</span> <span class="token punctuation">[</span>foo <span class="token keyword">for</span> foo <span class="token keyword">in</span> self<span class="token punctuation">.</span>tag_list <span class="token keyword">if</span> tag_suffix_checker<span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="etc"><a href="#etc" class="headerlink" title="etc"></a>etc</h4><p>以上列出一部分的过滤器,更多的过滤器可以根据实际情况进行开发、添加.</p>
<h3 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h3><p>常见的遍历算法,<strong>DFS</strong> 和 <strong>BFS</strong> .遍历算法需要根据实际的链路来考虑.如,是否是有限深度？链路的重复率如何？等等.</p>
<h3 id="深度过滤"><a href="#深度过滤" class="headerlink" title="深度过滤"></a>深度过滤</h3><p>与过滤器组不同,深度过滤是对遍历结束之后的结果进行再过滤.与其说是 <strong>过滤</strong>,或许称之为 <strong>数据清洗</strong> 更好一点.</p>
<p>我们无法保证扫描到的结果 100% 满足我们的需求,这时候就根据得到的数据集再写一套清洗规则.这套规则不会用在遍历的过程中,因为很可能会导致爬取规则出现 <strong>过拟合</strong> 的情况,将符合条件的链接也过滤掉了.</p>
<p>深度过滤是人工干预因素最为浓重的一个环节,甚至为了追求最高的准确率,我们会抛弃代码,以人工的方式逐条对数据进行审核.这一点就见仁见智了.</p>
<h2 id="归总"><a href="#归总" class="headerlink" title="归总"></a>归总</h2><p>至此,我们得到了一个友链的列表.归总的环节主要做的就是让这个列表更好看一点,让数据更加符合我们的使用习惯,所以这并不是一个 <em>必须</em> 的环节.</p>
<p>比如本章所针对的 <em>生态环保网站</em>, 我选择将其按照行政区划进行归总.</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>dailyTools</tag>
      </tags>
  </entry>
  <entry>
    <title>极客大赛与赛后反思</title>
    <url>/geek-contest/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>极客大赛是我司举办的一个内部的挑战比赛，大致的内容就是拟定一道比赛题目，然后根据最后的完成度进行得分排名。比赛的时间为一天，大抵就是上班到下班这么长的时间。</p>
<p>今年的题目是完成一个票据识别的 app。核心的模块是票据的扫描、识别和后端的存储、统计功能。衍生的加分项就很多了，测试覆盖率、界面设计等等，差不多就是软件的综合完成度、用户体验这些。</p>
<a id="more"></a>

<ol>
<li><p>时间的利用</p>
<p>比赛只有 12 个小时，但是在一些无所谓的事情上面浪费了很多的时间。</p>
<p>首先就是 leader 的推选。从传统的角度来看，不礼让一下确实会显得太傲慢，进而给别人以不好的印象，但是在有限时间的比赛中这是相当不智的，这直接导致了团队在接近 1/6 的时间里处于无领导无组织的状态，大家各干各的，效率很低。</p>
</li>
<li><p>任务安排</p>
<p>最终后端以双核驱动，我负责后端的整体规划设计以及任务安排。</p>
<p>首先，在选人上就出现了问题。开发伊始，让一人负责 api 设计。当时选人的角度是谁还闲着就让谁干，而不是谁更专业就让谁干。这导致的后果就是，api 文档不够全面、小漏洞频出。同时，在最后做演示的时候，无法根据那种一拍脑门想出来的 error_code 来判断具体是哪一块除了问题。（这里最后使用了经验判断，然后错了）</p>
<p>其次是项目进度的管理上。在 api 文档开发完成之后，后端、前端就可以开始开发了，但是这里忽视了重要的一点，就是测试。文档成形之后，理论上已经可以让测试来准备边界样例了，但是思维定势，认为在软件工程进程中， 测试必须等到全端开发结束才能进行。很要命。这直接导致了负责测试的人员一直闲置到比赛结束。</p>
<p>最后是任务分派。在不熟悉每个人具体的擅长的情况下（仅仅是问过了前后端这些浅层的东西），就直接进行任务的分派，现在想来过于冒失了。</p>
</li>
<li><p>异常处理</p>
<ol>
<li><p>登录异常</p>
<p>这次是使用的公司的登录接口，但是出现了一个很要命的问题，token 的预期生命周期与实际严重不符。比如设置生命周期为一天，而实际使用时可能一分钟就失效了。这个时候我们的解决方案是，使用公司内部的账号来实现永久性 token。</p>
<p>这里忽略了很重要的一点，这是一个面向大众的 app，并不是每一个测试样例（实际可能是极少、甚至是没有）都是有永久性 token 的，这种解决方案无疑是饮鸩止渴。这在最后的测试时，大家意识到这个问题的时候，已经病入膏肓、为时晚矣。</p>
<p>在面临这种问题，首先要做的应该是查阅接口文档，找出出现这种异常的原因，以及对应的解决方案。如果自己找不到，应该及时询问接口的提供方，不要浪费太多的时间。</p>
</li>
<li><p>部署异常</p>
<p>这与时间分配也有一定的联系。项目最后，我需要将后端部署到服务器上。由于时间紧迫，以开发环境部署到服务器上之后就直接开始对接测试了，后来也是直接以开发环境部署到服务器上的。</p>
<p>这是非常致命的，因为在面临高并发的请求时，很容易造成服务崩溃，并且无法再起。之所以这么草率地以开发环境部署，是因为前端一直在调用接口测试，事态不容许停下服务进行生产环境的调整。</p>
<p>但是这并非没有解决方案，我有不止一台的服务器，完全可以在另外一台上做好对应的调整，然后直接应用到比赛服务器上。</p>
<p>这算是一个教训吧。</p>
</li>
</ol>
</li>
<li><p>技术层面</p>
<p>这次主要使用的技术是 flask，主要的问题有两个。</p>
<ol>
<li><p>性能优化/代码质量</p>
<p>这两者本来关系不大，但是在本次的开发中耦合度很高。</p>
<p>处于时间的考虑，所有的交互都是使用 POST，所有的存在复用的代码都是直接复制粘贴，没有使用蓝图来做规划，简化了框架的结构(这可能不算是缺点，但是这种尝试太冒险了)。</p>
<p>总的来说，写了一个仅仅是能够跑起来的，自己都看不下去的代码。</p>
</li>
<li><p>单元测试</p>
<p>“程序员写代码不需要测试，只要能运行就行了。”这本是一句调侃的话，但是我却下意识地忽视了测试的重要性。这次的单元测试没能跑通，很大原因可以归咎于平时的疏懒。</p>
</li>
</ol>
</li>
</ol>
<p>这次比赛给我的启发同样巨大。这算是第一次，与一群各有一技之长的伙伴们开发(以往是 python*n，这次的队伍中，实到 8 个人，有 JavaScript、python、node、C++、运维、nginx 等各方面的开发者)一个独立完整的项目。前后端分离、多语言服务中请求的流转、运维要点等等这些以往一知半解的东西，在这次的比赛中都有了实际的应用案例。这也与就是进入企业进行开发的魅力所在吧。仅仅 12 个小时，虽然不足以实现技术上的突飞猛进，但是让我发现了职业生涯中更多的前进的方向，也不失为一笔宝贵的财富。</p>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
      <tags>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>kex_exchange_identification问题及解决</title>
    <url>/github-kex-exchange-identification-solution/</url>
    <content><![CDATA[<p>简单地记述了一下在使用 <em>github</em> 时遇到的 <strong>kex_exchange_identification</strong> 错误.</p>
<a id="more"></a>

<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>毕业旅行的博客摸了很久, GitHub 也很有没有用过了, 然后在 <em>push</em> 的时候遇到了这个问题.</p>
<p>系统环境如下:</p>
<blockquote>
<p>OS: MacOS<br>shell: zsh</p>
</blockquote>
<p>具体报错:</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">git</span> push

<span class="token comment"># output:</span>
<span class="token comment"># kex_exchange_identification: Connection closed by remote host</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol>
<li><p>确认 <em>github</em> 的 <strong>ssh</strong> 配置没有问题.</p>
</li>
<li><p>使用 <code>vim ~/.ssh/config</code> 命令, 打开 ssh 的配置文件.</p>
</li>
<li><p>添加 <code>IdentityFile ~/.ssh/id_ed25519</code> 至配置中, 而后配置变更为如下所示.</p>
</li>
</ol>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Host github.com
   HostName github.com
   User <span class="token function">git</span>
   ProxyCommand <span class="token function">nc</span> -v -x <span class="token number">127.0</span>.0.1:7890 %h %p
   IdentityFile ~/.ssh/id_ed25519<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>其中, <code>ProxyCommand</code> 是指定的 github 代理, 有没有这个字段无所谓, 根据自己的配置即可. 而 <code>id_ed25519</code> 为与 github 的 ssh 配置相关联的文件, 这里笔者配置 ssh 时是按照 github 的教程走的, 所以文件就是 <code>id_ed25519</code>.</p>
<p>最后, 可以使用 <code>ssh -T git@github.com</code> 测试一下, 效果拔群~</p>
<h2 id="补充解决方案"><a href="#补充解决方案" class="headerlink" title="补充解决方案"></a>补充解决方案</h2><p>当然， 这也有可能是代理失效的原因， 这就要把 <code>ProxyCommand</code> 这一行注释掉试试.</p>
<p>总之还是先使用 <code>ssh -v git@github.com</code> 调试一下, 根据具体的输出具体分析吧.</p>
<h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><p>还是搞不太清楚为啥会突然遇到这个问题, 大概是这段时间往 ssh 配置文件里面添加太多的 key 导致匹配规则混乱吧. 之后如果找到了更详细的问题原因再来更新咯.</p>
]]></content>
  </entry>
  <entry>
    <title>毕业设计过程中的一些有趣/有用的网站</title>
    <url>/interesting-website-in-graduation-design/</url>
    <content><![CDATA[<p>本篇将会介绍一些笔者在完成毕设的过程中所发现的一些有趣的网站或者工具.包括:</p>
<ul>
<li>代码着色网站</li>
<li>流程图\架构图等工程图片的绘图网站</li>
<li>公式识别工具</li>
<li>数据库文档</li>
<li>翻译工具</li>
<li>免费的论文查重</li>
</ul>
<a id="more"></a>

<h2 id="代码着色"><a href="#代码着色" class="headerlink" title="代码着色"></a>代码着色</h2><p><a href="https://highlightcode.com/">代码着色网站</a>能够将代码直接转变为包含行号的高亮代码.</p>
<p>其最终的结果如下图所示.</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/code-highlight-website.png" alt="code-highlist" loading="lazy"></p>
<h2 id="图片绘制"><a href="#图片绘制" class="headerlink" title="图片绘制"></a>图片绘制</h2><p>图片绘制网站主要有两个, 一个是国内的 <a href="https://www.processon.com/">process on</a>, 另外一个是国外的<a href="https://app.diagrams.net/">diagrams.net</a>,也就是大家所熟悉的 <em>draw.io</em> .</p>
<p><strong>process on</strong> 拥有中文界面, 并且国内网络环境能够直接访问, 它所提供的大部分功能足够毕设绘图所需, 它的缺点在于, 非会员只能画 9 张图, 这在图片很多时就很难受了. 某个<a href="https://space.bilibili.com/167679424/">憨憨</a>的解决方案是利用 <strong>画布不限制大小</strong> 的特性去按需截取.</p>
<p>于是这次毕设我又找了一个替代方案,就是 <strong>draw.io</strong>, 它的唯一缺点也许就是需要科学上网方案了. 这里来说一下它的优点吧.</p>
<ul>
<li>文件可以存放于 <em>OneDriver</em> \ <em>Google Driver</em> 等网盘中, 还可以存放于 <em>GitHub</em> \ <em>GitLab</em> 这样的平台上.</li>
<li>存放于 GitHub 上面时通过版本控制方法来管理.</li>
<li>不限制画布的数量</li>
<li>多元化的绘图组件(甚至能使用 <strong>LaTeX</strong>)</li>
</ul>
<h2 id="公式识别"><a href="#公式识别" class="headerlink" title="公式识别"></a>公式识别</h2><p>公式识别强推<a href="https://mathpix.com/ocr/">mathpix</a>, 它每个月有 50 次的免费使用次数, 对于毕业论文这种体量的文章还是够用了的.</p>
<p>对于识别的结果, 它支持 <em>MathML</em>/<em>AsciiMath</em>/<em>SVG</em> 等多种的导出形式, 并且针对 word 文档还有 (MS Word) 专门的配置.</p>
<p>对于原始的图片, 它会将其上传到 cdn 上, 用户可以直接使用 cdn 连接进行图片的访问, 这一点在写算法性质的技术博客时也十分有用.</p>
<p>同时, 软件可以把识别的结果放到网上进行针对性搜索, 找到同样适用这个公式的网页/文章.</p>
<h2 id="数据库文档"><a href="#数据库文档" class="headerlink" title="数据库文档"></a>数据库文档</h2><p><a href="https://github.com/alicfeng/mysql_markdown">数据库文档生成</a> 这款工具通过链接数据库然后获取数据表配置信息.</p>
<p>比起其它的工具, 它的优势在于能够直接在 Windows\macOS\Linux 上面运行而不需要安装对于的编译环境, 并且转换为 markdown 之后也可以进一步转为 word 等文档形式.</p>
<p>缺点也很明显, 那就是格式损坏, 不是标准的 word 数据库设计规范格式, 需要进行手动的调整.</p>
<p>另外, 它默认输出的是 名称/描述/类型/键/为空/额外/默认值 等字段属性,如果需要增加其它的属性或者删掉一些属性, 可以直接进入代码文件进行修改, 整体的代码量并不是很大.</p>
<h2 id="摘要翻译工具"><a href="#摘要翻译工具" class="headerlink" title="摘要翻译工具"></a>摘要翻译工具</h2><p><a href="https://www.deepl.com/translator">deepl</a> 在结合上下文语境的翻译上表现很棒, 应该算是我所使用过的最赞的工具了, 摘要翻译完之后基本上不需要做过多的修改. 当然, 一些领域专业名词还是要注意一下的 😁.</p>
<h2 id="论文查重网站"><a href="#论文查重网站" class="headerlink" title="论文查重网站"></a>论文查重网站</h2><p><a href="https://www.bigan.net/">笔杆</a>和<a href="http://dsa.dayainfo.com/">大雅</a>是我目前使用的两个查重网站, 通过学校的 ip 登录之后就能获得免费的查重次数, 笔杆是每天每个微信号两次, 基本上就足够使用了, 并且导师也说笔杆的查重结果相对比较接近知网.</p>
<p>吐槽氵, 技术概念类的查重</p>
<h2 id="待续"><a href="#待续" class="headerlink" title="待续"></a>待续</h2>]]></content>
      <categories>
        <category>见闻录</category>
      </categories>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>awk 学习记录</title>
    <url>/learn-awk-1/</url>
    <content><![CDATA[<p>上周在外网搭建了一个服务,主要是用来对 Mori 的各种处理状态做测试.</p>
<p>今天在看网站统计的时候,发现请求的次数不太正常,主要表现就是出现了下面这种画风的请求.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO:     <span class="token number">174.49</span>.25.36:51271 - <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> OK
INFO:     <span class="token number">14.139</span>.155.142:41680 - <span class="token string">"GET /currentsetting.htm HTTP/1.1"</span> <span class="token number">404</span> Not Found
INFO:     <span class="token number">91.241</span>.19.84:58868 - <span class="token string">"GET /wp-content/plugins/wp-file-manager/readme.txt HTTP/1.1"</span> <span class="token number">404</span> Not Found
INFO:     <span class="token number">91.241</span>.19.84:58844 - <span class="token string">"GET /?XDEBUG_SESSION_START=phpstorm HTTP/1.1"</span> <span class="token number">200</span> OK
INFO:     <span class="token number">91.241</span>.19.84:42642 - <span class="token string">"GET /console/ HTTP/1.1"</span> <span class="token number">404</span> Not Found
INFO:     <span class="token number">91.241</span>.19.84:36206 - <span class="token string">"POST /api/jsonws/invoke HTTP/1.1"</span> <span class="token number">404</span> Not Found
INFO:     <span class="token number">91.241</span>.19.84:55124 - <span class="token string">"POST /vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1"</span> <span class="token number">404</span> Not Found
INFO:     <span class="token number">91.241</span>.19.84:36174 - <span class="token string">"GET /vendor/phpunit/phpunit/src/Util/PHP/eval-stdin.php HTTP/1.1"</span> <span class="token number">404</span> Not Found
INFO:     <span class="token number">91.241</span>.19.84:42156 - <span class="token string">"GET /index.php?s=/Index/<span class="token entity" title="\t">\t</span>hink<span class="token entity" title="\a">\a</span>pp/invokefunction&amp;function=call_user_func_array&amp;vars[0]=md5&amp;vars[1][]=HelloThinkPHP21 HTTP/1.1"</span> <span class="token number">404</span> Not Found
INFO:     <span class="token number">91.241</span>.19.84:52646 - <span class="token string">"GET /?a=fetch&amp;content=&lt;php>die(@md5(HelloThinkCMF))&lt;/php> HTTP/1.1"</span> <span class="token number">200</span> OK
INFO:     <span class="token number">91.241</span>.19.84:53606 - <span class="token string">"GET /solr/admin/info/system?wt=json HTTP/1.1"</span> <span class="token number">404</span> Not Found
INFO:     <span class="token number">203.205</span>.34.139:47518 - <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> OK
INFO:     <span class="token number">182.185</span>.14.56:62446 - <span class="token string">"GET /currentsetting.htm HTTP/1.1"</span> <span class="token number">404</span> Not Found<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>随手摘了一个 ip (219.149.212.74) 查询了一下,竟然是国内的 = =|||</p>
<p>又想到从大二下接触 web 开发,到现在两年多,部署了几个服务,但是却没有好好分析过网站的日志文件,正好就趁着这个机会看看吧.</p>
<a id="more"></a>

<h2 id="为什么是-awk"><a href="#为什么是-awk" class="headerlink" title="为什么是 awk"></a>为什么是 awk</h2><p>通过 python,我们同样可以实现对日志分析的功能,所以,为什么要舍近求远,去使用 awk 呢？我个人的理由如下.</p>
<ol>
<li>性能</li>
<li>炫酷</li>
<li>简单</li>
</ol>
<p><a href="https://www.quora.com/Is-AWK-faster-than-Python">Is AWK faster than Python?</a> 关于这一点的讨论并不鲜见.从直觉来讲,与原生 linux 系统更加贴近的 awk 应该比万金油语言 python 拥有更好的性能.</p>
<p>不过这位使用的数据量级太低,并且他本人也建议使用大文本再进行一次测试.于是,我使用了公开数据集<a href="https://data.un.org/_Docs/SYB/CSV/SYB62_309_201906_Education.csv">SYB62_309_201906_Education</a>,将其膨胀到 220M,然后又做了一次测试.</p>
<p>在阿里云 1c2g 的轻量级应用服务器上,得到的结果如下.</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/awk_test.PNG" alt="linux_res" loading="lazy"></p>
<p>awk 代码:</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">awk</span> <span class="token string">'BEGIN &#123; FPAT = "[^,]*|<span class="token entity" title="\&quot;">\"</span>[^<span class="token entity" title="\&quot;">\"</span>]+<span class="token entity" title="\&quot;">\"</span>" &#125; NR>2 &#123; print <span class="token variable">$2</span> "," <span class="token variable">$3</span> &#125;'</span> SYB62_309_201906_Education.csv <span class="token operator">></span> awk_result.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>python 代码:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'../dataSet/SYB62_309_201906_Education.csv'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        re_ <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r'(?:\s*(?:(\"[^\"]*\")|([^,]+))\s*,?)+?'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>re_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">or</span> re_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span>
                   <span class="token punctuation">(</span>re_<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">or</span> re_<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'\n'</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'../dataSet/reader_normal.csv'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    f<span class="token punctuation">.</span>writelines<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在进行了相同的数据集分析之后,awk 能够以 <strong>更少的代码量和更高的运行效率</strong> 完成数据集的分割工作.当然,性能只是一个考虑方面,更主要的是,awk 够 geek,而我够闲.</p>
<p><strong>PS1:</strong><br>之所以说 <strong>在原生 linux 系统上</strong>,是因为我在 wsl 上面同样做过一次测试,得到的结果如下.</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/awk_wsl.PNG" alt="wsl_res" loading="lazy"></p>
<p><strong>PS2:</strong><br>对于简单的 CSV(comma-separated values) 文件,也就是没有 <strong>“</strong> 和 <strong>,</strong> 等干扰项的文件,使用分割比使用正则有高得多的效率.</p>
<h2 id="awk-分析网站访问日志"><a href="#awk-分析网站访问日志" class="headerlink" title="awk 分析网站访问日志"></a>awk 分析网站访问日志</h2><p>使用的日志是测试 api 的访问记录 access.log,具体的文件信息如下.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">File: ‘access.log’
  Size: <span class="token number">4063334</span>         Blocks: <span class="token number">7944</span>       IO Block: <span class="token number">4096</span>   regular <span class="token function">file</span>
Device: fd01h/64769d    Inode: <span class="token number">155109</span>      Links: <span class="token number">1</span>
Access: <span class="token punctuation">(</span>0755/-rwxr-xr-x<span class="token punctuation">)</span>  Uid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>   Gid: <span class="token punctuation">(</span>    <span class="token number">0</span>/    root<span class="token punctuation">)</span>
Access: <span class="token number">2020</span>-11-25 <span class="token number">18</span>:06:33.577884826 +0800
Modify: <span class="token number">2020</span>-11-25 <span class="token number">18</span>:06:23.101795585 +0800
Change: <span class="token number">2020</span>-11-25 <span class="token number">18</span>:06:23.101795585 +0800
 Birth: -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h3><blockquote>
<p>format : ip - - [time] “url” statuscode “-“ “UA” “-“</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">114.220</span>.205.222 - - <span class="token punctuation">[</span><span class="token number">10</span>/Aug/2020:09:05:18 +0000<span class="token punctuation">]</span> <span class="token string">"GET /api/items/5?q=somequery HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">29</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"</span> <span class="token string">"-"</span>
<span class="token number">89.248</span>.174.166 - - <span class="token punctuation">[</span><span class="token number">10</span>/Aug/2020:09:07:56 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">15</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 zgrab/0.x"</span> <span class="token string">"-"</span>
<span class="token number">114.220</span>.205.222 - - <span class="token punctuation">[</span><span class="token number">10</span>/Aug/2020:09:10:52 +0000<span class="token punctuation">]</span> <span class="token string">"GET /api/docs HTTP/1.1"</span> <span class="token number">404</span> <span class="token number">555</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"</span> <span class="token string">"-"</span>
<span class="token number">114.220</span>.205.222 - - <span class="token punctuation">[</span><span class="token number">10</span>/Aug/2020:09:13:10 +0000<span class="token punctuation">]</span> <span class="token string">"GET /api/docs HTTP/1.1"</span> <span class="token number">404</span> <span class="token number">22</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"</span> <span class="token string">"-"</span>
<span class="token number">114.220</span>.205.222 - - <span class="token punctuation">[</span><span class="token number">10</span>/Aug/2020:09:13:49 +0000<span class="token punctuation">]</span> <span class="token string">"GET /api/docs HTTP/1.1"</span> <span class="token number">404</span> <span class="token number">22</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36"</span> <span class="token string">"-"</span>
<span class="token number">80.82</span>.78.85 - - <span class="token punctuation">[</span><span class="token number">10</span>/Aug/2020:09:39:13 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">15</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:76.0) Gecko/20100101 Firefox/76.0"</span> <span class="token string">"-"</span>
<span class="token number">39.107</span>.127.149 - - <span class="token punctuation">[</span><span class="token number">10</span>/Aug/2020:10:14:54 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">15</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:36.0) Gecko/20100101 Firefox/36.0"</span> <span class="token string">"-"</span>
<span class="token number">180.163</span>.220.68 - - <span class="token punctuation">[</span><span class="token number">10</span>/Aug/2020:10:17:12 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">15</span> <span class="token string">"-"</span> <span class="token string">"Mozilla/5.0 (Linux; U; Android 8.1.0; zh-CN; EML-AL00 Build/HUAWEIEML-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 baidu.sogo.uc.UCBrowser/11.9.4.974 UWS/2.13.1.48 Mobile Safari/537.36 AliApp(DingTalk/4.5.11) com.alibaba.android.rimet/10487439 Channel/227200 language/zh-CN"</span> <span class="token string">"-"</span>
<span class="token number">180.163</span>.220.68 - - <span class="token punctuation">[</span><span class="token number">10</span>/Aug/2020:10:17:14 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">15</span> <span class="token string">"http://baidu.com/"</span> <span class="token string">"Mozilla/5.0 (Linux; U; Android 8.1.0; zh-CN; EML-AL00 Build/HUAWEIEML-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 baidu.sogo.uc.UCBrowser/11.9.4.974 UWS/2.13.1.48 Mobile Safari/537.36 AliApp(DingTalk/4.5.11) com.alibaba.android.rimet/10487439 Channel/227200 language/zh-CN"</span> <span class="token string">"-"</span>
<span class="token number">42.236</span>.10.78 - - <span class="token punctuation">[</span><span class="token number">10</span>/Aug/2020:10:17:27 +0000<span class="token punctuation">]</span> <span class="token string">"GET / HTTP/1.1"</span> <span class="token number">200</span> <span class="token number">15</span> <span class="token string">"http://baidu.com/"</span> <span class="token string">"Mozilla/5.0 (Linux; U; Android 8.1.0; zh-CN; EML-AL00 Build/HUAWEIEML-AL00) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/57.0.2987.108 baidu.sogo.uc.UCBrowser/11.9.4.974 UWS/2.13.1.48 Mobile Safari/537.36 AliApp(DingTalk/4.5.11) com.alibaba.android.rimet/10487439 Channel/227200 language/zh-CN"</span> <span class="token string">"-"</span>
<span class="token punctuation">(</span>normal_test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="统计访问的人数"><a href="#统计访问的人数" class="headerlink" title="统计访问的人数"></a>统计访问的人数</h3><p>在不考虑使用代理的情况下,可以假定一个 ip 代表一个独立访客.</p>
<h3 id="统计某个-ip-的总访问次数"><a href="#统计某个-ip-的总访问次数" class="headerlink" title="统计某个 ip 的总访问次数"></a>统计某个 ip 的总访问次数</h3><p>首先,在 awk 中是存在 <em>数组(Array)</em> 这个概念的,不过这里的数组更加类似于 c++的 map、python 的 dict.通过索引取值,但是这个索引并不局限于数字,也可以是字符串.也就是说,与其说是 Array,不如说是 Key-Value .</p>
<p>对 ip 的统计主要就是使用了这个功能.我对日志进行遍历,然后做成 <strong>哈希表</strong> ,最后使用 linux 自带的 sort 进行统计.</p>
<p>awk 自身也有排序函数 asort 和 asorti,不过在实际使用的过程中,asort 会破坏原有的 indices,这在 StackOverflow 上吗也有人遇到了同样的问题,<a href="https://stackoverflow.com/questions/5342782/sort-associative-array-with-awk">Sort associative array with AWK</a>.通过原生的 awk 方法解决太麻烦了,所以这里偷个懒直接使用 linux 的 sort 函数.</p>
<p><strong>ps.</strong> sort 必要的参数说明</p>
<blockquote>
<p>-r, –reverse reverse the result of comparisons<br>-n, –numeric-sort compare according to string numerical value<br>-k, –key=KEYDEF sort via a key; KEYDEF gives location and type</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">time</span> <span class="token function">gawk</span> <span class="token string">'&#123;seen[<span class="token variable">$1</span>]++&#125; END &#123;for(foo in seen) &#123;print foo,seen[foo]&#125;&#125;'</span> access.log <span class="token operator">|</span> <span class="token function">sort</span> -nrk <span class="token number">2</span><span class="token operator">|</span><span class="token function">head</span>

<span class="token comment"># output</span>
<span class="token comment"># 132.145.91.50 4305</span>
<span class="token comment"># 58.210.143.102 316</span>
<span class="token comment"># 146.56.217.168 162</span>
<span class="token comment"># 80.82.70.187 155</span>
<span class="token comment"># 42.51.60.61 155</span>
<span class="token comment"># 183.136.225.56 105</span>
<span class="token comment"># 121.235.166.248 100</span>
<span class="token comment"># 183.136.225.35 78</span>
<span class="token comment"># 163.177.13.2 78</span>
<span class="token comment"># 101.251.242.238 78</span>
<span class="token comment"># gawk '&#123;seen[$1]++&#125; END &#123;for(foo in seen) &#123;print foo,seen[foo]&#125;&#125;' access.log  0.02s user 0.00s system 71% cpu 0.032 total</span>
<span class="token comment"># sort -nrk 2  0.07s user 0.00s system 74% cpu 0.090 total</span>
<span class="token comment"># head  0.00s user 0.00s system 1% cpu 0.079 total</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果不使用 awk,也可以通过 linux 的组合命令实现统计的效果.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">time</span> <span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$1</span>&#125;'</span> access.log <span class="token operator">|</span> <span class="token function">sort</span> -n <span class="token operator">|</span> <span class="token function">uniq</span> -c <span class="token operator">|</span><span class="token function">sort</span> -nr -k <span class="token number">1</span><span class="token operator">|</span><span class="token function">head</span>

<span class="token comment"># output</span>
<span class="token comment"># 4305 132.145.91.50</span>
<span class="token comment"># ... 结果同上</span>
<span class="token comment"># awk '&#123;print $1&#125;' access.log  0.01s user 0.00s system 41% cpu 0.031 total</span>
<span class="token comment"># sort -n  0.10s user 0.00s system 68% cpu 0.150 total</span>
<span class="token comment"># uniq -c  0.03s user 0.00s system 22% cpu 0.155 total</span>
<span class="token comment"># sort -nr -k 1  0.09s user 0.00s system 39% cpu 0.240 total</span>
<span class="token comment"># head  0.00s user 0.00s system 0% cpu 0.232 total</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到,awk 在遍历的同时完成了统计的功能,而命令组则需要反复进行遍历,这就使得命令组的时间消耗大大高于 awk.</p>
<h3 id="URL-访问量"><a href="#URL-访问量" class="headerlink" title="URL 访问量"></a>URL 访问量</h3><h4 id="清洗"><a href="#清洗" class="headerlink" title="清洗"></a>清洗</h4><p>根据统计访问量的目标不同,有着不同的清洗思路.</p>
<p>比如想要知道哪些文章点击量更高,又或者是哪个静态文件的访问量高 or 存在异常点击,前者很明显要排除所有 jpg\gif\txt 之类的静态文件,后者则差不多要是前者的补集.</p>
<p>这里以统计 url 接口为例.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'<span class="token variable">$7</span> !~ /\/static/ &amp;&amp; <span class="token variable">$7</span> !~ /\.jpg|\.png|\.jpeg|\.gif|\.css|\.js|\.woff/ &#123;print&#125;'</span> access.log <span class="token operator">></span> clean_access.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>清洗前后的结果对比.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wc</span> access.log <span class="token operator">&amp;&amp;</span> <span class="token function">wc</span> clean_access.log

<span class="token comment"># output</span>
<span class="token comment">#  23587  436203 4063334 access.log</span>
<span class="token comment">#  22336  407926 3771874 clean_access.log</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'&#123;seen[<span class="token variable">$7</span>]++&#125; END &#123;for(foo in seen)&#123;print foo,seen[foo]&#125;&#125;'</span> clean_access.log <span class="token operator">|</span><span class="token function">sort</span> -nr -k <span class="token number">2</span> <span class="token operator">|</span><span class="token function">head</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>清洗与统计合并:</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'<span class="token variable">$7</span> !~ /\/static/ &amp;&amp; <span class="token variable">$7</span> !~ /\.jpg|\.png|\.jpeg|\.gif|\.css|\.js|\.woff/ &#123;seen[<span class="token variable">$7</span>]++&#125; END &#123;for(foo in seen)&#123;print foo,seen[foo]&#125;&#125;'</span> access.log <span class="token operator">|</span><span class="token function">sort</span> -nr -k <span class="token number">2</span> <span class="token operator">|</span><span class="token function">head</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="每日访问量"><a href="#每日访问量" class="headerlink" title="每日访问量"></a>每日访问量</h3><p>这里的每日访问量是指包括失败请求、静态资源请求在内的总的访问量. <a href="#%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F">样例数据</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'BEGIN &#123;FPAT = "([^ ]+)|<span class="token entity" title="\\">\\</span>[([^<span class="token entity" title="\\">\\</span>]]+)<span class="token entity" title="\\">\\</span>]|(<span class="token entity" title="\&quot;">\"</span>[^<span class="token entity" title="\&quot;">\"</span>]+<span class="token entity" title="\&quot;">\"</span>)"&#125; &#123;split(<span class="token variable">$4</span>,a,":");gsub("<span class="token entity" title="\\">\\</span>[","",a[1]);seen[a[1]]++&#125; END &#123;for(foo in seen)&#123;print foo,seen[foo]&#125;&#125;'</span> access.log<span class="token operator">|</span><span class="token function">head</span>

<span class="token comment"># output</span>
<span class="token comment"># 17/Sep/2020 474</span>
<span class="token comment"># 14/Sep/2020 81</span>
<span class="token comment"># 11/Sep/2020 97</span>
<span class="token comment"># 08/Oct/2020 454</span>
<span class="token comment"># 31/Oct/2020 996</span>
<span class="token comment"># 11/Aug/2020 113</span>
<span class="token comment"># 29/Sep/2020 434</span>
<span class="token comment"># 05/Oct/2020 436</span>
<span class="token comment"># 08/Nov/2020 188</span>
<span class="token comment"># 17/Oct/2020 127</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><blockquote>
<p>FPAT = “([^ ]+)|\[([^\]]+)\]|(&quot;[^&quot;]+&quot;)”</p>
</blockquote>
<p>指定了对文件的分割正则,分割之后的时间格式: <em>[10/Aug/2020:09:05:18 +0000]</em></p>
<p>我们需要的是<strong>每日</strong>的访问量,所以要将该时间继续分割提取.</p>
<blockquote>
<p>{split($4,a,”:”);gsub(“\[“,””,a[1]);}</p>
</blockquote>
<p>做的就是这个工作,提取除精确到 day 的日期. <em>10/Aug/2020</em></p>
<p>再之后使用 map 进行统计计数.</p>
<h2 id="补充-持续更新-ing"><a href="#补充-持续更新-ing" class="headerlink" title="补充(持续更新 ing)"></a>补充(持续更新 ing)</h2><h3 id="将-awk-的结果作为-cmd-参数"><a href="#将-awk-的结果作为-cmd-参数" class="headerlink" title="将 awk 的结果作为 cmd 参数"></a>将 awk 的结果作为 cmd 参数</h3><p>最简单的使用就像这样.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">awk</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这种用法,可以用来将 docker 中的无效 image 快速移除.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">docker rmi <span class="token variable"><span class="token variable">$(</span>docker images <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'<span class="token variable">$1</span>=="&lt;none>" &#123;print <span class="token variable">$3</span>&#125;'</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>将以上的脚本整合,然后设置一个定时执行,就可以每天整合一次网站访问记录.配合 echarts,可以将网站访问以漂亮的图表的形式输出.</p>
<p>至此,DIY 网站运行统计收工.</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>awk</tag>
      </tags>
  </entry>
  <entry>
    <title>Mori Kokoro 开发过程中遇到的问题(2) 以及使用代码收集</title>
    <url>/mori-question-and-code-collection/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距离 Mori v0.1 成形已经过了一周.这一周里面对这个代码进行了进一步的优化.</p>
<p>在 <a href="https://blog.harumonia.moe/mori-kokoro/">Mori Kokoro 开发记录</a> 中已经对上个阶段开发中遇到的问题进行了一次汇总.本篇是对本阶段的问题的汇总.</p>
<p>另外.将一些实用的代码摘出.并进行注释说明.</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/mori.gif" alt="mori" loading="lazy"></p>
<a id="more"></a>

<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="关于-requests-的-hooks"><a href="#关于-requests-的-hooks" class="headerlink" title="关于 requests 的 hooks"></a>关于 requests 的 hooks</h3><p>Mori 中使用 hook 主要是用来进行时间统计.</p>
<p>在 requests 的 response 中已经存在的请求时间统计.代码如下.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Start time (approximately) of the request</span>
start <span class="token operator">=</span> preferred_clock<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Send the request</span>
r <span class="token operator">=</span> adapter<span class="token punctuation">.</span>send<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

<span class="token comment"># Total elapsed time of the request (approximately)</span>
elapsed <span class="token operator">=</span> preferred_clock<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start
r<span class="token punctuation">.</span>elapsed <span class="token operator">=</span> timedelta<span class="token punctuation">(</span>seconds<span class="token operator">=</span>elapsed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以发现.这里仅仅统计了请求所花费的时间.但是我们需要的不仅仅是这个时间.而是从开始处理(包括 post-data 的渲染等)到请求结束的时间.</p>
<h4 id="为什么使用-hooks"><a href="#为什么使用-hooks" class="headerlink" title="为什么使用 hooks"></a>为什么使用 hooks</h4><p>在 <a href="https://2.python-requests.org/en/master/user/advanced/#id8">Event Hooks</a> 中.给出将 hooks 应用于 requests.get()以及 Session()两种示例.这两种情况不能一概而论.get()是一次性的.而 Session()是持续的.实际上就是 <em>是否需要对请求的每一个 url 使用 hooks 处理</em> 的这样一个问题.不过文档并没有解决我们的问题–为什么(或者说.什么情况下)使用 hooks?</p>
<p>而在 StackOverflow 的<a href="https://stackoverflow.com/questions/17773028/python-requests-hook-or-no-hook">Python Requests: Hook or no Hook?</a>中给出了很具有参考价值的回答.</p>
<blockquote>
<p>Hooks should really therefore only be used to drive behaviours that will make things more predictable, not less. For example, Requests uses them internally to handle 401 responses for various kinds of authentication.</p>
</blockquote>
<p>同样.在阅读了源码之后.我个人对于 hooks 的用法作出了一些简单的总结.</p>
<ul>
<li>仅仅对请求成功的 response 进行处理</li>
<li>从设计的角度来看.这个处理是隐式的</li>
<li>可以将 hooks 与 session 绑定.来实现不同情况下的 response 处理</li>
<li>hooks 如果存在返回值.那么这个返回值将会取代 response &gt; hooks.py line 32~33</li>
</ul>
<h3 id="关于脚本中的重试"><a href="#关于脚本中的重试" class="headerlink" title="关于脚本中的重试"></a>关于脚本中的重试</h3><p>这是问题实际上是要在重试次数和高效爬取之间做出一个取舍.</p>
<p>从实际的情况出发.</p>
<p>如果在爬虫的代码中.考虑到了网站的不稳定性.从而进行了多段重试.那么.在 api 的检测中最好也要进行多段的重试.否则就会出现爬虫获取到了数据.但是检测脚本报 api 失效的情况.当然.这种情况是概率性的.如果服务端不稳定.那么无论如何增加重试次数.都会有不一致的情况出现.</p>
<p>而如果代码中就没有进行重试.那么脚本的重试就显得画蛇添足了.</p>
<h3 id="xlwt-的列宽问题"><a href="#xlwt-的列宽问题" class="headerlink" title="xlwt 的列宽问题"></a>xlwt 的列宽问题</h3><p>这里的列宽与在 excel 右击 column 所显示的列宽不同.</p>
<p>在<a href="https://buxty.com/b/2011/10/widths-heights-with-xlwt-python/">Widths &amp; Heights with xlwt + Python</a> 找到了解答.</p>
<blockquote>
<p>Columns have a property for setting the width. The value is an integer specifying the size measured in 1/256 of the width of the character ‘0’ as it appears in the sheet’s default font. xlwt creates columns with a default width of 2962, roughly equivalent to 11 characters wide.</p>
</blockquote>
<p>也就是说：xlwt 中列宽的值表示方法：默认字体 ‘0’ 的 1/256 为衡量单位.默认宽度值是 2960.大约是 11 个字符的宽度.</p>
<p>在实际的使用中.我是用的是 256*40+180 这种计算方法.得到的更接近于 40 个字符的宽度.</p>
<h2 id="摘出常用代码"><a href="#摘出常用代码" class="headerlink" title="摘出常用代码"></a>摘出常用代码</h2><h3 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">send_mail</span><span class="token punctuation">(</span>receivers<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> file_content<span class="token punctuation">,</span> html<span class="token punctuation">,</span> subject<span class="token punctuation">,</span> mail_host<span class="token punctuation">,</span> mail_user<span class="token punctuation">,</span> mail_pass<span class="token punctuation">,</span> mail_port<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    发送邮件
    配置信息见README
    """</span>
    <span class="token keyword">import</span> smtplib
    <span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText
    <span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart

    sender <span class="token operator">=</span> mail_user
    message <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>
    message<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> sender
    message<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">';'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>receivers<span class="token punctuation">)</span>
    message<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> subject

    <span class="token keyword">if</span> html<span class="token punctuation">:</span>
        message<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>MIMEText<span class="token punctuation">(</span>html<span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    part <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>file_content<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"vnd.ms-excel"</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    part<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">,</span> <span class="token string">'attachment'</span><span class="token punctuation">,</span>
                    filename<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>subject<span class="token punctuation">&#125;</span></span><span class="token string">.xls'</span></span><span class="token punctuation">)</span>
    message<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>part<span class="token punctuation">)</span>

    <span class="token keyword">for</span> count <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> mail_port <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP<span class="token punctuation">(</span><span class="token punctuation">)</span>
                smtp<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>mail_host<span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>mail_host<span class="token punctuation">,</span> mail_port<span class="token punctuation">)</span>
            smtp<span class="token punctuation">.</span>ehlo<span class="token punctuation">(</span><span class="token punctuation">)</span>
            smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>mail_user<span class="token punctuation">,</span> mail_pass<span class="token punctuation">)</span>
            smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receivers<span class="token punctuation">,</span> message<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            smtp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> _e<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>_e<span class="token punctuation">)</span>
            <span class="token keyword">if</span> count <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'failed to send email'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="将二维数组变成-html-table"><a href="#将二维数组变成-html-table" class="headerlink" title="将二维数组变成 html-table"></a>将二维数组变成 html-table</h3><p>在发送邮件时.邮件的内容可以是 html.所以将报表的结果变为 html-table.更方便查看.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate_table</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    th <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> value <span class="token keyword">in</span> self<span class="token punctuation">.</span>headers<span class="token punctuation">:</span>
        th <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f'&lt;th style="border:1px solid"></span><span class="token interpolation"><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/th>'</span></span>
    thead <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'&lt;thead style="background-color:gray;"></span><span class="token interpolation"><span class="token punctuation">&#123;</span>th<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/thead>'</span></span> <span class="token comment"># 表头的底色变为灰色</span>
    tbody <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> result <span class="token keyword">in</span> self<span class="token punctuation">.</span>results<span class="token punctuation">:</span>
        tr <span class="token operator">=</span> <span class="token string">''</span>
        <span class="token keyword">for</span> header <span class="token keyword">in</span> self<span class="token punctuation">.</span>headers<span class="token punctuation">:</span>
            tr <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f'&lt;td style="border:1px solid"></span><span class="token interpolation"><span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span>header<span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">&lt;/td>'</span></span>
        <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'check_result'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"OK"</span><span class="token punctuation">:</span>    <span class="token comment"># 判断结果是否是'OK',如果不是,则该行变为红色</span>
            tbody <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f'&lt;tr style="color:red"></span><span class="token interpolation"><span class="token punctuation">&#123;</span>tr<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/tr>'</span></span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            tbody <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f'&lt;tr></span><span class="token interpolation"><span class="token punctuation">&#123;</span>tr<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/tr>'</span></span>
    <span class="token keyword">return</span> <span class="token string-interpolation"><span class="token string">f'&lt;p>Mori Result&lt;/p>&lt;table style="border:1px solid"></span><span class="token interpolation"><span class="token punctuation">&#123;</span>thead<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>tbody<span class="token punctuation">&#125;</span></span><span class="token string">&lt;/table>'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>diyTools</tag>
      </tags>
  </entry>
  <entry>
    <title>Be a better pythonista(4)：nametuple的实际应用</title>
    <url>/nametuple_act/</url>
    <content><![CDATA[<blockquote>
<p>Factory Function for Tuples with Named Fields</p>
</blockquote>
<p>Python 除了大家熟知的，可以直接使用的 list、dictionary、tuple 等容器，还有一些放在 collections 包中的容器，这些容器的泛用性不及普通容器，但是在特殊的场景下，有着超过普通容器的性能与便利性。</p>
<p>本篇就在官方文档的基础上，结合笔者的学习工作经验，于管中窥得 nametuple 之一斑。</p>
<a id="more"></a>

<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>笔者在学习工作中使用 nametuple 的场景如下:</p>
<ol>
<li>在定义类似坐标、rgba 值等简单的数据容器时，可以使用 nametuple</li>
<li>可以用来快速生成 csv、sql 对应的类</li>
</ol>
<p>下面解释一下为什么这些场景可以使用 nametuple 吧~</p>
<h2 id="简单数据容器"><a href="#简单数据容器" class="headerlink" title="简单数据容器"></a>简单数据容器</h2><p>这里为了方便理解，首先使用一个众所熟知的定义数据容器的手段 – 类，来进行一个类比。</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Circle
&#123;
      private:
      double radius;

      public:
      构造函数...
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如上是国内 C++入门教材的必经之路，通过 <em>类</em> 定义了一个简单的圆容器。这里我们选择的案例并不是 circle，而是更加复杂的 rgba。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在python中定义一个color类，包含rgba四个关键变量</span>
<span class="token keyword">class</span> <span class="token class-name">ColorForCompare</span><span class="token punctuation">:</span>
    __slots__ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token string">"g"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"alpha"</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">,</span>alpha<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>r <span class="token operator">=</span> r  <span class="token comment"># red</span>
        self<span class="token punctuation">.</span>g <span class="token operator">=</span> g  <span class="token comment"># green</span>
        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b  <span class="token comment"># blue</span>
        self<span class="token punctuation">.</span>alpha <span class="token operator">=</span> alpha<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样，就可以使用 color_for_compare.r 来查看颜色对应的 red 值。</p>
<p>但是这显然是不够的，因为此时它可以接收类似 color_for_compare.x = 1 这样意义不明的语句。</p>
<pre class="line-numbers language-diff" data-language="diff"><code class="language-diff">class ColorForCompare:
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    __slots__ = ("r","g","b","alpha")
</span></span>
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">   def __init__(self,r,g,b,alpha):
</span><span class="token prefix unchanged"> </span><span class="token line">       self.r = r
</span><span class="token prefix unchanged"> </span><span class="token line">       self.g = g
</span><span class="token prefix unchanged"> </span><span class="token line">       self.b = b
</span><span class="token prefix unchanged"> </span><span class="token line">       self.alpha = alpha
</span></span>
<span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    def __repr__(self):
</span><span class="token prefix inserted">+</span><span class="token line">        return f'r = &#123;self.r&#125;, g = &#123;self.g&#125;, b = &#123;self.b&#125;, alpha = &#123;self.alpha&#125;'
</span></span>
ColorForCompare(0,0,0,0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output <span class="token builtin class-name">:</span> r <span class="token operator">=</span> <span class="token number">0</span>, g <span class="token operator">=</span> <span class="token number">0</span>, b <span class="token operator">=</span> <span class="token number">0</span>, alpha <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">color_for_compare <span class="token operator">=</span> ColorForCompare<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
color_for_compare<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:

---------------------------------------------------------------------------

AttributeError                            Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>

<span class="token operator">&lt;</span>ipython-input-58-e007350343ef<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
----<span class="token operator">></span> <span class="token number">1</span> color_for_compare.x <span class="token operator">=</span> <span class="token number">1</span>


AttributeError: <span class="token string">'ColorForCompare'</span> object has no attribute <span class="token string">'x'</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样，使用内置的 __slots__ 将变量固定住，就避免了 x 这样意义不明的值的干扰。同时，为了美观，又加上了一个 __repr__() 来输出实例化的结果。</p>
<p>至此，大体上完成了一个 color 容器。那么，在对应的 nametuple 中要如何实现这些功能呢？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple
Color <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> <span class="token string">"r g b alpha"</span><span class="token punctuation">)</span>

Color<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:

Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">alpha</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>对了，就是这样简单，这里我们可以再测试一下是否有限制变量名称的功能。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">color <span class="token operator">=</span> Color<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
color<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:

    ---------------------------------------------------------------------------

    AttributeError                            Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>

    <span class="token operator">&lt;</span>ipython-input-64-02f8a35ba0d<span class="token operator"><span class="token file-descriptor important">6</span>></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
          <span class="token number">1</span> color <span class="token operator">=</span> Color<span class="token punctuation">(</span><span class="token number">0,0</span>,0,0<span class="token punctuation">)</span>
    ----<span class="token operator">></span> <span class="token number">2</span> color.x <span class="token operator">=</span> <span class="token number">1</span>


    AttributeError: <span class="token string">'Color'</span> object has no attribute <span class="token string">'x'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过使用 nametuple，两行代码完成了 7 行代码的工作。</p>
<p>这里需要 <strong>补充</strong> 的是，你无法通过 color.r = 1 这样的语句来直接修改 nametuple 的值，具体可以看 <a href="https://docs.python.org/3/library/collections.html#collections.somenamedtuple._replace">python3.collections</a>,毕竟，这是个 tuple😄</p>
<p>nametuple 本身无法应付一些复杂的场景，比如，我们可能需要根据特殊的 rgb 值来判断是否是一些特殊的颜色(如:50,0,255-&gt;蓝色)，这就需要一些额外的函数来实现。<br>还有一种更加符合面向对象思维的方法，将这个函数变成 Color 类的成员函数，组件一个完善的 Color 类。显然单纯的 nametuple 无法做到这一点。</p>
<p>不过这并不是问题，我们完全可以通过强化 nametuple 来实现这个需求。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ColorPlus</span><span class="token punctuation">(</span>Color<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">convert_color_to_string</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>r <span class="token operator">==</span> <span class="token number">50</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>g <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> self<span class="token punctuation">.</span>b <span class="token operator">==</span> <span class="token number">255</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">'蓝色'</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">'无'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">color_p <span class="token operator">=</span> ColorPlus<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
color_p<span class="token punctuation">.</span>convert_color_to_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:  <span class="token string">'蓝色'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>新的类可以继承 nametuple 所定义的容器~</p>
<p>这就是我所说的 <strong>场景二：用来快速生成 csv、sql 对应的类</strong></p>
<h2 id="与-dictionary-的对比"><a href="#与-dictionary-的对比" class="headerlink" title="与 dictionary 的对比"></a>与 dictionary 的对比</h2><p>python 提供了一个非常方便的容器，也就是字典。这二者的区别在于，dictionary 是 unhashable 的，而 nametuple 相反。</p>
<p>以 Counter 为例。我们想要统计一群颜色中，有多少是蓝色？</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">color1 <span class="token operator">=</span> Color<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>color<span class="token punctuation">,</span> color<span class="token punctuation">,</span>color1<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:

    Counter<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">alpha</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>: <span class="token number">2</span>,
             Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">50</span>, <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">255</span>, <span class="token assign-left variable">alpha</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>: <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"r"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">:</span> <span class="token number">205</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"alpha"</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">&#125;</span>
Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:

    ---------------------------------------------------------------------------

    TypeError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>

    <span class="token operator">&lt;</span>ipython-input-80-85ae4a80ee6<span class="token operator"><span class="token file-descriptor important">9</span>></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
          <span class="token number">1</span> c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"r"</span><span class="token builtin class-name">:</span> <span class="token number">50</span>, <span class="token string">"g"</span><span class="token builtin class-name">:</span> <span class="token number">205</span>, <span class="token string">"b"</span><span class="token builtin class-name">:</span> <span class="token number">50</span>, <span class="token string">"alpha"</span><span class="token builtin class-name">:</span> <span class="token number">1.0</span><span class="token punctuation">&#125;</span>
    ----<span class="token operator">></span> <span class="token number">2</span> Counter<span class="token punctuation">(</span><span class="token punctuation">[</span>c.items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>


    ~<span class="token punctuation">\</span>miniconda3<span class="token punctuation">\</span>envs<span class="token punctuation">\</span>jupy<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>collections<span class="token punctuation">\</span>__init__.py <span class="token keyword">in</span> __init__<span class="token punctuation">(</span>*args, **kwds<span class="token punctuation">)</span>
        <span class="token number">566</span>             raise TypeError<span class="token punctuation">(</span><span class="token string">'expected at most 1 arguments, got %d'</span> % len<span class="token punctuation">(</span>args<span class="token punctuation">))</span>
        <span class="token number">567</span>         super<span class="token punctuation">(</span>Counter, self<span class="token punctuation">)</span>.__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
    --<span class="token operator">></span> <span class="token number">568</span>         self.update<span class="token punctuation">(</span>*args, **kwds<span class="token punctuation">)</span>
        <span class="token number">569</span>
        <span class="token number">570</span>     def __missing__<span class="token punctuation">(</span>self, key<span class="token punctuation">)</span>:


    ~<span class="token punctuation">\</span>miniconda3<span class="token punctuation">\</span>envs<span class="token punctuation">\</span>jupy<span class="token punctuation">\</span>lib<span class="token punctuation">\</span>collections<span class="token punctuation">\</span>__init__.py <span class="token keyword">in</span> update<span class="token punctuation">(</span>*args, **kwds<span class="token punctuation">)</span>
        <span class="token number">653</span>                     super<span class="token punctuation">(</span>Counter, self<span class="token punctuation">)</span>.update<span class="token punctuation">(</span>iterable<span class="token punctuation">)</span> <span class="token comment"># fast path when counter is empty</span>
        <span class="token number">654</span>             else:
    --<span class="token operator">></span> <span class="token number">655</span>                 _count_elements<span class="token punctuation">(</span>self, iterable<span class="token punctuation">)</span>
        <span class="token number">656</span>         <span class="token keyword">if</span> kwds:
        <span class="token number">657</span>             self.update<span class="token punctuation">(</span>kwds<span class="token punctuation">)</span>


    TypeError: unhashable type: <span class="token string">'dict_items'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>dict 是无法使用 Counter 的。</p>
<p>本质上，nametuple 仍然是 tuple，是与 dictionary 并行的 python 容器。所以这两者的选用，根据实际情况，具体问题具体分析。</p>
<p>还有一个值得一提的区别。在日常使用 dict 时，我们可能会纠结应该时 color[‘blue’] 还是 color[‘b’]，在多人开发时，这会导致一些麻烦甚至是风险 。而在使用 nametuple 时，ide 会像对待 class 一样给出相应的代码提示。</p>
<h2 id="nametuple-与-dictionary-和-tuple-的转换方法"><a href="#nametuple-与-dictionary-和-tuple-的转换方法" class="headerlink" title="nametuple 与 dictionary 和 tuple 的转换方法"></a>nametuple 与 dictionary 和 tuple 的转换方法</h2><h3 id="dictionary-gt-nametuple"><a href="#dictionary-gt-nametuple" class="headerlink" title="dictionary =&gt; nametuple"></a>dictionary =&gt; nametuple</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"r"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">:</span> <span class="token number">205</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token string">"alpha"</span><span class="token punctuation">:</span> <span class="token number">1.0</span><span class="token punctuation">&#125;</span>
Color<span class="token punctuation">(</span><span class="token operator">**</span>c<span class="token punctuation">)</span>   <span class="token comment"># unpack</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:

    Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">50</span>, <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token number">205</span>, <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">50</span>, <span class="token assign-left variable">alpha</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="dictionary-创建一个-nametuple"><a href="#dictionary-创建一个-nametuple" class="headerlink" title="dictionary 创建一个 nametuple"></a>dictionary 创建一个 nametuple</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">Color <span class="token operator">=</span> namedtuple<span class="token punctuation">(</span><span class="token string">"Color"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span>
Color<span class="token punctuation">(</span><span class="token operator">**</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:

    Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">50</span>, <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token number">205</span>, <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">50</span>, <span class="token assign-left variable">alpha</span><span class="token operator">=</span><span class="token number">1.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="nametuple-gt-dictionary"><a href="#nametuple-gt-dictionary" class="headerlink" title="nametuple =&gt; dictionary"></a>nametuple =&gt; dictionary</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">Color<span class="token punctuation">(</span><span class="token operator">**</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span>_asdict<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:
    OrderedDict<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'r'</span>, <span class="token number">50</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'g'</span>, <span class="token number">205</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'b'</span>, <span class="token number">50</span><span class="token punctuation">)</span>, <span class="token punctuation">(</span><span class="token string">'alpha'</span>, <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span><span class="token punctuation">(</span>Color<span class="token punctuation">(</span><span class="token operator">**</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:
    <span class="token punctuation">(</span><span class="token number">50</span>, <span class="token number">205</span>, <span class="token number">50</span>, <span class="token number">1.0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>与字典的排序方法相类似，可以使用简单的 lambda 来实现 nametuple 的排序功能</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">colors <span class="token operator">=</span> <span class="token punctuation">[</span>
    Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">205</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">sorted</span><span class="token punctuation">(</span>colors<span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">.</span>alpha<span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">output:
    <span class="token punctuation">[</span>Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">50</span>, <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token number">205</span>, <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">50</span>, <span class="token assign-left variable">alpha</span><span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>,
     Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">50</span>, <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">alpha</span><span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">)</span>,
     Color<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">50</span>, <span class="token assign-left variable">g</span><span class="token operator">=</span><span class="token number">205</span>, <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">50</span>, <span class="token assign-left variable">alpha</span><span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上，就是现阶段使用 nametuple 的一些心得体会，与常见的容器对比总结如下：</p>
<h3 id="与-class"><a href="#与-class" class="headerlink" title="与 class"></a>与 class</h3><ol>
<li>自带了 solt 属性</li>
<li>属性的值不可直接改变，而需要借助内置函数</li>
<li>原生 Class 无法使用 Counter</li>
<li>更简单的定义方法</li>
</ol>
<h3 id="与-dictionary"><a href="#与-dictionary" class="headerlink" title="与 dictionary"></a>与 dictionary</h3><ol>
<li>hashable，可以使用 Counter 之类的统计方法</li>
<li>可以在 ide 中可以得到代码提示</li>
</ol>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pythonista</tag>
      </tags>
  </entry>
  <entry>
    <title>Poirot 开发记录(2) - 字体抽取和OCR的优化方案</title>
    <url>/poirot-development-2/</url>
    <content><![CDATA[<p>承接前面两篇, <a href="https://blog.harumonia.moe/font-antispider-cracker/">字体反爬虫解决方案</a> 和 <a href="https://blog.harumonia.moe/poirot-development-progressbar/">进度条方案</a>, 本篇是对旧版本的 Poirot 部分内容的性能优化.</p>
<p>主要优化内容为:</p>
<ul>
<li>使用 <code>Pillow</code> 从字体文件中抽取出字形图片</li>
<li>使用 <code>Tesseract</code> 进行 OCR 识别</li>
</ul>
<p><del>当然还有一些细枝末节的优化, 如 socketio 的版本升级等, 这其中又遇到了一些小问题, 会在文末一并总结.</del></p>
<a id="more"></a>

<h2 id="字形图片抽取"><a href="#字形图片抽取" class="headerlink" title="字形图片抽取"></a>字形图片抽取</h2><p>在上一篇中, 笔者对 <strong>fontforge</strong> 抽取优化为 <strong>reportlab</strong> , 将调用 <em>command line interface</em> 变更为完全从 Python 代码实现, 不过仍然没有解决需要进行一次图片读写的问题.</p>
<p>另外, 如果想要避免读写, 使用 reportlab 进行图片性质转换, 可以将 reportlab 的实例转变为 pillow 的实例, 但是这些性质转换的过程中, 依然会产生很多不必要计算开支.</p>
<p>这次在接触了 pillow 之后, 忽然发现可以通过这个工具包里面的 ImageFont 对象来实现完全的\高效的流式操作, 省略到 io 带来的性能损耗. 如果不需要对字体文件进行存储备份的话, 那么到这里所有的文件相关的操作就都变成了在程序内部流转了.</p>
<p>并且, 由于最终得到的直接就是一个 pillow 实例, 所以如果需要对图像进行增强等操作的话, 直接对该实例进行处理即可.</p>
<p>主要依靠的代码如下.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> fontTools<span class="token punctuation">.</span>ttLib <span class="token keyword">import</span> TTFont
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageFont<span class="token punctuation">,</span> Image<span class="token punctuation">,</span> ImageDraw


<span class="token keyword">def</span> <span class="token function">uni_2_png_stream</span><span class="token punctuation">(</span>txt<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> font<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> img_size<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""将字形转化为图片流

    Args:
        txt (str): 图片标志信息, 从 TTFont.getBestCmap() 获得
        font (str): 字体文件名
        img_size (int, optional): [description]. Defaults to 512.

    Returns:
        一个 pillow 图片对象.
    """</span>
    img <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>img_size<span class="token punctuation">,</span> img_size<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span>  <span class="token comment"># (1)</span>
    draw <span class="token operator">=</span> ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>img<span class="token punctuation">)</span>   <span class="token comment">#  (2)</span>
    font <span class="token operator">=</span> ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>font<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>img_size <span class="token operator">*</span> <span class="token number">0.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">#  (3)</span>

    txt <span class="token operator">=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>txt<span class="token punctuation">)</span>
    x<span class="token punctuation">,</span> y <span class="token operator">=</span> draw<span class="token punctuation">.</span>textsize<span class="token punctuation">(</span>txt<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">)</span>  <span class="token comment">#  (4)</span>
    draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>img_size <span class="token operator">-</span> x<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>img_size <span class="token operator">-</span> y<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> txt<span class="token punctuation">,</span> font<span class="token operator">=</span>font<span class="token punctuation">,</span> fill<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>   <span class="token comment"># (5)</span>
    <span class="token keyword">return</span> img   <span class="token comment"># 如果需要将图片存储到本地, 那么直接调用 img 实例的 save( path:str ) 方法即可</span>


filename <span class="token operator">=</span> <span class="token string">''</span>  <span class="token comment"># 字体文件的路径信息</span>
f <span class="token operator">=</span> TTFont<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">.</span>getBestCmap<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 每个pil对应字体文件中的一个字形</span>
    pil <span class="token operator">=</span> uni_2_png_stream<span class="token punctuation">(</span>i<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h3><p>line (1) : 创建一个模式为1的(1-bit pixels, black and white, stored with one pixel per byte), 大小为 img_size * img_size的, 纯白色图片.<br>line (2) : ImageDraw 模块能够对图片进行简单的操作, 这里通过 .Draw() 方法将上面创造的图片实例化为可以调用 ImageDraw 方法进行操作的对象.<br>line (3) : ImageFont 模块能够存储 <em>位图字体( bitmap fonts )</em> , .truetype() 方法则能够从 <em>文件</em> 或者 <em>类文件对象( file-like object )</em> 中加载 <a href="https://zh.wikipedia.org/wiki/TrueType">TrueType</a> 或者 <a href="https://zh.wikipedia.org/wiki/OpenType">OpenType</a> 的字体, 对于该 module 的更多详细说明可以参照 <a href="https://pillow.readthedocs.io/en/stable/reference/ImageFont.html">ImageFont 文档</a>.<br>line (4) : 从字体文件中获取对应字形的大小.<br>line (5) : <code>(img_size - x) // 2</code> 是为了让绘制的字体处于图像的中央, 通过修改这对参数, 能够指定绘制字形的坐标. </p>
<p>最后, 将这个画布图片返回, 类型为Image.</p>
<h2 id="OCR-识别优化"><a href="#OCR-识别优化" class="headerlink" title="OCR 识别优化"></a>OCR 识别优化</h2><p>在过去的版本里面, Poirot 使用的是基于 <a href="https://github.com/ouyanghuiyu/chineseocr_lite">chineseocr_lite</a> 的本地 ocr 服务, 不过该服务的识别效率太低, 准确的说, 有识别过程中占用的性能太高\ 配置太过于繁琐等缺点.</p>
<p>这次将会使用更为高效的\输出更为友好的 <strong>Tesseract</strong> 作为本地 OCR 的升级方案, 更准确地说是使用 <a href="https://pypi.org/project/pytesseract/">pytesseract</a>.</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>具体的安装流程可以参考官方给出的文档, 需要先安装 <em>Tesseract</em> 服务, 然后才能正常使用. Windows 直接上安装包, linux 直接使用 apt\yum 进行以来安装即可.</p>
<p>安装完本体之后, 还要手动下载一下语言包, 默认是不提供简体中文的. 所以需要下载 <strong>chi-smi</strong> (chinese-simplified) 这个标识的语言包. </p>
<p>在windows中, 需要手动将该语言包放入 Tesseract 的路径下, 而在ubuntu中, 虽然说可以使用  <code>apt install tesseract-ocr-chi-smi</code> 进行安装, 不过最终还是提示 <em>未找到对应的语言包</em> , 最终依然是手动下载之.</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>需要注意的一点就是, Windows 在使用 pytesseract 时, 需要先配置环境变量, 或者, 加入 <code>pytesseract.pytesseract.tesseract_cmd = r&#39;C:\&#123;安装服务的路径&#125;\Tesseract-OCR\tesseract.exe&#39;</code> 声明 Tesseract 的命令行路径, 其它系统则无需这样的操作.</p>
<p>可以简化为如下的代码.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 判断平台是否为windows, 如果是, 则手动指定tesseract的路径</span>
<span class="token keyword">if</span> os<span class="token punctuation">.</span>sys<span class="token punctuation">.</span>platform <span class="token operator">==</span> <span class="token string">'win32'</span><span class="token punctuation">:</span>
    pytesseract<span class="token punctuation">.</span>pytesseract<span class="token punctuation">.</span>tesseract_cmd <span class="token operator">=</span> <span class="token string">r'C:\&#123;安装服务的路径&#125;\Tesseract-OCR\tesseract.exe'</span>
text <span class="token operator">=</span> pytesseract<span class="token punctuation">.</span>image_to_string<span class="token punctuation">(</span>image<span class="token punctuation">,</span> lang<span class="token operator">=</span><span class="token string">'chi_sim'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="单个字符的识别"><a href="#单个字符的识别" class="headerlink" title="单个字符的识别"></a>单个字符的识别</h4><p>如上的代码在实际识别字体图片时效果并不算好, 原因是 Tesseract 默认是多字符识别模式, 比如 <strong>嬴</strong> 这个字, 会被拆分成多个字, 这里就需要手动进行配置约束, 使用单字符识别模式, 也即:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">text <span class="token operator">=</span> pytesseract<span class="token punctuation">.</span>image_to_string<span class="token punctuation">(</span>image<span class="token punctuation">,</span> lang<span class="token operator">=</span><span class="token string">'chi_sim'</span><span class="token punctuation">,</span> config<span class="token operator">=</span><span class="token string">'--psm 10'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>text</code> 对象可能包含诸如 <code>\x0</code> 之类不太友好的后缀, 可以使用 <code>.strip()</code> 进行去除.</p>
<h4 id="Docker-配置更新"><a href="#Docker-配置更新" class="headerlink" title="Docker 配置更新"></a>Docker 配置更新</h4><p>使用 <code>python:3.6</code> 镜像的话, 由于该镜像是简化之后的版本, 如果需要安装tesseractor, 则需要进行一次 <code>update</code> 操作.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">RUN <span class="token function">apt-get</span> clean <span class="token punctuation">\</span>
  <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> update -y <span class="token punctuation">\</span>
  <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> tesseract-ocr <span class="token punctuation">\</span>
  <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y libtesseract-dev <span class="token punctuation">\</span>
  <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> tesseract-ocr-chi-sim<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这一步对于国内的用户来说可能过于痛苦, 所以在运行该命令之前可以先替换为国内的镜像源.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">RUN <span class="token function">sed</span> -i s@/deb.debian.org/@/mirrors.aliyun.com/@g /etc/apt/sources.list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此, 本地识别模式的切换, 其中最关键的技术已经完成, 相较于之前的版本, 这一版在识别流程的性能上进行了非常大的优化.</p>
<p>接下来的优化方向将会集中在代码结构和使用友好等方面.</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>Poirot开发记录(1) -- 进度条</title>
    <url>/poirot-development-progressbar/</url>
    <content><![CDATA[<p>Poirot 是自动将字体文件(woff\woff2\ttf)映射为结果字典,主要用于中文字体反爬虫的破解,包括 css 字体映射和图片文字反爬虫.</p>
<p>实现的基础思路可见于<a href="https://blog.harumonia.moe/font-antispider-cracker/">字体反爬虫解决方案-自动化通过字体文件生成映射字典</a>.</p>
<p>与 <a href="https://blog.harumonia.moe/mori-kokoro/">Mori</a> 同属于爬虫工作的小工具.名字取自大侦探波洛(<em>Hercule Poirot</em>). 与 Mori 的脚本服务不同,这次从实际使用的角度考虑,采用了 web 服务的形式.</p>
<p>本篇记录了 Poirot 的开发中学习到的技术和踩到的坑。</p>
<p>主要包括:</p>
<ol>
<li>flask-websocket 的使用</li>
<li>进度条的实现</li>
</ol>
<a id="more"></a>

<h2 id="进度条的实现"><a href="#进度条的实现" class="headerlink" title="进度条的实现"></a>进度条的实现</h2><p>制作前端进度条的目的无非是以下几种.</p>
<ol>
<li>美观的\功能全面的 UI</li>
<li>防止给用户造成无相应的错觉</li>
</ol>
<p>第二点在进行数据分析的项目时比较常见,动辄数分钟的后端处理,对于不明就里的用户来说很容易去乱点一些东西,以致不必要的麻烦.</p>
<p>使用目的的不同也就导致了实现方案的不同.我开发主要使用过 3 种实现方案.</p>
<ol>
<li>假进度条</li>
<li>前端轮询</li>
<li>WebScoket</li>
</ol>
<p>接下来我将详细解释三者的具体实现.</p>
<h3 id="假进度条"><a href="#假进度条" class="headerlink" title="假进度条"></a>假进度条</h3><p>顾名思义，这就是一个脱离了后端的，无法真正反映处理进度的”进度条”,简言之，空壳子. 使用这类进度条的原因有很多:技术力不足,时间不够,服务器性能等.</p>
<p>前端实现一个进度条非常简单,以我最常用的 Bootstrap 为例.</p>
<pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>progress<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>progress-bar w-75<span class="token punctuation">"</span></span>
    <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>progressbar<span class="token punctuation">"</span></span>
    <span class="token attr-name">aria-valuenow</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>75<span class="token punctuation">"</span></span>
    <span class="token attr-name">aria-valuemin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>
    <span class="token attr-name">aria-valuemax</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span>
  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过改变这个 tag 的宽度属性就可以实现进度条效果.具体的就是在 js 中使用 for 循环来控制(代码如下),如此就能完成一个 10 秒的进度条.</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".progress-bar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  bar<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>但是这里有一个 <strong>根本的原则(先决条件)</strong> ，那就是后端处理的时间必须可估算,传统的数据处理时间与回传数据的数据量是可以满足函数关系的(在保证后端稳定运行,负载可靠的情况下).</p>
<p>微小的偏差是允许的,但是如果出现前后端进度极大偏差,那就失了进度条使用的初衷.</p>
<p>这里的一个强化方案就是, <em>预估时间永远比处理时间要长</em> ,当后端处理完成返回数据时，直接将进度条拉满,这样就实现了前后端同步的假象.</p>
<h3 id="前端轮询"><a href="#前端轮询" class="headerlink" title="前端轮询"></a>前端轮询</h3><p>在前端请求数据分析接口 A 的同时,开启一个子线程用来统计分析的进度. 同时开启一个轮询接口 B 专门用来返回这个分析进度. 前端每隔一段时间向接口 B 查询进度，并反馈到进度条.</p>
<p>前端轮询的一个可参考案例就是 Miguel GrinBerg 的 <a href="https://github.com/miguelgrinberg/flask-celery-example">flask-celery-example</a> , 这里轮询了 celery 的 task，让用户能够知道后台程序的处理进度。</p>
<h4 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h4><p>引入了 <a href="https://nanobar.jacoborus.codes/">nanobar</a> 用作进度条的展示， 以及 <a href="https://github.com/CodeSeven/toastr">toastr</a> 用作关键消息闪现提示。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getData</span><span class="token punctuation">(</span>url <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
    method<span class="token operator">:</span> <span class="token string">"GET"</span><span class="token punctuation">,</span>
    mode<span class="token operator">:</span> <span class="token string">"cors"</span><span class="token punctuation">,</span>
    cache<span class="token operator">:</span> <span class="token string">"no-cache"</span><span class="token punctuation">,</span>
    credentials<span class="token operator">:</span> <span class="token string">"same-origin"</span><span class="token punctuation">,</span>
    headers<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string">"Content-Type"</span><span class="token operator">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    redirect<span class="token operator">:</span> <span class="token string">"follow"</span><span class="token punctuation">,</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">update_progress</span><span class="token punctuation">(</span>nanobar<span class="token punctuation">,</span> status_div<span class="token punctuation">,</span> now_state <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// nanobar 是nanobar.js 提供的一个进度条插件</span>
  <span class="token comment">// status_div 是展示进度条的div块</span>

  <span class="token keyword">let</span> url <span class="token operator">=</span> api_for_sandbox_progress<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"none"</span><span class="token punctuation">,</span> task_id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将这里的url替换成实际要请求的url</span>
  <span class="token function">getData</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    percent <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"info"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"current"</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> data<span class="token punctuation">[</span><span class="token string">"info"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"total"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    nanobar<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span>status_div<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>percent <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span>status_div<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"result"</span> <span class="token keyword">in</span> data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">$</span><span class="token punctuation">(</span>status_div<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Result: "</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token string">"result"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token function">$</span><span class="token punctuation">(</span>status_div<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Result: "</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"SUCCESS"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      toastr<span class="token punctuation">[</span><span class="token string">"success"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"COMPLETE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// toastr是一个消息闪现插件</span>

      <span class="token function">load_neo_page</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">"FAILURE"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      toastr<span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token string">"FAILURE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span> <span class="token operator">!==</span> now_state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        toastr<span class="token punctuation">[</span><span class="token string">"success"</span><span class="token punctuation">]</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      now_state <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token function">$</span><span class="token punctuation">(</span>status_div<span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Result: "</span> <span class="token operator">+</span> data<span class="token punctuation">[</span><span class="token string">"state"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">update_progress</span><span class="token punctuation">(</span>nanobar<span class="token punctuation">,</span> status_div<span class="token punctuation">,</span> now_state<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="后端实现"><a href="#后端实现" class="headerlink" title="后端实现"></a>后端实现</h4><p>轮询机制下的后端代码就是将状态存储在一个队列中，当轮询请求到达时将这个队列里面的消息交付给这个请求。</p>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><blockquote>
<p>WebSocket is a computer communications protocol, providing full-duplex communication channels over a single TCP connection.<br>–wikipedia</p>
</blockquote>
<p>在进度条上，使用 websocket 的根本目的是通过服务器端返回实时数据给前端。与前端轮询的”等间隔的时间内提高不定长的进度条长度”不同，WebScoket 拥有更加灵活的使用方式,这样做的好处就是能够让进度条的涨势更加平滑，与<a href="#%E5%81%87%E8%BF%9B%E5%BA%A6%E6%9D%A1">假进度条</a>的平滑不同，这是在实时反映后端处理进度的基础上的。</p>
<p>具体的实现可见于下一段<a href="#flask-websocket-%E7%9A%84%E4%BD%BF%E7%94%A8">flask-websocket 的使用</a></p>
<h2 id="flask-websocket-的使用"><a href="#flask-websocket-的使用" class="headerlink" title="flask-websocket 的使用"></a>flask-websocket 的使用</h2><p><a href="https://flask-socketio.readthedocs.io/en/latest/">文档</a>，文档中有详细的 websocket 使用案例。这里摘出我所使用的部分以为样例。</p>
<h3 id="后端实现-👇"><a href="#后端实现-👇" class="headerlink" title="后端实现 👇"></a>后端实现 👇</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">socketio <span class="token operator">=</span> SocketIO<span class="token punctuation">(</span>app<span class="token punctuation">,</span> async_mode<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
thread <span class="token operator">=</span> <span class="token boolean">None</span>
thread_lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">background_thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""开始记录实时的处理进度，每隔2s返回一次"""</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        socketio<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
        ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span> <span class="token keyword">not</span> SocketQueue<span class="token punctuation">.</span>res_queue<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            ProgressBar<span class="token punctuation">.</span>now_length <span class="token operator">+=</span> <span class="token number">1</span>
            ret<span class="token punctuation">.</span>append<span class="token punctuation">(</span>SocketQueue<span class="token punctuation">.</span>res_queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        socketio<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">'my_response'</span><span class="token punctuation">,</span>
                      <span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token punctuation">:</span> ret<span class="token punctuation">,</span> <span class="token string">'width'</span><span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ProgressBar<span class="token punctuation">.</span>calculate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                      namespace<span class="token operator">=</span><span class="token string">'/test'</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@socketio<span class="token punctuation">.</span>on</span><span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'/test'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""建立websocket连接"""</span>
    <span class="token keyword">global</span> thread
    <span class="token keyword">with</span> thread_lock<span class="token punctuation">:</span>
        <span class="token keyword">if</span> thread <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            thread <span class="token operator">=</span> socketio<span class="token punctuation">.</span>start_background_task<span class="token punctuation">(</span>background_thread<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@socketio<span class="token punctuation">.</span>on</span><span class="token punctuation">(</span><span class="token string">'disconnect_request'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'/test'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">disconnect_request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""关闭websocket连接"""</span>
    <span class="token decorator annotation punctuation">@copy_current_request_context</span>
    <span class="token keyword">def</span> <span class="token function">can_disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        disconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>

    session<span class="token punctuation">[</span><span class="token string">'receive_count'</span><span class="token punctuation">]</span> <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'receive_count'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>

    emit<span class="token punctuation">(</span><span class="token string">'my_response'</span><span class="token punctuation">,</span>
         <span class="token punctuation">&#123;</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token string">'Disconnected!'</span><span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">:</span> session<span class="token punctuation">[</span><span class="token string">'receive_count'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
         callback<span class="token operator">=</span>can_disconnect<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="前端实现-👇"><a href="#前端实现-👇" class="headerlink" title="前端实现 👇"></a>前端实现 👇</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span>namespace<span class="token punctuation">)</span><span class="token punctuation">;</span>

socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//   socket.emit("my_event", &#123; data: "I'm connected!" &#125;);</span>
  toastr<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"connect success"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> timeOut<span class="token operator">:</span> <span class="token number">500</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"my_response"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msgs<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>msgs<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> progress <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#crack-progress"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    progress<span class="token punctuation">.</span>style<span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span> <span class="token operator">=</span> msgs<span class="token punctuation">[</span><span class="token string">"width"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  msgs<span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    toastr<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> timeOut<span class="token operator">:</span> <span class="token number">1000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token function">cb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"disconnect_request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在经历了几次优化之后，<strong>实际在代码中的应用与样例代码有所出入</strong>。</p>
<h4 id="前端的坑"><a href="#前端的坑" class="headerlink" title="前端的坑"></a>前端的坑</h4><p>前端的 socket 请求需要后端的接口对应,不能出现前端有 socket 请求而后端没有对应的接口的情况,反之则没有问题.</p>
<p>这个坑主要是在使用 gunicorn 进行部署时出现,报错信息为 <code>Invalid session **** (further occurrences of this error will be logged with level INFO)</code> .</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>至此，进度条采用了从三种实现方式中选择了 socket .</p>
<p>实际上，选择 socket 最核心的原因就是，以前没有实际使用过这个技术，正好借着这次的机会实践一下而已。</p>
<p>至于性能方面，socket、前端长轮询、SSE 中哪个实现方法的效率最高、消耗最低，则不在这边文章的考虑范围之内了。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫监控服务的数据库选择-bitmap应用</title>
    <url>/redis-log/</url>
    <content><![CDATA[<p>在爬虫实习中遇到了这样一个情境：对一个给定的队列进行数据爬取(比如说是一个公司名称的队列，爬取对应的公司信息)，当然不是开发结束就算是完成了，代码无法保证能够应对所有的突发情况，而且我们也需要一个半透明的，甚至是透明的爬虫监控系统，了解爬虫的任务进度，以及过程中遇到的一些问题。</p>
<p>这个监控系统并不难实现，使用 flask 写了一个服务平台，不过是几个小时的事情，但是我在实现过程中遇到一个很有趣的问题：用什么样的数据库来保存这些数据？</p>
<p>笔者写爬虫时常用的数据有 <strong>MySQL</strong>、<strong>mongoDB</strong>、<strong>Redis</strong>，这三个各有长处，用来针对不同的业务需求；而在写 web 服务时，则常用 <strong>MySQL</strong>、<strong>SQLite</strong> 。</p>
<p>这些数据库在不同的情境下各有优劣，正巧最近有些闲工夫，就在这个问题上做了一些发散。</p>
<a id="more"></a>

<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>一切问题从需求出发。于是，我将服务的需求和可能出现的问题都列下来，从这些之中去发现解决思路。</p>
<ol>
<li>哪些公司完成了？哪些公司未完成？</li>
<li>第一轮数据获取结束后，还会有第二轮、第三轮等数据更新。</li>
<li>对爬虫进行时段监控，了解各个时段的爬虫效率如何？（这个时间精度不用很高，一般分析都是每 10 分钟、每半小时这样进行分析）</li>
<li>对特殊字段进行检测（有些字段在网站上只有键，没有值。对于偏僻的键，寻找数据样例花费的时间代价太大，一般选择先让爬虫跑起来，检测到值再进行更新）</li>
</ol>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>到这里，基本上 mongoDB 同学就可以退场了。MySQL 可以完成我们需要的问题的，建立一张数据表，包含 id、公司名、完成时间、轮次这几个字段，基本上前 3 点需求就可以完成了。</p>
<p>a. <strong>冗余数据</strong>。多轮数据会导致数据的存量变得很大。仅仅第一轮启动就会添加 40w+的数据，第二轮、第三轮，每一轮的更新必然会有新的公司名称加入进来，到时候数据的膨胀速度会变得很快。<br>b. <strong>纯粹无用数据</strong>。爬虫的时段监控从实际的角度来说，仅在本轮有较高的使用价值。对于第二轮的爬取来说，第一轮的时段监控基本上就是冗余数据了。<br>c. <strong>第 4 点需求的处理思路</strong>。如果我们将特殊字段作为数据表的字段添加进来，那么就会构成一个十分庞大的稀疏矩阵。这个矩阵是可以优化的，就是将大矩阵变成一个字段，不用布尔值存储，而是直接将特殊字段以字符串的形式存放在这个字段中。这是一个用处理时间来换取存储空间的思路，这样又引出一个新的问题，处理时间的代价如何衡量？同时，这个第 4 点需求，仅仅存在于 <strong>特殊字段未被检测到</strong> ，这样一个前提下，当字段检测到，我们有了足够的数据样例，那么这个存储空间就可以释放出来。</p>
<p>问题 a 可以通过添加字典表来解决，因为最大的冗余就是公司名称的重复，将公司名称作字典表，就可以释放出作为大头的那一部分空间。</p>
<p>问题 b 没有很好的解决方法，在解决了问题 a 之后，存储的这些时间值，成为了新的最占用空间的数据。放宽精度，将时间也做成一个字典表？</p>
<p>对于问题 c，我纠结了很久，最后决定放弃 MySQL 的思路，因为数据库维护的代价相对 Redis 太大了。</p>
<h3 id="Redis-如何解决这个问题"><a href="#Redis-如何解决这个问题" class="headerlink" title="Redis 如何解决这个问题"></a>Redis 如何解决这个问题</h3><p>首先，每一个特殊字段设置为一个 set 字段，每当检测到特殊字段，就将其推入 set 中；当特殊字段的样例获取足够，我们通过样例更新补全了代码，则销毁该 set 字段，释放空间。</p>
<p>思路很清晰明了，实现也十分地简单，维护代价几乎为 0 。</p>
<p>那么这就意味着，这样一个小的服务，却需要同时使用 MySQL、Redis 两个数据库？更直观地说，我需要写 MySQL 和 Redis 两套数据库的操作代码？</p>
<p>能否用 Redis 来实现 MySQL 所负责的那部分需求呢？</p>
<p>Redis 可以用来存储键值序列这样的二维数据，在我们引入了时间统计之后，这变成了一个三维的数据，有两个解决思路。</p>
<ol>
<li>使用 json 来扩充数据维度。</li>
<li>将字段名作为新的维度。</li>
</ol>
<p>使用 json 扩充维度会加大后续数据分析的难度，也会拖慢分析效率，因为要分出一部分性能用来展开多维数据。在锁定了数据最多只有三维的情况下，我选择了第二种思路。</p>
<p>于是新的问题又出现了，选择什么样的数据结构来存储这些数据？</p>
<p>在<a href="https://blog.harumonia.moe/2020/02/12/2020-02-12-Redis-note-2/">之前 Redis 的学习笔记中</a>，有通过 bitmap 来实现大量统计数据存储的案例。</p>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p>至此，路线逐渐成形：</p>
<ol>
<li>额外维护近似静态的公司名字典(只在每轮更新结束之后对该字典进行增改，注：不会删除)；将该字典的 index 作为 bitmap 的键，完成情况作为 bitmap 的值。</li>
<li>将粗粒度的时间作为字段名，每半小时分离出新字段。</li>
<li>设置一个额外线程，每半小时将本轮次的运行情况合并到以轮次为名称的 bitmap 字段中。</li>
</ol>
<p>空间用量：</p>
<pre class="line-numbers language-math" data-language="math"><code class="language-math">400000 &#x2F; 1024 &#x2F; 1024 &#x2F; 8MB * 2 ≈ 0.1MB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>当然还会有一些不太容易量化的额外空间消耗(键消耗等)，这些空间消耗也许要比本身数据 0.1MB 要大，不过可以肯定的是，比起 MySQL 要轻量不少。同时，维护的成本很低，调用的性能很高，这一点在实际的使用中也有所体现。</p>
<p>ps1. 需要说明的是，特殊字段的存储不在这个计算中，而是新开了 set，不将特殊字段的空间加入计算，因为本身特殊字段就是暂存字段，在实际作业中，第一轮进行到 34%左右时，特殊字段就已经全部被检测完毕，并且销毁掉了。</p>
<p>ps2. 键的生成由代码决定而不是由定时任务决定，所以也避免了空键浪费存储空间的问题。</p>
<p>结果如图所示。</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/spider-stat.PNG" alt="result.png" loading="lazy"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>MySQL-&gt;关系型数据库的泛用性很高，但是非关系型数据库、NoSql 等的存在也并非没有理由，因地制宜地选取数据库，根据数据库的特性去进行压榨，”让专业的人做专业的事”。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>DataBase</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>个人简历(备用)</title>
    <url>/resume/</url>
    <content><![CDATA[<h1 id="个人介绍"><a href="#个人介绍" class="headerlink" title="个人介绍"></a>个人介绍</h1><p>now：大三在读(2021 毕业)</p>
<p>email:<a href="mailto:&#x7a;&#120;&#x6a;&#108;&#x6d;&#50;&#51;&#x33;&#x40;&#x31;&#x36;&#x33;&#46;&#99;&#111;&#109;">&#x7a;&#120;&#x6a;&#108;&#x6d;&#50;&#51;&#x33;&#x40;&#x31;&#x36;&#x33;&#46;&#99;&#111;&#109;</a></p>
<p>base:南京</p>
<p>求职意向：后端开发、测试</p>
<p>个人总结：</p>
<ul>
<li>大三在读，参加过多项比赛并且获奖</li>
<li>拥有良好的沟通和协调能力，善于应变，能够快速适应新环境</li>
<li>具有团队协作精神，能够承受工作压力，有较高的执行力</li>
<li>曾在工作室的项目中负责的总体规划设计和业务功能开发</li>
<li>熟悉 windows、linux、macOS 三端开发</li>
</ul>
<p>个人网站：<a href="http://harumonia.top/">Zaxon</a></p>
<a id="more"></a>

<h1 id="技能树"><a href="#技能树" class="headerlink" title="技能树"></a>技能树</h1><h2 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h2><ul>
<li>熟练:Python(flask\spider 等)、MySQL</li>
<li>基础:C++、Linux、Java、SQLserver、JavaScript、HTML5、CSS</li>
<li>了解:Redis、C#</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>小工具:Photoshop、Premiere 等常用工具</li>
<li>测试\持续集成:Buddy、Jenkins(学习中)、postman</li>
<li>git</li>
<li>Docker</li>
</ul>
<h1 id="项目经历"><a href="#项目经历" class="headerlink" title="项目经历"></a>项目经历</h1><h2 id="药方拍立得-2019-3-2019-8"><a href="#药方拍立得-2019-3-2019-8" class="headerlink" title="药方拍立得(2019.3-2019.8)"></a>药方拍立得(2019.3-2019.8)</h2><ul>
<li>该项目是 2019 年计算机设计大赛的参赛项目。</li>
<li>我担任的是该项目的队长，负责完成核心的技术工作（数据处理分析，前后端交互，手机端框架搭建，网页端搭建，服务器部署）。</li>
<li>涉及技术:Python(Flask、爬虫、数据分析),mui 框架(移动端),layui 框架+echarts+cytoscape(网页端),MySQL,Linux(部署项目)</li>
</ul>
<h2 id="中医药数据分析平台-2019-12-2020-4"><a href="#中医药数据分析平台-2019-12-2020-4" class="headerlink" title="中医药数据分析平台(2019.12-2020.4)"></a>中医药数据分析平台(2019.12-2020.4)</h2><ul>
<li>这个项目是南京中医药大学医学信息工程创新工作室的主要项目之一，主要对中医药相关数据进行同质与异质的网络分析，并 自动形成图表与书面报告(.docx)</li>
<li>我担任项目经理一职，负责总体的项目进度管理、数据库的设计与开发、后端 api 的设计与开发、算法优化与集成等工作</li>
<li>涉及技术:Python(Flask、数据分析、自动化测试)、easyui(网页端后台)、Linux(部署及运维)、MySQL</li>
<li>涉及知识:Apriori、FP—growth、同质\异质网络、假设检验等</li>
</ul>
<h1 id="荣誉奖项"><a href="#荣誉奖项" class="headerlink" title="荣誉奖项"></a>荣誉奖项</h1><ul>
<li>中国大学生计算机设计大赛国赛二等奖(队长) 2019</li>
<li>蓝桥杯 C/C++程序设计省赛三等奖 2019</li>
<li>全国中医药人工智能创新创业大赛三等奖 2019</li>
<li>江苏省人文社科知识竞赛省优秀奖 2018</li>
<li>南京中医药大学暑期数学建模校赛一等奖(队长) 2018</li>
</ul>
<h1 id="教育经历"><a href="#教育经历" class="headerlink" title="教育经历"></a>教育经历</h1><p>南京中医药大学 人工智能与信息技术学院 2017.9-2021.7</p>
<ul>
<li>GPA：专业前 20%</li>
<li>人民奖学金三等</li>
<li>课程：C/C++、Java、数据结构与算法、计算机组成原理、操作系统、计算机网络</li>
</ul>
<h1 id="社团和组织经历"><a href="#社团和组织经历" class="headerlink" title="社团和组织经历"></a>社团和组织经历</h1><ul>
<li>敬文图书馆自管协会 外联部 普通成员</li>
<li>南京中医药大学党委宣传部 技术助理(勤工助学)</li>
<li>南京中医药大学网络中心 技术助理(勤工助学)</li>
</ul>
<h1 id="技能证书"><a href="#技能证书" class="headerlink" title="技能证书"></a>技能证书</h1><p>英语(CET-6)</p>
]]></content>
      <categories>
        <category>摸摸摸</category>
      </categories>
  </entry>
  <entry>
    <title>wsl2上的jupyter配置</title>
    <url>/some-config-of-jupyter-on-wsl2/</url>
    <content><![CDATA[<p>由于之前疏于对公司电脑上面的 C 盘的管理,它的存储空间不出意外地炸了.</p>
<p>于是就开始了繁琐的清理工作.首先通过 设置 -&gt; 存储 找到 C 盘占用空间的大头.也就是微信文件和 miniconda,微信由于日常的工作联系等积压了大约 5G 左右,miniconda…emmm…8G = =</p>
<p>看了一下,pytorch、tensorflow 等一系列的包、环境,这个手术动起来还是挺麻烦的,牵连太多了.</p>
<p>不过随着工作任务的固定,有些包和环境确实也不需要了,于是就有了接下来的一些迷惑操作.</p>
<a id="more"></a>

<hr>
<p>warning: 2020-12-24 jupyter 发布 3.0 版本,不过该版本尚不稳定,所以建议还是使用 <code>pip install jupyterlab==2.2.9</code> 安装更稳定的 2.x 版本</p>
<hr>
<h2 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h2><p>本来只是打算清理一下各种环境,于是在网上找到了一个邪道的方法.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip freeze <span class="token operator">></span> req.txt
pip uninstall -r req.txt -y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>之所以说邪道,因为这个操作看似合理,实际上直接把我的 miniconda 折腾残了,字面上的意思,损坏了关键文件,打不开了 = =</p>
<p><del>还不如直接删</del></p>
<p>不过再仔细想想,感觉对于现在的工作,miniconda 的各种特性并不是刚需,于是出于释放存储空间的根本目的,直接将 miniconda 连根拔起.</p>
<p>ps. 关于 pip 和 conda 的关系,可以看<a href="https://www.anaconda.com/blog/understanding-conda-and-pip">Understanding Conda and Pip</a></p>
<h2 id="jupyter-lab"><a href="#jupyter-lab" class="headerlink" title="jupyter lab"></a>jupyter lab</h2><p>miniconda 虽然没了,但是一直放在上面的 jupyterlab 还是要用的.</p>
<p>刚入职的时候还是老老实实的 windows 开发,后来入了 wsl 邪教之后开发就全部放在了 wsl 上,于是早期工作相关的会使用 windows,现在工作相关的会使用 wsl,跳来跳去还挺麻烦的,些许的强迫症让我决定就趁着这个机会将早期工作的大头–jupyter,迁移到 wsl 上面.</p>
<p>主要的参考文章 : <a href="https://davidbailey.codes/blog/2020-07-10-setting-up-jupyterlab-on-windows-10">Setting up JupyterLab on Windows 10 with WSL 2</a></p>
<p>然后在实际操作的过程中遇到的问题还挺多,所以在这里重新梳理一下.</p>
<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>当然不能再放在 wsl 原装的 python 上面,不然省个锤子的空间</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 在D盘建立一个虚拟环境 env_jupyter</span>
<span class="token function">mkdir</span> -p /mnt/d/wsl_venv/
<span class="token builtin class-name">cd</span> /mnt/d/wsl_venv/
python3 -m venv env_jupyter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>(可选)为了方便快速进入虚拟环境,可以在 bashrc 或者 zshrc 中加入启动别名(alias)</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">venv_jupyter</span><span class="token operator">=</span><span class="token string">"source /mnt/d/Project/Python/venv_wsl/jupyter/bin/activate"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> jupyterlab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>之后就可以使用 <strong>jupyter lab</strong> 启动了,我这里出现了这样一个错误.</p>
<blockquote>
<p>Start : This command cannot be run due to the error: The system cannot find the file specified.</p>
</blockquote>
<p>原因是确实了配置文件,当然,它是由默认配置的,这个错误并不影响使用,可以使用如下命令解决.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 生成配置文件</span>
jupyter notebook --generate-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="更改启动目录"><a href="#更改启动目录" class="headerlink" title="更改启动目录"></a>更改启动目录</h3><p>我的 jupyter 相关的文件\项目都是集中放在同一个文件夹下,然后使用 git 实现公司\家\服务器的同步的,所以可以直接将启动目录定死.</p>
<p>在 <a href="#%E5%AE%89%E8%A3%85">安装</a> 中生成了配置文件之后,这个文件的位置是 <code>/root/.jupyter/jupyter_notebook_config.py</code>, 可以使用 <em>vim</em> 或者 <em>vs code(<code>code .</code>)</em> 等手段编辑.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">## The directory to use for notebooks and kernels.</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>notebook_dir <span class="token operator">=</span> <span class="token string">'/mnt/d/Project/myLearnningLab/jupyter/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="直接打开浏览器"><a href="#直接打开浏览器" class="headerlink" title="直接打开浏览器"></a>直接打开浏览器</h3><p>这里参考了 <a href="https://github.com/jupyter/notebook/issues/4594">Launching notebook to browser on WSL</a></p>
<p>先使用 <code>ln -s /mnt/c/Program\ Files\ \(x86\)/Google/Chrome/Application/chrome.exe /usr/bin/chrome</code> 建立 chrome 的软路由.(将 <em>/mnt/c/…/chrome.exe</em> 替换成自己的浏览器安装路径,此步骤忽略则将下述 <code>chrome</code> 变更为浏览器安装路径 )</p>
<p>然后直接将如下代码加入配置文件即可.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> webbrowser
webbrowser<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token string">'chrome'</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">,</span>webbrowser<span class="token punctuation">.</span>GenericBrowser<span class="token punctuation">(</span><span class="token string">'/usr/bin/chrome'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
c<span class="token punctuation">.</span>NotebookApp<span class="token punctuation">.</span>browser <span class="token operator">=</span> <span class="token string">'chrome'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="可能会出现的问题"><a href="#可能会出现的问题" class="headerlink" title="可能会出现的问题"></a>可能会出现的问题</h4><p>无法定向到 <a href="http://localhost:8888/?token=%5C*%5C*%5C*%5C*">http://localhost:8888/?token=\*\*\*\*</a> ,而是出现了如下的字样,然后浏览器打开定向到文件路径.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">To access the notebook, <span class="token function">open</span> this <span class="token function">file</span> <span class="token keyword">in</span> a browser:
    file:///cygdrive/c/home/.local/share/jupyter/runtime/nbserver-1003-open.html<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这个时候将 <em>jupyter_notebook_config.py</em> 中的 <code>use_redirect_file</code> 值改为 <strong>False</strong> .</p>
<h3 id="解除-root-限制"><a href="#解除-root-限制" class="headerlink" title="解除 root 限制"></a>解除 root 限制</h3><p>到这里,jupyter 依然运行不了,提示 <code>Running as root is not recommended. Use --allow-root to bypass.</code></p>
<p>可以直接将启动命令变更为 <code>jupyter lab --allow-root</code></p>
<p>也可以在配置文件中将 <code>c.NotebookApp.allow_root</code>的值变更为 <em>True</em></p>
<h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>至此,配置完成.</p>
<p>之前在 windows 上面的 jupyter 问题多多,最典型的就是某些插件无法安装,比如我喜欢的主题 <em>jupyterlab-theme-solarized-dark</em> ,更换成 wsl 之后这些问题就不存在了~</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>WSL</category>
      </categories>
      <tags>
        <tag>wsl</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库中的.frm\.myi\.myd文件</title>
    <url>/sql-frm-myi-myd-files/</url>
    <content><![CDATA[<p>最近在寻找一些毕设要用到的数据，医药相关的，恰好在某个网站上面找到了备份数据库(手段不太光彩，这里就不细说了)，省去了写爬虫的麻烦。</p>
<p>不过这些备份文件是 <em>.MYD / .MYI / .frm</em> 这样的后缀，emmmmm，对于用惯了 <em>.sql</em> 的我来说，还是很头大的。</p>
<p>本篇的主要内容就是如何使用 <em>.frm / .MYI / .MYD</em> 文件来恢复数据库，同时，做了一些关联的延申。</p>
<a id="more"></a>

<h2 id="恢复文件"><a href="#恢复文件" class="headerlink" title="恢复文件"></a>恢复文件</h2><p>直接先 po 出我恢复文件的方法。这里需要根据 mysql 的版本不同分一下情况。</p>
<h3 id="5-x"><a href="#5-x" class="headerlink" title="5.x"></a>5.x</h3><p>对于 <strong>mysql5.x</strong> 来说，恢复文件就是直接把 <em>.MYD / .MYI / .frm</em> 文件放到 mysql 的 data\数据库 文件夹下面就行了。</p>
<p>这里提供一下默认情况下 mysql 的 data 文件夹路径:</p>
<ul>
<li>Windows : C:\ProgramData\MySQL\MySQL Server 8.0\Data\数据库名</li>
<li>Linux : /var/lib/mysql/数据库名</li>
<li>macos : 如果我的 mac 还在的话就不会知道 Windows 的路径了= =</li>
</ul>
<p>移动完文件之后刷新一下数据库就能看到了。</p>
<h3 id="8-x"><a href="#8-x" class="headerlink" title="8.x"></a>8.x</h3><p>我的 Windows 上使用的就是 <strong>mysql8.0</strong>, 5.x 的恢复方法在 8.x 上面是行不通的，最简单粗暴的办法就是再装一个 5.x.</p>
<p>考虑到平时基本上不会用 5.x 版本的 mysql，所以选择使用 docker 部一个临时性质的 mysql。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 获取5.7镜像</span>
docker pull mysql:5.7.16

<span class="token comment"># 运行</span>
<span class="token comment"># -e 指定 mysql 的密码</span>
<span class="token comment"># 默认的 3306 端口被 mysql8.0 占用了，所以映射到 3308 端口</span>
docker run --name<span class="token operator">=</span>mysql1 --restart on-failure -p <span class="token number">3308</span>:3306 -e <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> -d mysql:5.7.16

<span class="token comment"># 将备份数据放入docker - container 数据库</span>
docker <span class="token function">cp</span> 备份数据 mysql1:/var/lib/mysql/数据库名/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样，通过 <em>mysql workbench</em> 或者 <em>navicat</em> 之类的 GUI 就可以看到数据了。之后是同步到 8.0 还是直接导出就自己选择了。</p>
<p><img src="https://picgo-zxj.oss-cn-shanghai.aliyuncs.com/image-20201207214445489.png" alt="image-20201207214445489" loading="lazy"></p>
<h2 id="延申"><a href="#延申" class="headerlink" title="延申"></a>延申</h2><p>延申中主要了解了如下的内容.</p>
<p>mysql 的两大常用存储引擎 <strong>MyISAM</strong> 和 <strong>InnoDB</strong> 的区别在哪里？</p>
<p>为什么一定要在 5.x 版本的 MyISAM 中恢复？可不可以直接在 8.x 版本的 MyISAM 中恢复？</p>
<p>是否可以通过挂载数据盘来简化上述的<em>8.0</em>版本的操作?</p>
<h3 id="为什么是-MYD-MYI-frm"><a href="#为什么是-MYD-MYI-frm" class="headerlink" title="为什么是.MYD/.MYI/.frm"></a>为什么是.MYD/.MYI/.frm</h3><p>数据库存在多种存储引擎，每个引擎有着不同的特性。<em>.MYD/.MYI/.frm</em> 对应的是 <strong>MyISAM</strong> 引擎.</p>
<p>每个文件的作用如下</p>
<ul>
<li>.frm（存储表定义）</li>
<li>.MYD（MYData，存储数据）</li>
<li>.MYI（MYIndex，存储索引）</li>
</ul>
<p>数据文件和索引文件可以放置在不同的目录，平均分布 IO，获得 <strong>更快的速度</strong> 。更快的访问速度，这就是 MyISAM 这个引擎的特点。</p>
<p>同样一个常见的存储引擎就是 <strong>InnoDB</strong> .InnoDB 存储引擎提供了具有提交、回滚和崩溃恢复能力的 <em>事务</em> 安全。但是对比 MyISAM 的存储引擎，InnoDB 写的处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引。同时,MySQL 支持外键的存储引擎 <strong>只有</strong> InnoDB.</p>
<p>以上所说的不同就是课本上所讲的 <em>事务与完整性</em> , MyISAM 和 InnoDB 的另一个不同就是 <strong>并发(concurrency)</strong>.使用 MyISAM，DML 语句将在表上获得排他锁，并且在保持该锁的同时，没有其他会话可以在表上执行 SELECT 或 DML 操作。</p>
<p>更多的不同点，引用自<a href="https://stackoverflow.com/questions/12614541/whats-the-difference-between-myisam-and-innodb">What’s the difference between MyISAM and InnoDB?</a></p>
<p>MYISAM:</p>
<ol>
<li>MYISAM supports Table-level Locking</li>
<li>MyISAM designed for need of speed</li>
<li>MyISAM does not support foreign keys hence we call MySQL with MYISAM is DBMS</li>
<li>MyISAM stores its tables, data and indexes in diskspace using separate three different files. (tablename.FRM, tablename.MYD, tablename.MYI)</li>
<li>MYISAM not supports transaction. You cannot commit and rollback with MYISAM. Once you issue a command it’s done.</li>
<li>MYISAM supports fulltext search</li>
<li>You can use MyISAM, if the table is more static with lots of select and less update and delete.</li>
</ol>
<p>INNODB:</p>
<ol>
<li>InnoDB supports Row-level Locking</li>
<li>InnoDB designed for maximum performance when processing high volume of data</li>
<li>InnoDB support foreign keys hence we call MySQL with InnoDB is RDBMS</li>
<li>InnoDB stores its tables and indexes in a tablespace</li>
<li>InnoDB supports transaction. You can commit and rollback with InnoDB</li>
</ol>
<h3 id="为什么不能在-8-x-版本的-MyISAM-中恢复"><a href="#为什么不能在-8-x-版本的-MyISAM-中恢复" class="headerlink" title="为什么不能在 8.x 版本的 MyISAM 中恢复"></a>为什么不能在 8.x 版本的 MyISAM 中恢复</h3><p>存储文件的差异不仅存在于不同的物理引擎之间，使用不同版本的 MySQL，即使是相同的存储引擎，也会有存储文件上的差异。</p>
<p>从<a href="https://dev.mysql.com/doc/refman/8.0/en/data-dictionary-file-removal.html">Removal of File-based Metadata Storage</a>可以看到，作为存储表定义的 <em>.frm 文件</em> 已经遭到了废弃，这也是为什么我无法在 8.x 的 MyISAM 中直接恢复数据库。</p>
<p>这种备份实在是坑人坑己。大概一年之前，我大部分的开发都是无脑选择的 mysql5.6，最主要的原因就是引用参考的很多代码都是 5.6 的数据库，学校教的数据库也是老版本的。不过随着技术见闻日渐增长，也逐渐开始使用更新版本的 mysql8.0.如果我也是像这位网站管理一样使用这种备份方式，那么”恢复以前那么多数据库”这件事情的工作量就足够我放弃拥抱新技术，继续坐守 5.6 了。</p>
<h4 id="数据库备份法"><a href="#数据库备份法" class="headerlink" title="数据库备份法"></a>数据库备份法</h4><p>毫无疑问这种备份法不值得提倡。那么如何正确地备份数据库呢？</p>
<blockquote>
<p>If we had to avoid the command line always, we would never have made it to the moon. Either get another astronaut or train harder.</p>
</blockquote>
<p>在 <a href="https://dev.mysql.com/doc/refman/8.0/en/using-mysqldump.html">7.4 Using mysqldump for Backups</a> 有提到的一种备份法,就是将数据库变成 sql 文件来保存。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 将tcm_web数据库备份到tcm_web.sql文件</span>
mysqldump -u root -p tcm_web <span class="token operator">></span> tcm_web.sql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这样做的最大的好处就是通用.上述的版本与物理引擎,都可以使用 sql 文件来恢复,并且恢复也就是一行命令的事情.</p>
<p>其次的一个好处就是,在一定程度上避免了考虑数据库的运行状态.这与其说是 mysqldump 的好处,不如说是直接复制文件的坏处.如果在删除数据库的地方发生了什么，或者在主数据库上执行了其他有害的 SQL，该怎么办？这些语句将复制到从属服务器并执行相同的操作，从而无法回滚到事件发生之前的某个时刻.</p>
<p>最后的一个好处就是简单方便.不需要去寻找数据库的 data 文件夹在哪里,也不需要复制粘贴各种调试,直接一行命令完成备份,一行命令完成恢复~</p>
<h3 id="“cant-change-permissions-of-ca-key-pem”的解决方法"><a href="#“cant-change-permissions-of-ca-key-pem”的解决方法" class="headerlink" title="“cant change permissions of ca-key.pem”的解决方法"></a>“cant change permissions of ca-key.pem”的解决方法</h3><p>在<a href="#8.x">8.x 的文件恢复</a> 中，我是用的是从 host 拷贝文件到 container 的方法。后来觉得这个方法太麻烦，而且以后如果想要从 container 中取出文件也要经过一堆的操作命令。</p>
<p>于是就用 docker 的 -v 参数，挂载 host 的文件夹到 container.</p>
<p>这里引发了一个 Windows 特有的错误。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 运行的日志如下</span>
<span class="token number">2020</span>-12-07T13:04:27.056363Z <span class="token number">0</span> <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option <span class="token punctuation">(</span>see documentation <span class="token keyword">for</span> <span class="token function">more</span> details<span class="token punctuation">)</span>.
<span class="token number">2020</span>-12-07T13:04:27.064426Z <span class="token number">0</span> <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Setting <span class="token assign-left variable">lower_case_table_names</span><span class="token operator">=</span><span class="token number">2</span> because <span class="token function">file</span> system <span class="token keyword">for</span> /var/lib/mysql/ is <span class="token keyword">case</span> insensitive
<span class="token number">2020</span>-12-07T13:04:32.266049Z <span class="token number">0</span> <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> InnoDB: New log files created, <span class="token assign-left variable">LSN</span><span class="token operator">=</span><span class="token number">45790</span>
<span class="token number">2020</span>-12-07T13:04:32.967320Z <span class="token number">0</span> <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> InnoDB: Creating foreign key constraint system tables.
<span class="token number">2020</span>-12-07T13:04:33.077801Z <span class="token number">0</span> <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> No existing UUID has been found, so we assume that this is the first <span class="token function">time</span> that this server has been started. Generating a new UUID: bfe2230e-388c-11eb-93e3-0242ac110002.
<span class="token number">2020</span>-12-07T13:04:33.132017Z <span class="token number">0</span> <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Gtid table is not ready to be used. Table <span class="token string">'mysql.gtid_executed'</span> cannot be opened.
mysqld: Can<span class="token string">'t change permissions of the file '</span>ca-key.pem' <span class="token punctuation">(</span>Errcode: <span class="token number">1</span> - Operation not permitted<span class="token punctuation">)</span>
<span class="token number">2020</span>-12-07T13:04:33.350597Z <span class="token number">0</span> <span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Could not <span class="token builtin class-name">set</span> <span class="token function">file</span> permission <span class="token keyword">for</span> ca-key.pem
<span class="token number">2020</span>-12-07T13:04:33.350619Z <span class="token number">0</span> <span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> Aborting<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>主要就是权限的问题，这里需要挂载到 Windows 上面的文件夹的读写权限，偏偏 windows 的授权策略还挺麻烦的。</p>
<p>最后我在 GitHub 上面找到了<a href="https://github.com/docker-library/mysql/issues/302">解决方案</a>。</p>
<blockquote>
<p>I tried what you suggested <a href="https://github.com/yosifkit">@yosifkit</a>, but no luck. Eventually, I changed the image version to <code>mysql:5.7.16</code> and now it is working fine. Sorry to disappoint you 😞</p>
</blockquote>
<p>于是将版本换成 5.7.16，成功运行。</p>
<p>此时，进入到挂载数据盘的文件夹，container 中的数据就可以直接在 host 里面访问到了。(tcm_web 就是我备份的数据库文件夹)</p>
<p><img src="https://picgo-zxj.oss-cn-shanghai.aliyuncs.com/image-20201207215507998.png" alt="image-20201207215507998" loading="lazy"></p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>本来只是想记录一下 mysql 文件恢复的解决方案,不过后来发散开来,又查阅了很多的资料,才有了这一篇博客.(还是闲的~)</p>
<p>其实还有一些坑没有填上,比如在实际操作的过程中,我发现<strong>5.7</strong>的 data 文件夹内容结构和<strong>5.7.16</strong>的内容有些差距,这种情况的成因是什么?</p>
<p>这样发散下去是没有止境的,我所掌握的永远都只在圆圈以内罢了.</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>DataBase</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>大学生活阶段性小结</title>
    <url>/upon-graduation/</url>
    <content><![CDATA[<p>醉花阴 - 满船清梦</p>
<p>红山微雨凉初透, 孤帆见重楼. 金陵一樽酒, 栏干拍遍, 难解少年愁.<br>杏坛归离芒种后, 三尺决九州. 还酹江天月, 醉里挑灯, 共此韶华旧.</p>
<p>– harumonia, 二〇二一年六月, 于南京中医药大学</p>
<a id="more"></a>

<h2 id="大学"><a href="#大学" class="headerlink" title="大学"></a>大学</h2><p>“我的大学”, 这是一段很漫长的故事了, 从 2017 年 9 月一个人背着沉重的行李, 怀揣满身的失意来到这里, 到现在我安安静静地坐在这里写下这段文字, 中间已经过去了 4 年. 再回首, 不免又生出”往事已矣”之嗟叹, 而历历往事, 其中的苦乐, 又仿佛是在昨日.</p>
<h3 id="军训"><a href="#军训" class="headerlink" title="军训"></a>军训</h3><p>军训作为这段生活的第一页, 还是有很多有趣的回忆的.</p>
<p>自初中 <em>CGL</em> 病愈之后, 我一直体弱, 对于这种重体力的活动, 我一向是敬而远之的. 而大学, 也许是为了翻开人生的新篇, 又或许是对过去与未来的自弃, 我跟着新同学们军训了一段时间. 理所当然的, 后来申请了免训, 这毕竟不是什么热血少年漫, 终究是要以生命安全为第一要务.</p>
<p>在此之后, 当然也没有闲着, 除了应付每日的通讯稿额度, 剩下大把的时间还是用来做我最喜欢的事情 – 看书. 在这期间, 我看完了两本书, 一本是延续了中学时期的惯性所选择的东野圭吾的&lt;白夜行&gt;, 另一本则是出于纯粹的兴趣爱好所选择的&lt;计算机组装与维修&gt;(事实证明这本书最终并没有在我的大学生涯中起到任何作用= =).</p>
<p>军训期间另一个值得一说的, 我找了第一份兼职工作 – 在学校网络中心担任学生助理. 找兼职的原因很纯粹, 贫穷. 彼时的我沉迷于 <em>FGO</em> – 当然现在也是 – 并且常有氪金, 而这种娱乐性质的开销又羞于向父母开口, 所以便自己自力更生.</p>
<h3 id="大一"><a href="#大一" class="headerlink" title="大一"></a>大一</h3><p>大一唯一值得称道的大概就是我利用周末的时间广游了南京一地的人文胜地. 中山陵及其周边 \ 总统府 \ 栖霞山 \ 灵谷寺 \ 牛首山等, 这些大多是一个人的旅行, 少数是与高中的几位好友邀约, 个中趣味, 不足为外人道哉. 这其中的一个有趣的插曲就是, 2018 年的元旦, 与徐君等人的紫金山跨年,虽然最后没有看到日出(阴天去看日出?), 却也是一大乐事.</p>
<p>除去上述, 我的大一与寻常学生并无二致, 就是宿舍\食堂\教学楼, 三点之间来回周转. 这段时间课业较轻,一鼓作气冲完了四六级之余尚有闲暇, 所以又找了一份图书馆的兼职(逐渐化身打工战士), 而在图书馆中,我读完了 <em>Ken Follett</em> 的 <strong>世纪三部曲</strong> 中的 &lt;巨人的陨落&gt; 与 &lt;世界的凛冬&gt;, 黄仁宇的&lt;万历十五年&gt;, 亦有东野圭吾的&lt;假面山庄&gt;等小说若干, 当然, 由于工作地点是医学库, 所以也读了很多医学类的书籍, 其中有得知何君患病后, 读&lt;内科学&gt;等著作, 不甚了了, 而后转读&lt;内经&gt;等, 深感医学之博大. 至于哲学方面, 则是读了南怀瑾的&lt;禅宗与道家&gt;, 其内容与冯友兰的&lt;中国哲学简史&gt;中相互印证之处, 读之有 “恺之食甘蔗” 之妙.</p>
<p>至于专业, 说来有趣, 我在课余所接触到的第一门语言便是 Python, 而这契机便是想从 <em>Pixiv</em> 上面爬取一些漂亮的图片, 当时用 <em>selenium</em> 做了很笨重的一个爬虫, 不过效果确实不错, 而为了访问 <em>Pixiv</em>, 我又租了国外的 VPS 若干, 其中又被迫掌握了 Linux 的常规使用技巧和养成了用 <em>Google</em> 搜索的习惯. 这段历史也有几篇博客留存, 不过其中内容现在看来颇为青涩, 便将其置为隐藏, 以免对其他初学者产生误导.</p>
<p>比赛方面, 这一学年似乎就报了两个比赛, 一个是 <em>人文社科知识竞赛</em>, 差不多类似于 <em>千分题</em>, 是文科类型的知识竞赛, 而文史又恰是我所长, 最终获得了江苏省的优秀奖(具体成绩是前 3%, 更具体的就没有显示了). 另一个是和陆君及王君参加的暑期数学建模培训, 最终赛题是 “垃圾短信分类”, 虽然我的看家功夫”爬虫”没有爬上用场, 不过其伴生的”数据收集”能力确实大放异彩, 而 python 亦是作为主力的编程语言助力良多, 最终这个比赛获得的是校赛的一等奖(应该是唯一的?).</p>
<h3 id="大二"><a href="#大二" class="headerlink" title="大二"></a>大二</h3><p>大二出现了这段平静生活的第一个转折点, 那就是本科导师. 严格来说我并没有达到选择本导的要求, 由于大一下沉迷各种奇技淫巧, 成绩自然也有所下滑(当然体育成绩被记了 0 分才是大头= =, 不过比起撞钟的老师和水课的学生, 还是将时间投入到自己的爱好上更有意义). 不过大一上过杨涛老师的网络基础课, 于是尝试性的发了一个申请 ,我更愿意称之为是一个巧合, 这个申请作为众多申请中仅有的一例通过了.</p>
<p>进入杨老师的工作室之后, 原有的生活节奏自然也被打乱了. 由于每周都有一次汇报, 技术的学习终归是有了一个比较明确的方向, 还记得我的第一次汇报就是网络爬虫, 似乎还和小汪学姐的汇报撞车了(笑. 后来, 为了获得更多的空余时间, 我辞去了网路中心学生助理一职, 只留了图书馆的兼职, 毕竟这个职位附赠一个图书馆工位, 座位资源在图书馆旺季还是很珍贵的.</p>
<p>也是这个学年, 我学习了 Python 的 Web 开发技术, 三脚猫的功夫, 却被误认为是”大佬”, 因此开始了生活节奏极度混乱的大二第二学期. 这一学期先是报了学校举办的软信大赛, 然后成功突围参加了蓝桥杯程序设计大赛. 而后又被许君和唐君拉去参加了大学生计算机设计大赛, 还有大创(大创我也就前期改了改文档, 而真正的技术方面, 反而是没有起到太大的帮助), 整个大二下几乎就是围绕着”大学生计算机设计大赛”在转, 我们的选题是”药方拍立得”, 从确定选题的 3 月 14 日起, 花了一周的时间开发出了一个移动应用和配套的后端, 怎么说呢, deadline 是人类的第一生产力, 全心全力扑在技术上的结果就是, 校赛突围, 并且对整个 Python 的开发体系有了长足而深刻的认识.</p>
<p>之后是省赛, 省赛并没有添加什么新的功能, 只是将原有的功能进行了优化, 而这个省赛的时间点又与”蓝桥杯”省赛的时间点重合, 自然又是一阵昏天黑地的忙碌. 省赛最后是在徐州举办, 实打实的享受了一趟”公款旅行”, 这个倾注了我前前后后两个月心血的作品最终也不负众望地从省赛突围.</p>
<p>省赛之后就要开始准备各科的期末了, 又是一段疲于奔命的时光, 这里就不细表了. 期间抽空与高君前往鸡鸣寺赏樱, 却是错过了花期, 转又往玄武湖一游, 颇得王徽之”乘兴而来, 兴尽而返”之远意.</p>
<p>再后来是暑期工作室集训, 我有幸被杨老师任命为 17 级的领头人, 负责协助他对同学们进行技术方面的培训. 教学相长, 这一过程中我对于项目管理\实施等书本上的纯粹理论进行了实践, 亦有所收获. 并且这也使我与工作室其他诸君愈发熟稔.</p>
<p>大二下的句号划在了安徽芜湖, 这里是国赛的举办地, 在这里我获得了大学阶段的第一个国奖.</p>
<p>大二所读之书多集中于技术方面, 小说读有米泽穗信的&lt;冰菓&gt;, 文学类读有余秋雨的几篇名作, 社科类则是读了吴军的&lt;文明之光&gt;和 Yuval Noah Harari 的&lt;人类简史&gt;, 俱是佳作, 其余诸书不表.</p>
<p>大二所获之奖甚多, 包括人奖在内, 诸多奖项也算是不负这一年来的忙碌.</p>
<h3 id="大三"><a href="#大三" class="headerlink" title="大三"></a>大三</h3><p>大三之初, 中秋节, 被陶君与于君拉过去参加数学建模, 这是我大学来的第一次通宵, 其演算的结果也颇令我与指导老师沈老师满意, 而最终比赛成绩名落孙山, 着实是一个很大的打击.</p>
<p>而后十月份, 又被杨老师委派去参加在安徽中医药大学举办的”全国中医药人工智能大赛”, 比起最终的奖项, 与工作室诸君的回忆, 沿途安徽地区的人文景观, 还算不错的伙食, 这些才是更大的收获.年末,与陶君确认恋人关系至今. 元旦又与徐君一道, 去尝试了价格较为昂贵的”虹料理”, 一顿差不多是我勤工助学两个月的收入, 不过吃得也的确尽兴.</p>
<p>大三就没有再去参加多少比赛了, 转而开始找工作. 通过了阿里的笔试, 败于面试. 在 LeetCode 上面刷了不少的题目, 参加了一些的线上比赛. 后来又投了三份简历, 一份是医学图像岗, 一份是数据技术岗, 一份是后端开发岗, 最终数据技术岗和后端开发岗进入最终轮面试, 而由于数据技术岗公司更加成熟,规模更大, 于是放弃了薪资更高的后端开发岗.</p>
<p>由于疫情的原因, 大三的寒假得以好好地在家里沉淀过往之所学, 期间产出博客数篇, 俱无问津者.</p>
<h3 id="大四"><a href="#大四" class="headerlink" title="大四"></a>大四</h3><p>大四的大部分时间都是在启信宝苏州部进行实习, 期间发生趣事多为社会之事, 与本篇主旨无关, 故不表.而与学习生活相关的, 在这段时间, 我对技术进行了深化, 并且以此为基开始了我的毕业设计.</p>
<p>而后大四下学期, 四月份中旬, 返回学校, 开始正式完善毕业设计的算法模块, 这是一个完成度比较高的毕业设计, 也是整个大学以来我最满意的独立项目. 最终这个毕设的综合评分是 94 分, 我不知道这个成绩排名如何, 想来也是不错的.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大学这四年, 大一如春之深林, 大二如秋之硕果, 大三如冬之莽原, 大四如夏之虫鸣, 俱是佳季, 各有风骚.</p>
<p>这四年来, 干过一些年少轻狂的事情, 也写过一些无病呻吟的文字, 但总的来说, 印证了那句老话, “不因虚度度年华而悔恨，也不因碌碌无为而羞愧”, 谨以此篇, 以作激励, 希望在大学之后的生活, 同样能够活出自己的精彩.</p>
<p>2021.6 于南京中医药大学</p>
]]></content>
      <categories>
        <category>起居杂录</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么 mongodb 使用 ObjectId,  而 Mysql 使用自增 id</title>
    <url>/why-mongo-use-object-id/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先需要说明的一点是, 本篇并不是为了讨论 ObjectId 和自增 id 谁更好用.在笔者看来, 文档型数据库和关系型数据库的使用场景不同, 有不同的使用倾向是理所当然的事情, 没有必要拉到一块儿”关公战秦琼”.</p>
<p>本篇单从设计的角度来说, 为什么 ObjectId 和 自增 id 分别使用于各自的使用场景.</p>
<a id="more"></a>

<h2 id="MySql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h2><p>在讨论 mysql 为什么使用自增 id 为主键之前, 有一个问题, mysql 有哪些主键选择.</p>
<p>在常规的数据库中, 主键存在两种选择, 也就是 auto-increment (int\bigint) 和 uuid (Universally Unique Identifier) (varchar).</p>
<h3 id="自增主键"><a href="#自增主键" class="headerlink" title="自增主键"></a>自增主键</h3><p>自增主键用来为新的数据项生成一个在数据表中唯一的 id.</p>
<p>在数据表中的数据量膨胀到一个峰值时, 需要对数据表进行分片, 而分片很容易就会导致数据表的自增 id 不再唯一.</p>
<h4 id="引申-自增主键的数值极限"><a href="#引申-自增主键的数值极限" class="headerlink" title="引申: 自增主键的数值极限"></a>引申: 自增主键的数值极限</h4><p>先说结论, <strong>实际使用基本上达不到自增主键的极限</strong> .</p>
<p>自增主键一般选用三个类型, int、unsigned int、bigint.</p>
<p>int 的取值范围是 0~2147483648, unsigned 是其两倍.</p>
<p>寻常单数据库在达到这个数量级之前, 存储空间就要告急了, 这种情况下, 一般会选择进行分库分表, 而分库分表之后, 再想要使用自增主键, 就需要进行一系列严格的规划设计.通常, 我们会改用下文的 UUID 来作为主键.</p>
<h3 id="UUID-主键"><a href="#UUID-主键" class="headerlink" title="UUID 主键"></a>UUID 主键</h3><p>UUID 同样是一个唯一的 id, 它的唯一不再局限于数据表, 而是在 “整个宇宙” 中都独一无二.</p>
<p>这种说法当然有欠考虑, UUID 不是”绝对”的唯一, 但是在日常的使用中可以将其看作绝对唯一.它的这个特性可以用来解决分布式数据库中的 <em>主键唯一性</em> 问题.</p>
<p>但是 UUID 的缺点也很明显.</p>
<ol>
<li>查找效率</li>
<li>占用更多的存储空间</li>
<li>排序问题</li>
<li>插入操作时性能很低</li>
</ol>
<h4 id="查找效率"><a href="#查找效率" class="headerlink" title="查找效率"></a>查找效率</h4><p>最直观的看, 相比起 <em>1, 2, 3</em> 这样简单的数字, 36 位的 UUID 在做查找时显然更加吃力.当然我们所说的查找效率并不会如此肤浅.</p>
<p>由于主键天然就是索引, 所以在大量数据的情况下做准确查找(=)时, 二者的查找效率相差并不明显.但是在做模糊查找(LIKE)时, 自增 ID 的效率会高于 UUID.</p>
<h4 id="占用更多的存储空间"><a href="#占用更多的存储空间" class="headerlink" title="占用更多的存储空间"></a>占用更多的存储空间</h4><ul>
<li><p>UUID 本身占用的存储空间是自增 id 的 4 倍. (varchar(32) vs bigint)</p>
</li>
<li><p>根据 UUID 所建立的索引也会占用更多的存储空间.</p>
</li>
</ul>
<p>二者结合起来, 存储空间的差距可以看一下 <a href="#UUID%E5%92%8C%E8%87%AA%E5%A2%9EID%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E5%AF%B9%E6%AF%94">UUID 和自增 ID 存储空间对比</a></p>
<h5 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h5><p>针对存储空间的一个优化, 就是使用 binary UUID, 在 MySQL 中自带一个将 UUID 从 varchar 转换为 binary 的函数 – UUID_TO_BIN(), 同样, 可以使用 BIN_TO_UUID() 来逆向这个过程.</p>
<h4 id="排序问题"><a href="#排序问题" class="headerlink" title="排序问题"></a>排序问题</h4><p>自增 id 能够直接用来进行排序, 但是 UUID 显然不具备这个特性.</p>
<h4 id="插入效率"><a href="#插入效率" class="headerlink" title="插入效率"></a>插入效率</h4><p>在讨论插入效率之前, 先要理解一个概念, Innodb 的页是什么.</p>
<blockquote>
<p>Page 是 Innodb 存储的最基本结构, 也是 Innodb 磁盘管理的最小单位, 与数据库相关的所有内容都存储在 Page 结构里.</p>
</blockquote>
<p>当插入一个新的 UUID 主键数据时, InnoDB 会查找应该将这个行放置在哪个数据页中, 如果数据页不再缓存中, 则会将这张数据页加载进来.也就是说, 当插入这样一条新的数据时, 整个 B 树都会受到影响, 这也是 UUID 插入效率低下的本质原因.</p>
<p>关于 UUID 和自增 ID 的插入效率, 在下文中同样有实践比较.</p>
<h3 id="UUID-和自增-ID-存储空间对比"><a href="#UUID-和自增-ID-存储空间对比" class="headerlink" title="UUID 和自增 ID 存储空间对比"></a>UUID 和自增 ID 存储空间对比</h3><p>这里列出了新建一张一万条数据的数据表时, UUID、BIN-UUID 和 auto-increment 三者的存储空间、插入时间对比.</p>
<p>相关的代码可见于<a href="#SQL">附录</a>.</p>
<table>
<thead>
<tr>
<th>TABLE_NAME</th>
<th>DATA</th>
<th>TIME(sec)</th>
</tr>
</thead>
<tbody><tr>
<td>test_for_auto_increment</td>
<td>0.33MB</td>
<td>77.594</td>
</tr>
<tr>
<td>test_for_uuid</td>
<td>1.52MB</td>
<td>80.000</td>
</tr>
<tr>
<td>test_for_uuid_bin</td>
<td>0.45MB</td>
<td>74.250</td>
</tr>
</tbody></table>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>自增 id 有着极高的性能与使用效率, 并且足够应付绝大多数的情境.而 UUID 虽然有诸多的缺点, 但是天然适合分布式这样的业务情境.</p>
<p>除了 UUID 之外, 还有其他的, Nature Key、snowflake 等算法能够生成 varchar 类型的主键, 它们的缺点大同小异, 不过都在 UUID 的基础上有了不同方向、不同程度的优化.</p>
<p>在大二为 xminer 设计数据库时, 导师让我将主键更改为 UUID, 彼时对这种主键惊为天人, 不过在现在看来, 实在是没有什么必要 😉.</p>
<h2 id="Mongodb"><a href="#Mongodb" class="headerlink" title="Mongodb"></a>Mongodb</h2><p>现在将视角返回到 MongoDB, MongoDB 采用的是 ObjectID 作为“主键”.</p>
<blockquote>
<p>ObjectIds are small, likely unique, fast to generate, and ordered</p>
</blockquote>
<p><em>unique</em> 这个特性是否能让你回想起之前提到的 UUID? 根据这个特性, 它的一个作用就明显了, <em>有利于分布式</em>.</p>
<p>文档型数据库海纳百川, 没有硬性的数据结构需求, “啥都可以往里面填” 的结果就是, 文档型数据库往往对应了很大的数据量以及高并发的业务需求.这也是 MongoDB 采用这种近乎唯一的 id 作为默认主键的原因.</p>
<p>虽然早早地就抛出了它的作用, 不过我们最好还是更加深入地了解以下, <strong>什么是 ObjectID</strong>.</p>
<h3 id="ObjectID"><a href="#ObjectID" class="headerlink" title="ObjectID"></a>ObjectID</h3><p>从<a href="https://docs.mongodb.com/manual/reference/method/ObjectId/">官方文档</a>来看, <code>ObjectId</code> 由以下的部分组成.</p>
<ul>
<li>a 4-byte timestamp value, representing the ObjectId’s creation, measured in seconds since the Unix epoch</li>
<li>a 5-byte random value</li>
<li>a 3-byte incrementing counter, initialized to a random value</li>
</ul>
<p>在 MongoDB 2.x 的版本中, 第二点的 5-byte 又可以细分为</p>
<ul>
<li>a 3-byte machine identifier</li>
<li>a 2-byte process id</li>
</ul>
<p>正因为<code>ObjectID</code>将时间戳纳入主键生成的范围, mongoDB 可以使用如下命令实现按入库的顺序逆序排列, 并且性能效率要比的查找排序要高很多.</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">db.getCollection<span class="token punctuation">(</span><span class="token string">'collection_name'</span><span class="token punctuation">)</span>.find<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>.sort<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token variable">$natural</span>:-1<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>.limit<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://orangematter.solarwinds.com/2019/12/22/what-is-mongodbs-id-field-and-how-to-use-it/">What Is MongoDB’s _id Field and How to Use It</a></li>
<li><a href="https://www.mysqltutorial.org/mysql-uuid/">MySQL UUID Smackdown: UUID vs. INT for Primary Key</a></li>
<li><a href="https://blog.pythian.com/case-auto-increment-mysql/">THE CASE AGAINST AUTO INCREMENT IN MYSQL</a></li>
<li><a href="https://mareks-082.medium.com/auto-increment-keys-vs-uuid-a74d81f7476a">auto-increment-keys-vs-uuid</a></li>
<li><a href="https://segmentfault.com/a/1190000008545713">mysql 中 InnoDB 引擎中页的概念</a></li>
</ol>
<h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="UUID-BIN"><a href="#UUID-BIN" class="headerlink" title="UUID_BIN"></a>UUID_BIN</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- drop table &#96;test_for_uuid_bin&#96;;

CREATE TABLE &#96;test_for_uuid_bin&#96;
(
 id BINARY(16) PRIMARY KEY,
    val VARCHAR(255)
);

DELIMITER $$
CREATE PROCEDURE generate_data_uuid_bin()
BEGIN
  DECLARE i INT unsigned DEFAULT 1;
  WHILE i &lt; 10000 DO
    INSERT INTO &#96;test_for_uuid_bin&#96; (&#96;id&#96;, &#96;val&#96;) VALUES (
    UUID_TO_BIN(UUID()),
      ROUND(RAND()*100, 2)
    );
    SET i &#x3D; i + 1;
  END WHILE;
END$$
DELIMITER ;

call generate_data_uuid_bin()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">drop table &#96;test_for_uuid&#96;;

CREATE TABLE &#96;test_for_uuid&#96;
(
 id varchar(36) PRIMARY KEY,
    val VARCHAR(255)
);

DELIMITER $$
CREATE PROCEDURE generate_data_uuid()
BEGIN
  DECLARE i INT unsigned DEFAULT 1;
  WHILE i &lt; 10000 DO
    INSERT INTO &#96;test_for_uuid&#96; (&#96;id&#96;, &#96;val&#96;) VALUES (
      UUID(),
      ROUND(RAND()*100, 2)
    );
    SET i &#x3D; i + 1;
  END WHILE;
END$$
DELIMITER ;

call generate_data_uuid()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- drop table &#96;test_for_auto_increment&#96;;

CREATE TABLE &#96;test_for_auto_increment&#96;
(
 id int auto_increment PRIMARY KEY,
    val VARCHAR(255)
);

DELIMITER $$
CREATE PROCEDURE generate_data_auto_increment()
BEGIN
  DECLARE i INT unsigned DEFAULT 1;
  WHILE i &lt; 10000 DO
    INSERT INTO &#96;test_for_auto_increment&#96; (&#96;val&#96;) VALUES (
      ROUND(RAND()*100, 2)
    );
    SET i &#x3D; i + 1;
  END WHILE;
END$$
DELIMITER ;

call generate_data_auto_increment()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>DataBase</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下的终端优化方案</title>
    <url>/windows-terminal-beautify/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 Mac 上面安装了 <a href="https://www.iterm2.com/">iTerm2</a> 之后，逐渐难以忍受 <em>Windows</em> 上面简陋的终端界面，<strong>CMD</strong> 就不谈了，即使了 Windows10 加入的 <strong>PowerShell</strong> ，也依旧差强人意。</p>
<p>PowerShell 强化了 Windows 命令，并且能够让电脑使用部分的 Linux 命令，这是一个重大的进步。其缺点依旧明显，Linux 命令并不完整，对于习惯了使用 Linux 命令行来实现一些骚操作的人来说，难免有点束手束脚。其次，PowerShell 的界面也不太令人满意。</p>
<p>所以这次按照 <a href="https://docs.microsoft.com/zh-cn/windows/terminal/">Windows Terminal Docs</a> , DIY 一个美观的 Terminal。</p>
<a id="more"></a>

<p><img src="https://picgo-zxj.oss-cn-shanghai.aliyuncs.com/image-20200719204740685.png" alt="图1. 我所期待的界面" loading="lazy"></p>
<center> <u>Figure1</u>:  我所期待的终端界面</center>

<p><img src="https://picgo-zxj.oss-cn-shanghai.aliyuncs.com/image-20200719204803738.png" alt="image-20200719204803738" loading="lazy"></p>
<center> <u>Figure2</u>:  PowerShell所展示的终端界面</center>

<p>这实在是令人难受。</p>
<p>那么，本篇所解决的问题，就是如何在 Windows 中搞一个花哨的命令行界面。</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="解决外观问题"><a href="#解决外观问题" class="headerlink" title="解决外观问题"></a>解决外观问题</h3><h4 id="cmder"><a href="#cmder" class="headerlink" title="cmder"></a>cmder</h4><p>一开始我选择使用 <a href="https://cmder.net/">cmder</a> 来做一个基于 PowerShell 的终端界面。</p>
<p><img src="https://picgo-zxj.oss-cn-shanghai.aliyuncs.com/image-20200719205641389.png" alt="image-20200719205641389" loading="lazy"></p>
<center> <u>Figure3</u>:  cmder所展示的终端界面</center>

<blockquote>
<p>Cmder is a software package created out of pure frustration over the absence of nice console emulators on Windows. It is based on amazing software, and spiced up with the Monokai color scheme and a custom prompt layout, looking sexy from the start.</p>
</blockquote>
<p>但是在我进行一些 DIY 的时候，总是会一些奇奇怪怪的 UI 错误，所以在经历了几次令人迷惑的 bug 之后，我开始寻找其它的替代方案。</p>
<h4 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h4><p><a href="https://www.microsoft.com/zh-cn/p/windows-terminal/9n0dx20hk701?rtc=1&activetab=pivot:overviewtab#">Windows Terminal</a> 是一个官方的 ui 壳子，他所展示的界面如下。</p>
<p><img src="https://picgo-zxj.oss-cn-shanghai.aliyuncs.com/image-20200719210053548.png" alt="image-20200719210053548" loading="lazy"></p>
<center> <u>Figure4</u>:  Windows Terminal所展示的终端界面</center>

<blockquote>
<p>Windows 终端程序是一款新式、快速、高效、强大且高效的终端应用程序，适用于命令行工具和命令提示符，PowerShell 和 WSL 等 Shell 用户。主要功能包括多个选项卡、窗格、Unicode、和 UTF-8 字符支持，GPU 加速文本渲染引擎以及自定义主题、样式和配置。</p>
</blockquote>
<p>在界面上，与 cmder 所展示的极简风格相比，官网这个以基佬紫为基调，模糊透明背景的案例深得我心。于是果断下载下来。</p>
<p>使用的第一体验就是，非常地流畅，软件的本体只有 7M 不到，想要实现案例 UI，似乎是要另外使用一个 colorTool 来完成。这种插件式的构建方式很灵活，但是也很费时间。在大概地折腾了两下之后，它在我心中已经是一个合格 的 cmder 的替代方案了……如果没有遇到下面这位的话。</p>
<h4 id="Terminus"><a href="#Terminus" class="headerlink" title="Terminus"></a>Terminus</h4><p>这是我在 github 上面冲浪的时候无意中发现的一个界面，使用 JavaScript 开发。</p>
<p><img src="https://picgo-zxj.oss-cn-shanghai.aliyuncs.com/image-20200719210434085.png" alt="image-20200719210434085" loading="lazy"></p>
<center> <u>Figure4</u>:  Terminus所展示的终端界面</center>

<blockquote>
<p><strong>Terminus</strong> is a highly configurable terminal emulator for Windows, macOS and Linux</p>
<ul>
<li>Integrated SSH client and connection manager</li>
<li>Theming and color schemes</li>
<li>Fully configurable shortcuts</li>
<li>Split panes</li>
<li>Remembers your tabs</li>
<li>PowerShell (and PS Core), WSL, Git-Bash, Cygwin, Cmder and CMD support</li>
<li>Direct file transfer from/to SSH sessions via Zmodem</li>
<li>Full Unicode support including double-width characters</li>
<li>Doesn’t choke on fast-flowing outputs</li>
<li>Proper shell experience on Windows including tab completion (via Clink)</li>
</ul>
</blockquote>
<p>类似 cmder，这是一个一体化的软件，减少了很多用户可以配置的项目，而添加了一些成熟的配置方案供用户选择。另外，自带 SSH，大概地试了一下，感觉 xshell 也可以雪藏了。</p>
<p>总的来说，Windows Terminal 和 Termius 都能够实现我们的美化 UI 的需求，但是拓展功能方面有很大的差别。</p>
<h3 id="拓展命令行"><a href="#拓展命令行" class="headerlink" title="拓展命令行"></a>拓展命令行</h3><p>虽然 PowerShell 拓展了 windows 的命令行，使其更加接近 Linux，但是终究还是有所差距的。上文所以到的 Terminus 和 Windows Terminal，只是实现了 UI 上的强化，并没有完成命令行的拓展。</p>
<p>本来打算用过 <strong>git bash</strong> 来搞定，但是在 Windows 上依赖 git 附加的 bash，总感觉有点不伦不类的。于是使用 WSL 来搞一点炫酷的事情。</p>
<p>在新的 Windows 正式版本中，已经可以直接使用 WSL 了，记得年前安装 WSL 的时候，只能使用 Windows 先行版本，还为因此出现的各种 bug 头疼了好久。</p>
<p>根据官网的文档，几条命令，再重启一下电脑，就能够使用 wsl2 了。</p>
<p><img src="https://picgo-zxj.oss-cn-shanghai.aliyuncs.com/image-20200719212747796.png" alt="image-20200719212747796" loading="lazy"></p>
<center> <u>Figure5</u>:  Terminus + WSL2 所展示的终端界面</center>

<p>emmmm，有点 Server 的味道了啊。</p>
<p>到这一步，已经实现了 <strong>UI 美化、命令行强化</strong> 的目标。</p>
<p>当然，UI 还能够进一步美化，那就是从内部美化。</p>
<p>这里我选择使用 zsh + ohmyzsh 套餐。</p>
<h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><p>首先，使用如下命令来安装 zsh。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">zsh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后，在 <a href="https://ohmyz.sh/#install">oh-my-zsh</a> 官网的文档上的命令完成安装。</p>
<blockquote>
<p>补充说明：</p>
<ol>
<li>安装过程中会使用到 <em>git</em> ，不过 git 默认安装在 wsl2 的 Ubuntu 中，所以就不用手动再装了。</li>
<li>在下载.sh 文件时，可能会遇到无法连通 github 的情况，可以修改 host，更懒人的办法是，直接把.sh 文件手动 copy 到本地，然后用 sh 命令运行即可</li>
</ol>
</blockquote>
<p><img src="https://picgo-zxj.oss-cn-shanghai.aliyuncs.com/image-20200719214701704.png" alt="image-20200719214701704" loading="lazy"></p>
<center> <u>Figure6</u>:  Terminus + WSL2 + oh-my-zsh 所展示的终端界面</center>

<p>清爽多了，不过比起这个默认的样式，我更习惯使用 <strong>agnoster</strong> 这个样式。</p>
<blockquote>
<p>更多的样式可以在<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Themes">文档</a>中寻到。</p>
</blockquote>
<p>使用如下命令打开 zsh 的配置文件。(*rc 文件，有兴趣的可以了解一下)</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后将 ZSH_THEME 修改成所需要的样式的名称即可。</p>
<p>最后执行如下命令，重载 zsh。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><img src="https://picgo-zxj.oss-cn-shanghai.aliyuncs.com/image-20200719220527894.png" alt="image-20200719220527894" loading="lazy"></p>
<center> <u>Figure6</u>:  最终的终端界面</center>

<p>差不多就是这个味道了。后续还会做一些配色方面的 DIY。</p>
<blockquote>
<p>关于 oh-my-zsh 的补充：</p>
<p>目前的一些教程会让下载其他的 oh-my-zsh 插件，但是有一些插件现在已经在 oh-my-zsh 之中了，不必下载，只需要在配置文件中把名字加上就可以使用。</p>
<p>详情可以查阅<a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>美化</tag>
      </tags>
  </entry>
  <entry>
    <title>Programmer摘要</title>
    <url>/2018-10-28-abstract-of-Programmer/</url>
    <content><![CDATA[<h1 id="如何使用日志调试"><a href="#如何使用日志调试" class="headerlink" title="如何使用日志调试"></a>如何使用日志调试</h1><p>Logging（日志）是一种编写系统的方式，可以产生一系列信息记录，被称为 log。Printlining 只是输出简单的，通常是临时的日志。初学者一定要理解并且使用日志，因为他们对编程的理解是局限的。因为系统的复杂性,系统架构必须理解与使用日志。在理想的状态下，程序运行时产生的日志信息数量需要是可配置的。通常，日志提供了下面三个基本的优点：</p>
<p>日志可以提供一些难以重现的 bug 的有效信息，比如在产品环境中发生的、不能在测试环境重现的 bug。<br>日志可以提供统计和与性能相关的数据，比如语句间流逝过的时间。<br>可配置的情况下，日志允许我们获取普通的信息，使得我们可以在不修改或重新部署代码的情况下调试以处理具体的问题。<br>需要输出的日志数量总是一个简约与信息量的权衡。太多的信息会使得日志变得昂贵，并且造成滚动目盲，使得发现你想要的信息变得很困难。但信息太少的话，日志可能不包含你需要的信息。出于这个原因，让日志的输出可配置是非常有用的。通常，日志中的每个记录会标记它在源代码里的位置，执行它的线程（如果可用的话），时间精度，并且通常还有一些额外的有效信息，比如一些变量的值，剩余内存大小，数据对象的数量，等等。这些日志语句撒遍源码，但只出现在主要的功能点和一些可能出现危机的代码里。每个语句可以被赋予一个等级，并且只有在系统被配置成输出相应等级的记录的时候才输出这个等级的记录。你应该设计好日志语句来标记你预期的问题。预估测量程序表现的必要性。</p>
<p>如果你有一个永久的日志，printling 现在可以用日志的形式来完成，并且一些调试语句可能会永久地加入日志系统。</p>
<h1 id="如何优化循环"><a href="#如何优化循环" class="headerlink" title="如何优化循环"></a>如何优化循环</h1><p>有时候你会遇到循环，或者递归函数，它们会花费很长的执行时间，可能是你的产品的瓶颈。在你尝试使循环变得快一点之前，花几分钟考虑是否有可能把它整个移除掉，有没有一个不同的算法？你可以在计算时做一些其他的事情吗？如果你不能找到一个方法去绕开它，你可以优化这个循环了。这是很简单的，move stuff out。最后，这不仅需要智慧而且需要理解每一种语句和表达式的开销。这里是一些建议：</p>
<p>删除浮点运算操作。<br>非必要时不要分配新的内存。<br>把常量都放在一起声明。<br>把 I/O 放在缓冲里做。<br>尽量不使用除法。<br>尽量不适用昂贵的类型转换。<br>移动指针而非重新计算索引。<br>这些操作的具体代价取决于你的具体系统。在一些系统中，编译器和硬件会为你做一些事情。但必须清楚，有效的代码比需要在特殊平台下理解的代码要好。</p>
<h1 id="如何进行实验"><a href="#如何进行实验" class="headerlink" title="如何进行实验"></a>如何进行实验</h1><p>已故的伟大的 Edsger Dijkstra 曾经充分解释过：计算机科学不是一门实验科学[ExpCS],并且不依赖于电子计算机。当他提出这个观点时，他指的是 19 世纪 60 年代。[Knife]</p>
<p>…危害已经出现：主题现在已经变成了“计算机科学” - 这实际上，像是把外科手术引用为“手术刀科学” - 这在人们心中深深植入了这样一个概念：计算机科学是关于机器和它们的外围设备的。</p>
<p>编程不应该是一门实验科学，但大多数职业程序员并没有保卫 Dijkstra 对于计算机科学的解释的荣耀。我们必须在实验的领域里工作，正如一部分，但非所有的物理学家做的那样。如果三十年后，编程可以在不进行任何实验的前提下进行，这将是计算机科学的一个巨大成就。</p>
<p>你需要进行的实验包括：</p>
<p>用小的例子测试系统以验证它们遵循文档，或者在没有文档时，理解它们的反应；<br>测试一些小的代码修改去验证它们是否确实修复了一个 bug；<br>由于对一个系统不完全的理解，需要在两种不同情况下测量它们的性能表现；<br>检查数据的完整性；<br>对困难的或者难以重现的 bug，收集解决方案中可能提示的统计数据。<br>我不认为在这篇文章里我可以讲述实验的设计，你会在实践中学习到这方面的知识。然而，我可以提供两点建议：</p>
<p>第一，对你的假设或者你要测试的断言要非常清楚。把假设写下来也是很有用的，尤其是如果你有点迷惑或者与其他人合作时。</p>
<p>第二，你会经常发现你必须设计一系列的实验，它们中的每个都基于对最后一个实验的理解。所以，你应该设计你的实验尽量去提供最多的信息。但不幸的是，这会让实验保持简单变的困难 - 你必须通过经验来提升这种权衡的能力。</p>
<h1 id="如何发现信息"><a href="#如何发现信息" class="headerlink" title="如何发现信息"></a>如何发现信息</h1><p>你所搜寻的事情的本质决定了你应该如何去寻找它。</p>
<p>如果你需要客观的而且容易辨认的关于具体事物的信息，例如一个软件的最新补丁版本，可以在 Internet 搜索，礼貌的询问很多的人，或者发起一个讨论组。不要在网上搜索任何带有观点或主观解释的东西：能够抵达真相的概率太低了。</p>
<p>如果你需要“一些主观的普遍知识”，人们对这些东西已有的思考历史，那就去图书馆吧。例如，想要了解数学，蘑菇或着神秘主义，就去图书馆吧。</p>
<p>如果你需要知道如何做一些琐碎的事情,找两三本关于这个主题的书，仔细阅读。你可以从网络上学到如何做好这些琐碎的事情，比如安装一个软件包。你甚至可以学到一些重要的东西，例如好的编程技术，但相比读一本纸质书的相关部分，你很容易花更多时间在搜索和对结果排序，以及评估结果的权威性。</p>
<p>如果你需要可能没有人知道的信息，例如，“这个新品牌的软件在海量数据的情况下能工作吗”，你仍然必须在网络和图书馆里搜索。在这些选项都完全竭尽后，你可能需要设计一个实验来搞清楚这个问题。</p>
<p>如果你需要一些考虑了某些特殊环境的观点或估值，和一个专家聊聊。例如，如果你想要知道用 Lisp 构建一个现代数据库管理系统是否是一个好主意，你应该和一个 Lisp 专家和一个数据库专家聊一聊。</p>
<p>如果你想要知道它具体是怎样的，比如一个还未发布的在一个特定程序上更快的算法，跟一些在这个领域工作的人聊聊。</p>
<p>如果你想要做一个只有你自己能做的个人决定，比如你是否应该开始某个事业，尝试把一些对这个想法有益和有害的点列出来。如果这没有什么用，做一些预测。假设你已经从各个角度研究了这个想法，并且做了所有该做的准备，在心里列举所有的后果，包括好的和坏的，但你仍可能犹豫不决。你现在应该遵循你自己内心的想法，然后让你的大脑停止思考。大多数可用的预测技术都对决定你内心一半的欲望有作用，因为它们在体现你自己完全多义和随机模式的潜意识都很有用。</p>
<h1 id="如何睿智地写文档"><a href="#如何睿智地写文档" class="headerlink" title="如何睿智地写文档"></a>如何睿智地写文档</h1><p>人生太短，不能写没人会读的废话，如果你写了废话，没人会去读。所以好一点的文档是最好的。经理不会去理解这些东西，因为不好的文档会给他们错误的安全感以至于他们不敢依赖他们的程序员。如果一些人绝对坚持你真的在写没用的文档，就告诉他们“是的”，然后安静的找一份更好的工作。</p>
<p>没有其他事情比精确估计 把好的文档转为放松文档要求的估计 更为有效率。真相是冷酷而艰难的：文档，就像测试，会花比开发代码多几倍的时间。</p>
<p>首先，写好的文档是好的写作。我建议你找一些关于写作的事情，学习，练习他们。但即使你是一个糟糕的写手或者对你需要写文档的语言掌握不好，这条黄金规则是你真正需要的：己所不欲，勿施于人。花时间去确实地思考谁会读你的文档，他们从文档中想要获得的真正的东西是什么，并且你可以如何把这些东西交给他们。如果你这样做，你将会变成一个超过平均水平的文档编写者，和一个好的程序员。</p>
<p>当代码可以自成文档时，与提供文档给非程序员看相反，我认识的最好的程序员们有这样一个普遍的观点：编写具有自我解释功能的代码，仅在你不能通过代码清晰解释其含义的地方，才写注释。有两个好的原因：第一，任何人需要查看代码级别的文档大多数情况下都能够并且更喜欢阅读代码。不可否认的，有经验的程序员似乎比初学者更容易做到这件事，然而，更重要的是，没有文档的话，代码和文档不会是自相矛盾的。源代码最糟糕的情况下可能是错误并且令人困惑的。没有完美编写的文档，可能说谎，这可糟糕一千倍。</p>
<p>负责任的程序员也不能让这件事变得更简单些。如何写自解释的代码？那意味着什么？它意味着：</p>
<p>编写知道别人会去阅读的代码(译者注：编写给人看的代码)<br>运用黄金法则<br>选择直接的解决方案，即使你可以更快地获得另一个解决方案<br>牺牲那些可能混淆代码的小的优化<br>为读者考虑，把你珍贵的时间花在让她更加容易阅读的事情上,并且<br>永远不要使用这样的函数名比如 foo,bar, 或 doIt!</p>
<h1 id="如何使用源代码控制"><a href="#如何使用源代码控制" class="headerlink" title="如何使用源代码控制"></a>如何使用源代码控制</h1><p>源代码控制系统（又称版本控制系统）让你高效地管理工程。他们对一个人是很有用的，对一个团队是至关重要的。它们追踪不同版本里的所有改变，以至于所有代码都未曾丢失，其含义可以归属于改变。有了源代码控制系统，一个人可以自信地写一些而半途而废的代码和调试的代码，因为你修改的代码被仔细地与提交的、官方的即将与团队共享或发布的代码分割开。</p>
<p>我挺晚才开始意识到源代码控制系统的好处，但现在即使是一个人的工程，我也不能离开源代码控制系统。当你们团队在同样的代码基础上工作时，通常它们是必要的。然而，它们有另一个巨大的优点：它们鼓励我们把代码当做一个成长的有机系统。因为每个改变都会被标记为带有名字或数字的修正，一个人会开始认为软件是一种可见的一系列渐进的提升。我认为这对初学者是尤其有用的。</p>
<p>使用源代码控制系统的一个好的技术是一直保持在几天后提交更新。在提交后，一定程度上不活跃，不被调用的代码在几天内都不会完成，因此也不会对其他任何人产生任何问题。因提交错误的代码而降低你队友的开发速度是一个严重的错误，这往往是一种禁忌。</p>
<h1 id="如何进行单元测试"><a href="#如何进行单元测试" class="headerlink" title="如何进行单元测试"></a>如何进行单元测试</h1><p>单元测试，对独立的代码功能片段，由编写代码的团队进行测试，也是一种编码，而非与之不同的一些事情。设计代码的一部分就是设计它该如何被测试。你应该写一个测试计划，即使它只是一句话。有时候测试很简单：“这个按钮看起来好吗？”,有时候它很复杂：“这个匹配算法可以精确地返回正确的匹配结果？”。</p>
<p>无论任何可能的时候，使用断言检查以及测试驱动。这不仅能尽早发现 bug，而且在之后也很有用，让你在其他方面担心的谜题得到解决。</p>
<p>极限编程开发者广泛高效地编写单元测试，除了推荐他们的作品，我不能做更好的事情了。</p>
<h1 id="如何与不好相处的人相处"><a href="#如何与不好相处的人相处" class="headerlink" title="如何与不好相处的人相处"></a>如何与不好相处的人相处</h1><p>你可能必须和不好相处的人相处。甚至可能你本身就是一个不好相处的人。如果你是那种与同事和权威人物有许多矛盾的人，你应该珍惜这种独立所暗示的东西，但需要在不牺牲你的智力或原则的前提下提高你的人际交往能力。</p>
<p>在这方面没有什么经验,或者先前生活的行为模式在工作场合的经验不能适用的一些程序员,对这种事情会非常困扰。不好相处的人经常习惯于拒绝，并且与他人相比，他们更不容易受社交压力所影响。关键是合适地尊重他们，而非你可能想做的事，但不要充分地满足他们想要的(译者注：他们想要的往往是过分的)。</p>
<p>程序员必须作为一个团队一起工作。当分歧出现时，它必须用某种方式解决，它不能被长时间挂起。不好相处的人通常是极度聪明的，并且有一些很有用的意见可以发表。不带对这个人的偏见，倾听并理解不好相处的人是至关重要的。失败的交流通常是分歧的基础，但它有时候可以被巨大的耐心移除。尝试冷静诚恳地保持交流，并且不接受任何可能产生更大矛盾的引诱。在一个合理的尝试理解的周期后，再做决定。</p>
<p>不要让一个恶霸强迫你做你所不同意的事情。如果你是老大，做你认为最好的事情。不要为任何个人因素做出决定，并时刻准备好为你的决定做出解释。如果你是一个有着不好相处的同事的团队成员，不要让老大的决定有任何个人影响。如果没有按你的想法发展，全身心地按（已成事实的）另一种方法去做。</p>
<p>不好相处的人能够改变与进步。我曾亲眼目睹这种情况，但这很稀少。然而，每个人都有暂时的高兴与失落情绪。</p>
<p>每个程序员但尤其是领导都会面临这样一个挑战：让不好相处的人保持完全的忙碌。他们比别人更倾向于枯燥的工作，并且更能被动地忍受。</p>
<h1 id="如何在时间与空间权衡"><a href="#如何在时间与空间权衡" class="headerlink" title="如何在时间与空间权衡"></a>如何在时间与空间权衡</h1><p>没有上过大学的话，你也可以成为一个好的程序员，但你不知道基本的计算复杂度理论的话，你不可能成为一个好的进阶程序员。你不需要知道‘O’的定义，但我个人认为你应该理解‘常量时间’，‘nlogn’,’n²’的区别。你可能可以不靠这方面的知识，凭直觉知道如何在时间和空间之间权衡，但没有这种知识，你将不会有一个和你同事交流的稳固基础。</p>
<p>在设计或理解算法的过程中，算法花费的时间有时候是一个以输入量为自变量的函数。当这种情况发生时，如果运行时间与输入量的对数的 n 倍成正比，我们可以说一个算法的最坏/期望/最好情况运行时间是’nlogn’，这个定义和阐述的方式也可以被应用在数据结构占用的空间上。</p>
<p>对我来时候，计算复杂度理论是美妙的，并且与物理学一样意义深远，并且可能还有很长的路要走！</p>
<p>时间（处理器周期）和空间（内存）可以相互交易。工程是关于妥协的，这就是一个好的例子。它并不总是有条理的，然而，编码一些东西时更加紧凑可以节省空间，但要以解码时花费更多的处理时间为代价。你可以通过缓存节省时间，也就是，花费空间去存储某些东西的一个本地副本，但要以维持缓存的一致性为代价。你偶尔可以通过把更多信息放在一个数据结构里来节省时间。这通常只会有较小的空间占用，但可能会使算法复杂化。</p>
<p>提高时间空间转换经常把它们中的一个或另一个戏剧性地改变。然而，在你开始做这个工作前，你应该问你自己，你将要优化的是否是最需要优化的？研究算法是有趣的，但你不能让这遮蔽了你的双眼让你看不到这样一个冷酷的事实：优化一些不是问题的问题将不会带来任何明显的区别，但却会造成测试的负担。</p>
<p>现代计算机内存越来越便宜，因为不像处理器时间，你在达到边界前你不能看见它，但这种失败是灾难性的。使用内存也有隐藏的代价，比如你影响了其他需要被保留的程序，以及你分配和释放内存的时间。在你想要花更多空间去换取速度之前，请仔细考虑这一点。</p>
<blockquote>
<p>当 Michael Tiemann 在 MCC 的时候，人们会站在他的门外面倾听他击键的声音，这种声音是如此的急促以至于难以分辨。</p>
</blockquote>
<h1 id="如何分析数据"><a href="#如何分析数据" class="headerlink" title="如何分析数据"></a>如何分析数据</h1><p>当你检查一个商业活动并且发现了把它转换为软件应用程序的需求时，数据分析是软件开发早期的一个过程。这是一个官方的定义，当你，一个程序员，应该集中注意力在写别人设计的东西的代码时，这可能会让你相信数据分析是一种更应该归入系统分析的行为。如果我们严格遵循软件工程范式，这可能是正确的。有经验的程序员会成为设计者，最尖锐的设计者变成商业分析师，因此被冠名去思考所有数据需要，并且给你充分定义的任务去执行。这不完全是对的，因为数据是每种编程活动的核心。不管你在你的程序里做什么，你不是在移动数据就是在修改数据。商业分析师分析的是更大尺度上的需要，软件设计者更加压榨这个比例以至于，当问题在你的桌上落地时，好像你需要做的所有事情是应用聪明的算法，开始移动已经存在的数据。</p>
<p>不是这样的。</p>
<p>不管你开始观察它的是哪个阶段，数据是一个良好设计的应用程序主要考虑的因素，如果你仔细观察一个数据分析师是怎么从客户请求中获取需求的，你会意识到，数据扮演了一个基本的角色。分析师创建了所谓的数据流表，所有的数据源被标记出来，信息的流动被塑造出来。清晰定义了什么数据应该是系统的一部分，设计师将会用数据关系，数据交换协议，文件格式的形式塑造数据源，这样任务就准备好传递给程序员了。然而，这个过程还没结束，因为你（程序员）在这个周密的数据提取过程后，需要分析数据以用最好的可能方式表现任务。你的任务的底线是 Niklaus Wirth，多种语言之父，的金句：“算法+数据结构=程序”。这永远不是一个独立的自嗨的算法。每个算法都至少被设计去做一些至少与一段数据相关的事情。</p>
<p>因此，由于算法不会在真空中滚动轮子，你需要分析其他人已经为你标记好的数据和必须写入代码的必要的数据。 一个小例子会使得事情更清楚。实现一个图书馆的搜索程序时，通过你的说明书，用户用类型/作者标题/出版社/出版年份/页数来选择书本。你的程序的中级目标是提供一个合法的 SQL 语句去搜索后端数据库。基于这些需要，你有几个选择：按顺序检查每个控制条件，使用一个 switch 语句，或者几个 if 语句；用一个数据控制数组，把它们与一个事件驱动引擎相连。</p>
<p>如果你的需求也包括提高查询性能，通过确认每个项在一个特殊顺序里，你可能考虑使用组件树去构建你的 SQL 语句。正如你可以看到的，算法的选择依赖于你决定使用或将要创建的数据。这样的决定产生高效算法和糟糕算法间的区别。 然而,效率不是唯一要考虑的因素。你可能在你的代码里使用一打命名变量，让它变得尽可能高效。但这样一段代码可能不能容易地维护。可能为你的变量选择一种合适的容器可以保持相同的速度，此外，在的你同事明年看代码的时候，让他们能够更好地理解代码。更多的，选择一个良好设计的数据结构可能允许他们在不重写代码的前提下，拓展你的代码的功能。长久看来，你对数据的选择决定了你结束代码的工作后，它能工作多久。</p>
<p>让我给你看另一个例子，只是一些思想粮食，让我们假设你的任务是找到字典里超过三位的同字异构词（一个异构词必须在同样的字典里有另一个词）。如果你把这当做一个计算任务，你将会结束于无尽的，尝试找出每个单词的所有组合，然后拿它跟列表里的所有其他单词比较，这样一个无尽的努力中。然而，如果你分析了手头的数据，你会意识到，每个单词可能被一个包含这个词本身以及用它的字母作为 ID 的排序数组的记录所代表，这个蛮力算法可能需要运行几天，而小的那个算法只是一件几秒的事。下次面对一个棘手的问题时，记住这个例子。</p>
]]></content>
      <categories>
        <category>见闻录</category>
      </categories>
  </entry>
  <entry>
    <title>python进阶 手札</title>
    <url>/2019-04-14-python-advanced/</url>
    <content><![CDATA[<p>关于 python 的内置函数以及一些高阶的技巧的学习</p>
<a id="more"></a>

<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x<span class="token operator">*</span>x
<span class="token keyword">print</span> <span class="token builtin">map</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><p>ps:python3.x 中，reduce 需要从 functools 里导入</p>
<p>reduce()函数也是 Python 内置的一个高阶函数。reduce()函数接收的参数和 map()类似，一个函数 f，一个 list，但行为和 map()不同，reduce()传入的函数 f 必须接收两个参数，reduce()对 list 的每个元素反复调用函数 f，并返回最终结果值。</p>
<p>例如，编写一个 f 函数，接收 x 和 y，返回 x 和 y 的和：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>调用 reduce(f, [1, 3, 5, 7, 9])时，reduce 函数将做如下计算：</p>
<p>先计算头两个元素：f(1, 3)，结果为 4；<br>再把结果和第 3 个元素计算：f(4, 5)，结果为 9；<br>再把结果和第 4 个元素计算：f(9, 7)，结果为 16；<br>再把结果和第 5 个元素计算：f(16, 9)，结果为 25；<br>由于没有更多的元素了，计算结束，返回结果 25。<br>上述计算实际上是对 list 的所有元素求和。虽然 Python 内置了求和函数 sum()，但是，利用 reduce()求和也很简单。</p>
<p>reduce()还可以接收第 3 个可选参数，作为计算的初始值。如果把初始值设为 100，计算：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">reduce</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>结果将变为 125，因为第一轮计算是：</p>
<p>计算初始值和第一个元素：f(100, 1)，结果为 101。</p>
<h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p>filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个 list，这个函数 f 的作用是对每个元素进行判断，返回 True 或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新 list。</p>
<p>例如，要从一个 list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>然后，利用 filter()过滤掉偶数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">filter</span><span class="token punctuation">(</span>is_odd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>结果：[1, 7, 9, 17]</p>
<p>利用 filter()，可以完成很多有用的功能，例如，删除 None 或者空字符串：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_not_empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> s <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span>
<span class="token builtin">filter</span><span class="token punctuation">(</span>is_not_empty<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'str'</span><span class="token punctuation">,</span> <span class="token string">'  '</span><span class="token punctuation">,</span> <span class="token string">'END'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>结果：[‘test’, ‘str’, ‘END’]</p>
<p><strong>注意</strong>: s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。</p>
<p>当 rm 为空时，默认删除空白符（包括’\n’, ‘\r’, ‘\t’, ‘ ‘)，如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token string">'     123'</span>
a<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>结果： ‘123’</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token operator">=</span><span class="token string">'\t\t123\r\n'</span>
a<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>结果：’123’</p>
<h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>Python 内置的 sorted()函数可对 list 进行排序：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>[5, 9, 12, 21, 36]<br>但 sorted()也是一个高阶函数，它可以接收一个比较函数来实现自定义排序，比较函数的定义是:</p>
<p>传入两个待比较的元素 x, y，<strong>如果 x 应该排在 y 的前面，返回 -1，如果 x 应该排在 y 的后面，返回 1。如果 x 和 y 相等，返回 0</strong>。</p>
<p>因此，如果我们要实现倒序排序，只需要编写一个 reversed_cmp 函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reversed_cmp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> x <span class="token operator">></span> y<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样，调用 sorted() 并传入 reversed_cmp 就可以实现倒序排序：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reversed_cmp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>[36, 21, 12, 9, 5]</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>像这种内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure）。</p>
<p>闭包的特点是返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变。</p>
<p><strong>返回函数不要引用任何循环变量，或者后续会发生变化的变量。</strong></p>
<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><p>高阶函数可以接收函数做参数，有些时候，我们不需要显式地定义函数，直接传入匿名函数更方便。</p>
<p>在 Python 中，对匿名函数提供了有限支持。还是以 map()函数为例，计算 f(x)=x2 时，除了定义一个 f(x)的函数外，还可以直接传入匿名函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> x<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>[1, 4, 9, 16, 25, 36, 49, 64, 81]<br>通过对比可以看出，匿名函数 lambda x: x * x 实际上就是：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>关键字 lambda 表示匿名函数，冒号前面的 x 表示函数参数。</p>
<p>匿名函数有个限制，就是只能有一个表达式，不写 return，返回值就是该表达式的结果。</p>
<p>使用匿名函数，可以不必定义函数名，直接创建一个函数对象，很多时候可以简化代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token builtin">cmp</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>[9, 5, 3, 1, 0]<br>返回函数的时候，也可以返回匿名函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> myabs <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token operator">-</span>x <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">else</span> x
<span class="token operator">>></span><span class="token operator">></span> myabs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token operator">>></span><span class="token operator">></span> myabs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h1><p>可以极大地简化代码，避免每个函数编写重复性代码</p>
<p>用处：<br>打印日志<br>检测性能<br>数据库事务<br>url 路由<br>……</p>
<p>检测性能示例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">performance</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
        t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>
        t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span> <span class="token string">'call %s() in %fs'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> r
    <span class="token keyword">return</span> fn

<span class="token decorator annotation punctuation">@performance</span>
<span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> x<span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> factorial<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="编写带参数-decorator"><a href="#编写带参数-decorator" class="headerlink" title="编写带参数 decorator"></a>编写带参数 decorator</h2><p>考察上一节的 @log 装饰器：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">'call '</span> <span class="token operator">+</span> f<span class="token punctuation">.</span>__name__ <span class="token operator">+</span> <span class="token string">'()...'</span>
        <span class="token keyword">return</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">return</span> fn<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>发现对于被装饰的函数，log 打印的语句是不能变的（除了函数名）。</p>
<p>如果有的函数非常重要，希望打印出’[INFO] call xxx()…’，有的函数不太重要，希望打印出’[DEBUG] call xxx()…’，这时，log 函数本身就需要传入’INFO’或’DEBUG’这样的参数，类似这样：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@log</span><span class="token punctuation">(</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
把上面的定义翻译成高阶函数的调用，就是：

my_func <span class="token operator">=</span> log<span class="token punctuation">(</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>my_func<span class="token punctuation">)</span>
上面的语句看上去还是比较绕，再展开一下：

log_decorator <span class="token operator">=</span> log<span class="token punctuation">(</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>
my_func <span class="token operator">=</span> log_decorator<span class="token punctuation">(</span>my_func<span class="token punctuation">)</span>
上面的语句又相当于：

log_decorator <span class="token operator">=</span> log<span class="token punctuation">(</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@log_decorator</span>
<span class="token keyword">def</span> <span class="token function">my_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所以，带参数的 log 函数首先返回一个 decorator 函数，再让这个 decorator 函数接收 my_func 并返回新函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">log_decorator</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token string">'[%s] %s()...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
            <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>
        <span class="token keyword">return</span> wrapper
    <span class="token keyword">return</span> log_decorator

<span class="token decorator annotation punctuation">@log</span><span class="token punctuation">(</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">print</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行结果：</p>
<blockquote>
<p>[DEBUG] test()…<br>None</p>
</blockquote>
<p>对于这种 3 层嵌套的 decorator 定义，你可以先把它拆开：</p>
<blockquote>
<p># 标准 decorator:</p>
</blockquote>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log_decorator</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span> <span class="token string">'[%s] %s()...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
    <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>
<span class="token keyword">return</span> wrapper
<span class="token keyword">return</span> log_decorator<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p># 返回 decorator:</p>
</blockquote>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> log_decorator<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>拆开以后会发现，调用会失败，因为在 3 层嵌套的 decorator 定义中，最内层的 wrapper 引用了最外层的参数 prefix，所以，把一个闭包拆成普通的函数调用会比较困难。不支持闭包的编程语言要实现同样的功能就需要更多的代码。</p>
<p>示例 1：（info、debug）</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">log_decorator</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span> <span class="token string">'[%s] %s()...'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> f<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
            <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>
        <span class="token keyword">return</span> wrapper
    <span class="token keyword">return</span> log_decorator

<span class="token decorator annotation punctuation">@log</span><span class="token punctuation">(</span><span class="token string">'DEBUG'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">print</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>示例 2：ms</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">performance</span><span class="token punctuation">(</span>unit<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">per_decorator</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">timecul</span><span class="token punctuation">(</span><span class="token operator">*</span>arg<span class="token punctuation">,</span><span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
            t1<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
            r<span class="token operator">=</span>f<span class="token punctuation">(</span><span class="token operator">*</span>arg<span class="token punctuation">,</span><span class="token operator">**</span>kw<span class="token punctuation">)</span>
            t2<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span> <span class="token string">'call %s() in %f %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">,</span>unit<span class="token punctuation">)</span>
            <span class="token keyword">return</span> r
        <span class="token keyword">return</span> timecul
    <span class="token keyword">return</span> per_decorator

<span class="token decorator annotation punctuation">@performance</span><span class="token punctuation">(</span><span class="token string">'ms'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">factorial</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span> x<span class="token operator">*</span>y<span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> factorial<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="decorator-完善"><a href="#decorator-完善" class="headerlink" title="decorator 完善"></a>decorator 完善</h2><p>@decorator 可以动态实现函数功能的增加，但是，经过@decorator“改造”后的函数，和原函数相比，除了功能多一点外，有没有其它不同的地方？</p>
<p>在没有 decorator 的情况下，打印函数名：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">print</span> f1<span class="token punctuation">.</span>__name__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>输出： f1</p>
<p>有 decorator 的情况下，再打印函数名：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">'call...'</span>
        <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper
<span class="token decorator annotation punctuation">@log</span>
<span class="token keyword">def</span> <span class="token function">f2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>
<span class="token keyword">print</span> f2<span class="token punctuation">.</span>__name__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输出： wrapper</p>
<p>可见，由于 decorator 返回的新函数函数名已经不是’f2’，而是@log 内部定义的’wrapper’。这对于那些依赖函数名的代码就会失效。decorator 还改变了函数的<strong>doc</strong>等其它属性。如果要让调用者看不出一个函数经过了@decorator 的“改造”，就需要把原函数的一些属性复制到新函数中：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">'call...'</span>
        <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>
    wrapper<span class="token punctuation">.</span>__name__ <span class="token operator">=</span> f<span class="token punctuation">.</span>__name__
    wrapper<span class="token punctuation">.</span>__doc__ <span class="token operator">=</span> f<span class="token punctuation">.</span>__doc__
    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样写 decorator 很不方便，因为我们也很难把原函数的所有必要属性都一个一个复制到新函数上，所以 Python 内置的 functools 可以用来自动化完成这个“复制”的任务：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> functools
<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">'call...'</span>
        <span class="token keyword">return</span> f<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后需要指出，由于我们把原函数签名改成了(*args, **kw)，因此，无法获得原函数的原始参数信息。即便我们采用固定参数来装饰只有一个参数的函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">'call...'</span>
        <span class="token keyword">return</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可能改变原函数的参数名，因为新函数的参数名始终是 ‘x’，原函数定义的参数名不一定叫 ‘x’。</p>
<h2 id="偏函数"><a href="#偏函数" class="headerlink" title="偏函数"></a>偏函数</h2><p>functools.partial 就是帮助我们创建一个偏函数的，不需要我们自己定义 int2()，可以直接使用下面的代码创建一个新的函数 int2：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> functools
<span class="token operator">>></span><span class="token operator">></span> int2 <span class="token operator">=</span> functools<span class="token punctuation">.</span>partial<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1000000'</span><span class="token punctuation">)</span>
<span class="token number">64</span>
<span class="token operator">>></span><span class="token operator">></span> int2<span class="token punctuation">(</span><span class="token string">'1010101'</span><span class="token punctuation">)</span>
<span class="token number">85</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所以，functools.partial 可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值，这样，新函数调用的难度就降低了。</p>
<h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><h2 id="按照类的某个属性进行排序"><a href="#按照类的某个属性进行排序" class="headerlink" title="按照类的某个属性进行排序"></a>按照类的某个属性进行排序</h2><blockquote>
<p>L2 = sorted(L1, lambda p1, p2: cmp(p1.name, p2.name))</p>
</blockquote>
<p>具体：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span>

p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>
p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Bart'</span>

p2 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>
p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Adam'</span>

p3 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span>
p3<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'Lisa'</span>

L1 <span class="token operator">=</span> <span class="token punctuation">[</span>p1<span class="token punctuation">,</span> p2<span class="token punctuation">,</span> p3<span class="token punctuation">]</span>
L2 <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>L1<span class="token punctuation">,</span> <span class="token keyword">lambda</span> p1<span class="token punctuation">,</span> p2<span class="token punctuation">:</span> <span class="token builtin">cmp</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">,</span> p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">print</span> L2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name
<span class="token keyword">print</span> L2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name
<span class="token keyword">print</span> L2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>gender<span class="token punctuation">,</span>birth<span class="token punctuation">,</span><span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> kw<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">setattr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这里的 **kw 表示接受 <strong>任意关键字参数</strong><br>setattr()设置参数</p>
<p>ps:在 pyhton3.x 中 iteritems 变更为 items</p>
<h2 id="访问限制"><a href="#访问限制" class="headerlink" title="访问限制"></a>访问限制</h2><p>Python 对属性权限的控制是通过属性名来实现的，如果一个属性由双下划线开头(__)，该属性就无法被外部访问。</p>
<p>只有以双下划线开头的”__job”不能直接被外部访问。</p>
<p>但是，如果一个属性以”__xxx__“的形式定义，那它又可以被外部访问了，以”__xxx__“定义的属性在 Python 的类中被称为特殊属性，有很多预定义的特殊属性可以使用，通常我们不要把普通属性用”__xxx__“定义。</p>
<p>以单下划线开头的属性”_xxx”虽然也可以被外部访问，但是，按照习惯，他们不应该被外部访问。</p>
<h2 id="init-内外定义区别"><a href="#init-内外定义区别" class="headerlink" title="__init__ 内外定义区别"></a>__init__ 内外定义区别</h2><p><img src="evernotecid://633A359B-908B-4B09-BD14-4B8DC1F44EF5/appyinxiangcom/18822571/ENResource/p135" alt="e48d9f5d14a056cc9f6c8ab0112dda2d.png" loading="lazy"></p>
<h2 id="类属性和实例属性名字冲突怎么办"><a href="#类属性和实例属性名字冲突怎么办" class="headerlink" title="类属性和实例属性名字冲突怎么办"></a>类属性和实例属性名字冲突怎么办</h2><p>当实例属性和类属性重名时，实例属性优先级高，它将屏蔽掉对类属性的访问。</p>
<h2 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h2><p>和属性类似，方法也分实例方法和类方法。</p>
<p>在 class 中定义的全部是实例方法，实例方法第一个参数 self 是实例本身。</p>
<p>要在 class 中定义类方法，需要这么写：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token decorator annotation punctuation">@classmethod</span>
    <span class="token keyword">def</span> <span class="token function">how_many</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>count
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        Person<span class="token punctuation">.</span>count <span class="token operator">=</span> Person<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span>

<span class="token keyword">print</span> Person<span class="token punctuation">.</span>how_many<span class="token punctuation">(</span><span class="token punctuation">)</span>
p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span> Person<span class="token punctuation">.</span>how_many<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过标记一个 @classmethod，该方法将绑定到 Person 类上，而非类的实例。类方法的第一个参数将传入类本身，通常将参数名命名为 cls，上面的 cls.count 实际上相当于 Person.count。</p>
<p>因为是在类上调用，而非实例上调用，因此类方法无法获得任何实例变量，只能获得类的引用。</p>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>如果已经定义了 Person 类，需要定义新的 Student 和 Teacher 类时，可以直接从 Person 类继承：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender
定义Student类时，只需要把额外的属性加上，例如score：

<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一定要用 super(Student, self).<strong>init</strong>(name, gender) 去初始化父类，否则，继承自 Person 的 Student 将没有 name 和 gender。</p>
<p>函数 super(Student, self)将返回当前类继承的父类，即 Person ，然后调用<strong>init</strong>()方法，注意 self 参数已在 super()中传入，在<strong>init</strong>()中将隐式传递，不需要写出（也不能写）。</p>
<h2 id="判断示例的类型"><a href="#判断示例的类型" class="headerlink" title="判断示例的类型"></a>判断示例的类型</h2><p>函数 isinstance()可以判断一个变量的类型，既可以用在 Python 内置的数据类型如 str、list、dict，也可以用在我们自定义的类，它们本质上都是数据类型。</p>
<p>假设有如下的 Person、Student 和 Teacher 的定义及继承关系如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender

<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Student<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score

<span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">,</span> course<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>Teacher<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>course <span class="token operator">=</span> course

p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'Tim'</span><span class="token punctuation">,</span> <span class="token string">'Male'</span><span class="token punctuation">)</span>
s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'Male'</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span>
t <span class="token operator">=</span> Teacher<span class="token punctuation">(</span><span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token string">'Female'</span><span class="token punctuation">,</span> <span class="token string">'English'</span><span class="token punctuation">)</span>
当我们拿到变量 p、s、t 时，可以使用 <span class="token builtin">isinstance</span> 判断类型：

<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> Person<span class="token punctuation">)</span>
<span class="token boolean">True</span>    <span class="token comment"># p是Person类型</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> Student<span class="token punctuation">)</span>
<span class="token boolean">False</span>   <span class="token comment"># p不是Student类型</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> Teacher<span class="token punctuation">)</span>
<span class="token boolean">False</span>   <span class="token comment"># p不是Teacher类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这说明在继承链上，一个父类的实例不能是子类类型，因为子类比父类多了一些属性和方法。</p>
<p>我们再考察 s ：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> Person<span class="token punctuation">)</span>
<span class="token boolean">True</span>    <span class="token comment"># s是Person类型</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> Student<span class="token punctuation">)</span>
<span class="token boolean">True</span>    <span class="token comment"># s是Student类型</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> Teacher<span class="token punctuation">)</span>
<span class="token boolean">False</span>   <span class="token comment"># s不是Teacher类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>s 是 Student 类型，不是 Teacher 类型，这很容易理解。但是，s 也是 Person 类型，因为 Student 继承自 Person，虽然它比 Person 多了一些属性和方法，但是，把 s 看成 Person 的实例也是可以的。</p>
<p>这说明在一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。</p>
<h2 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h2><p>如果已知一个属性名称，要获取或者设置对象的属性，就需要用 getattr() 和 setattr( )函数了：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span>  <span class="token comment"># 获取name属性</span>
<span class="token string">'Bob'</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">setattr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'Adam'</span><span class="token punctuation">)</span>  <span class="token comment"># 设置新的name属性</span>

<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>name
<span class="token string">'Adam'</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">)</span>  <span class="token comment"># 获取age属性，但是属性不存在，报错：</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>
AttributeError<span class="token punctuation">:</span> <span class="token string">'Student'</span> <span class="token builtin">object</span> has no attribute <span class="token string">'age'</span>

<span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>  <span class="token comment"># 获取age属性，如果属性不存在，就返回默认值20：</span>
<span class="token number">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h1><p>__str** 用户 默认输出<br>__repr** 开发者 默认输出</p>
<h3 id="cmp"><a href="#cmp" class="headerlink" title="__cmp__"></a>__cmp__</h3><p>对 int、str 等内置数据类型排序时，Python 的 sorted() 按照默认的比较函数 cmp 排序，但是，如果对一组 Student 类的实例排序时，就必须提供我们自己的特殊方法 __cmp__()：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>score <span class="token operator">=</span> score
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'(%s: %s)'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>score<span class="token punctuation">)</span>
    __repr__ <span class="token operator">=</span> __str__

    <span class="token keyword">def</span> <span class="token function">__cmp__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>name <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>name<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>name <span class="token operator">></span> s<span class="token punctuation">.</span>name<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h3><p>__add** 加<br>__sub** 减<br>__mul** 乘<br>__div** 除</p>
<h3 id="property"><a href="#property" class="headerlink" title="property"></a>property</h3><p>Python 支持高阶函数，在函数式编程中我们介绍了装饰器函数，可以用装饰器函数把 get/set 方法“装饰”成属性调用：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score
    <span class="token decorator annotation punctuation">@property</span>
    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__score
    <span class="token decorator annotation punctuation">@score<span class="token punctuation">.</span>setter</span>
    <span class="token keyword">def</span> <span class="token function">score</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> score<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> score <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> score <span class="token operator">></span> <span class="token number">100</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">'invalid score'</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>__score <span class="token operator">=</span> score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意: 第一个 score(self)是 get 方法，用@property 装饰，第二个 score(self, score)是 set 方法，用@score.setter 装饰，@score.setter 是前一个@property 装饰后的副产品。</p>
<p>现在，就可以像使用属性一样设置 score 了：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">60</span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span> s<span class="token punctuation">.</span>score
<span class="token number">60</span>
<span class="token operator">>></span><span class="token operator">></span> s<span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token number">1000</span>
Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
ValueError<span class="token punctuation">:</span> invalid score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>说明对 score 赋值实际调用的是 set 方法。</p>
<h4 id="其他解释"><a href="#其他解释" class="headerlink" title="其他解释"></a>其他解释</h4><p>@property 就是把实例方法当做属性调用的语法,你看下面是直接 print s.grade，相当于调用了 grade 这个属性，所以用@property</p>
<p>可以把这种写法当成 python 的语法规范，比如为什么定义一个函数要用 def，一样的道理。<br>property 是“属性”的意思，@property 就是把实例方法当做属性调用的语法。set 是“设置”的意思，setter 就是“设置器”。@score.setter 就是给这个类下的 score 属性重新设定值的时候，调用这个方法。</p>
<blockquote>
<p>按实际的用法，如果一个语句是 s.score，就是要获取属性，所以 python 会直接找@property 这个装饰器下面有没有 score 这个方法，有就直接调用了。如果另一个语句是 s.score = 99，这就是要设置属性，python 就会去找@score.setter 这个装饰器，并运行下面的方法。</p>
</blockquote>
<h3 id="slots"><a href="#slots" class="headerlink" title="__slots__"></a>__slots__</h3><p>__slots<strong>的目的是限制当前类所能拥有的属性，如果不需要添加任意动态的属性，使用</strong>slots__也能节省内存。</p>
<h3 id="call"><a href="#call" class="headerlink" title="__call__"></a>__call__</h3><p>在 Python 中，函数其实是一个对象：</p>
<pre class="line-numbers language-pyhton" data-language="pyhton"><code class="language-pyhton">&gt;&gt;&gt; f &#x3D; abs
&gt;&gt;&gt; f.__name__
&#39;abs&#39;
&gt;&gt;&gt; f(-123)
123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>由于 f 可以被调用，所以，f 被称为可调用对象。</p>
<p>所有的函数都是可调用对象。</p>
<p>一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法<strong>call</strong>()。</p>
<p>我们把 Person 类变成一个可调用对象：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> gender<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>gender <span class="token operator">=</span> gender

    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> friend<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span> <span class="token string">'My name is %s...'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>name
        <span class="token keyword">print</span> <span class="token string">'My friend is %s...'</span> <span class="token operator">%</span> friend<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在可以对 Person 实例直接调用：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> p <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token string">'male'</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> p<span class="token punctuation">(</span><span class="token string">'Tim'</span><span class="token punctuation">)</span>
My name <span class="token keyword">is</span> Bob<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
My friend <span class="token keyword">is</span> Tim<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>单看 p(‘Tim’) 你无法确定 p 是一个函数还是一个类实例，所以，在 Python 中，函数也是对象，对象和函数的区别并不显著。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
  </entry>
  <entry>
    <title>docker (1)</title>
    <url>/2019-08-07-docker-1/</url>
    <content><![CDATA[<p>参考 《第一本 docker 书》《docker 深入浅出》</p>
<a id="more"></a>

<h1 id="第一本-docker"><a href="#第一本-docker" class="headerlink" title="第一本 docker"></a>第一本 docker</h1><h2 id="docker-容器"><a href="#docker-容器" class="headerlink" title="docker 容器"></a>docker 容器</h2><p>首先，我们告诉 Docker 执行 docker run 命令，并指定了-i 和-t 两个命令行参数。-i 标志保证容器中 STDIN 是开启的，尽管我们并没有附着到容器中。持久的标准输入是交互式 shell 的“半边天”，-t 标志则是另外“半边天”，它告诉 Docker 为要创建的容器分配一个伪 tty 终端。这样，新创建的容器才能提供一个交互式 shell。首先，我们告诉 Docker 执行 docker run 命令，并指定了-i 和-t 两个命令行参数。-i 标志保证容器中 STDIN 是开启的，尽管我们并没有附着到容器中。持久的标准输入是交互式 shell 的“半边天”，-t 标志则是另外“半边天”，它告诉 Docker 为要创建的容器分配一个伪 tty 终端。这样，新创建的容器才能提供一个交互式 shell。</p>
<h3 id="带名字"><a href="#带名字" class="headerlink" title="带名字"></a>带名字</h3><p>sudo docker run –name bob_the_container -i -t ubuntu /bin/bash</p>
<h3 id="重新启动"><a href="#重新启动" class="headerlink" title="重新启动"></a>重新启动</h3><p>sudo docker start bob_the_container<br>or<br>sudo docker start aa3f365f0f4e</p>
<h3 id="创建守护式程序"><a href="#创建守护式程序" class="headerlink" title="创建守护式程序"></a>创建守护式程序</h3><p>除了这些交互式运行的容器（interactive container），也可以创建长期运行的容器。守护式容器（daemonized container）没有交互式会话，非常适合运行应用程序和服务。大多数时候我们都需要以守护式来运行我们的容器。</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> docker run --name daemon_dave -d ubuntu /bin/sh -c <span class="token string">"while true; do echo hello world; sleep 1; done"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>docker run 命令使用了-d 参数，因此 Docker 会将容器放到后台运行.</p>
<p>我们还在容器要运行的命令里使用了一个 while 循环，该循环会一直打印 hello world ，直到容器或其进程停止运行.</p>
<h3 id="跟踪进程"><a href="#跟踪进程" class="headerlink" title="跟踪进程"></a>跟踪进程</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> docker logs <span class="token punctuation">[</span>-f<span class="token punctuation">]</span> <span class="token punctuation">[</span>-ft<span class="token punctuation">]</span> <span class="token punctuation">[</span>names<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>-f 实时跟踪</li>
<li>-ft 加上时间戳</li>
</ul>
<p>我们也可以跟踪容器日志的某一片段，和之前类似，只需要在 tail 命令后加入-f –tail 标志即可。例如，可以用 _docker logs –tail 10 daemon_dave_ 获取日志的最后 10 行内容。另外，也可以用<em>docker logs –tail 0 -f daemon_dave</em> 命令来跟踪某个容器的最新日志而不必读取整个日志文件。</p>
<h3 id="日志驱动"><a href="#日志驱动" class="headerlink" title="日志驱动"></a>日志驱动</h3><p>将日志输出到指定的文件</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> docker run --log-driver<span class="token operator">=</span><span class="token string">"syslog"</span> --name daemon_dwayne -d ubuntu /bin/sh -c <span class="token string">"while true; do echo hello world; sleep 1;done"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="查看容器内进程"><a href="#查看容器内进程" class="headerlink" title="查看容器内进程"></a>查看容器内进程</h3><p>docker top [container]</p>
<h3 id="统计信息"><a href="#统计信息" class="headerlink" title="统计信息"></a>统计信息</h3><p>docker stats</p>
<h3 id="在容器内启动新进程"><a href="#在容器内启动新进程" class="headerlink" title="在容器内启动新进程"></a>在容器内启动新进程</h3><p>在 Docker 1.3 之后，也可以通过 docker exec 命令在容器内部额外启动新进程。</p>
<h3 id="自动重启容器"><a href="#自动重启容器" class="headerlink" title="自动重启容器"></a>自动重启容器</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> docker run --restart<span class="token operator">=</span>always --name daemon_dave -d ubuntu /
 　 bin/sh -c "while <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> hello world<span class="token punctuation">;</span> <span class="token function">sleep</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在本例中，–restart 标志被设置为 always 。无论容器的退出代码是什么，Docker 都会自动重启该容器。除了 always ，还可以将这个标志设为 on-failure ，这样，只有当容器的退出代码为非 0 值的时候，才会自动重启。另外，on-failure 还接受一个可选的重启次数参数</p>
<blockquote>
<p>–restart=on-failure:5<br>最多重启 5 次</p>
</blockquote>
<h3 id="深入容器"><a href="#深入容器" class="headerlink" title="深入容器"></a>深入容器</h3><p>除了通过 docker ps 命令获取容器的信息，还可以使用 docker inspect 来获得更多的容器信息</p>
<p>docker inspect 命令会对容器进行详细的检查，然后返回其配置信息，包括名称、命令、网络配置以及很多有用的数据</p>
<p>也可以用-f 或者–format 标志来选定查看结果</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> docker inspect --format<span class="token operator">=</span><span class="token string">'&#123;&#123; .State.Running &#125;&#125;'</span> daemon_dave<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>上面这条命令会返回容器的运行状态，示例中该状态为 false</p>
</blockquote>
<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><blockquote>
<p>sudo docker rm `sudo docker ps -a -q`</p>
</blockquote>
<p>上面的 docker ps 命令会列出现有的全部容器，-a 标志代表列出所有容器，而-q 标志则表示只需要返回容器的 ID 而不会返回容器的其他信息。</p>
<h3 id="提交-commit"><a href="#提交-commit" class="headerlink" title="提交(commit)"></a>提交(commit)</h3><p>也可以在提交镜像时指定更多的数据（包括标签）来详细描述所做的修改。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker commit -m<span class="token string">"A new custom image"</span> -a<span class="token string">"James Turnbull"</span> <span class="token punctuation">\</span>　
4aab3ce3cb76 jamtur01/apache2:webserver　

f99ebb6fed1f559258840505a0f5d5b6173177623946815366f3e3acff01adef”
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这条命令里，我们指定了更多的信息选项。首先-m 选项用来指定新创建的镜像的提交信息。同时还指定了–a 选项，用来列出该镜像的作者信息。接着指定了想要提交的容器的 ID。最后的 jamtur01/apache2 指定了镜像的用户名和仓库名，并为该镜像增加了一个 webserver 标签。</p>
<h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>我们推荐使用 Dockerfile 方法来代替 docker commit ，因为通过前者来构建镜像更具备可重复性、透明性以及幂等性。<br>一旦有了 Dockerfile，我们就可以 使用 docker build 命令基于该 Dockerfile 中的指令构建一个新的镜像。</p>
<p><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Dockerfile 介绍</a></p>
<p><strong>必要参数</strong>:</p>
<ul>
<li>FROM creates a layer from the ubuntu:18.04 Docker image.</li>
<li>COPY adds files from your Docker client’s current directory.</li>
<li>RUN builds your application with make.</li>
<li>CMD specifies what command to run within the container.</li>
</ul>
<p>默认情况下，RUN 指令会在 shell 里使用命令包装器/bin/sh -c 来执行。如果是在一个不支持 shell 的平台上运行或者不希望在 shell 中运行（比如避免 shell 字符串篡改），也可以使用 exec 格式的 RUN 指令，如代码清单 4-23 所示。</p>
<blockquote>
<p>RUN [ “apt-get”, “ install”, “-y”, “nginx” ]</p>
</blockquote>
<p>在这种方式中，我们使用一个数组来指定要运行的命令和传递给该命令的每个参数。</p>
<p><strong>可以指定多个 EXPOSE 指令来向外部公开多个端口。</strong></p>
<h3 id="基于-Dockerfile-构建新镜像"><a href="#基于-Dockerfile-构建新镜像" class="headerlink" title="基于 Dockerfile 构建新镜像"></a>基于 Dockerfile 构建新镜像</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token builtin class-name">cd</span> static_web
$ <span class="token function">sudo</span> docker build -t<span class="token operator">=</span><span class="token string">"jamtur01/static_web"</span> <span class="token builtin class-name">.</span>
Sending build context to Docker daemon <span class="token number">2.56</span> kB
Sending build context to Docker daemon
Step <span class="token number">0</span> <span class="token builtin class-name">:</span> FROM ubuntu:14.04
　---<span class="token operator">></span> ba5877dc9bec
Step <span class="token number">1</span> <span class="token builtin class-name">:</span> MAINTAINER James Turnbull <span class="token string">"james@example.com"</span>
　---<span class="token operator">></span> Running <span class="token keyword">in</span> b8ffa06f9274
　---<span class="token operator">></span> 4c66c9dcee35
Removing intermediate container b8ffa06f9274
Step <span class="token number">2</span> <span class="token builtin class-name">:</span> RUN <span class="token function">apt-get</span> update
　---<span class="token operator">></span> Running <span class="token keyword">in</span> f331636c84f7
　---<span class="token operator">></span> 9d938b9e0090
Removing intermediate container f331636c84f7
Step <span class="token number">3</span> <span class="token builtin class-name">:</span> RUN <span class="token function">apt-get</span> <span class="token function">install</span> -y nginx
　---<span class="token operator">></span> Running <span class="token keyword">in</span> 4b989d4730dd
  ---<span class="token operator">></span> 93fb180f3bc9
Removing intermediate container 4b989d4730dd
Step <span class="token number">4</span> <span class="token builtin class-name">:</span> RUN <span class="token builtin class-name">echo</span> <span class="token string">'Hi, I am in your container'</span> <span class="token operator">></span>/usr/share/
　nginx/html/index.html
　---<span class="token operator">></span> Running <span class="token keyword">in</span> b51bacc46eb9
　---<span class="token operator">></span> b584f4ac1def
Removing intermediate container b51bacc46eb9
Step <span class="token number">5</span> <span class="token builtin class-name">:</span> EXPOSE <span class="token number">80</span>
　---<span class="token operator">></span> Running <span class="token keyword">in</span> 7ff423bd1f4d
　---<span class="token operator">></span> 22d47c8cb6e5
Successfully built 22d47c8cb6e5
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>sudo docker build -t=”jamtur01/static_web” .</p>
</blockquote>
<p>上面命令中最后的.告诉 Docker 到本地目录中去找 Dockerfile 文件。也可以指定一个 Git 仓库的源地址来指定 Dockerfile 的位置</p>
<blockquote>
<p>sudo docker build -t=”jamtur01/static_web:v1” \　<a href="mailto:&#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;">&#103;&#x69;&#116;&#x40;&#103;&#105;&#116;&#104;&#117;&#98;&#46;&#x63;&#x6f;&#109;</a>:jamtur01/docker-static_web</p>
</blockquote>
<h3 id="dockerfile-构建缓存"><a href="#dockerfile-构建缓存" class="headerlink" title="dockerfile 构建缓存"></a>dockerfile 构建缓存</h3><blockquote>
<p>sudo docker build –no-cache -t=”jamtur01/static_web” .</p>
</blockquote>
<p>可以通过添加 <strong>–no-cache</strong> 来不构建缓存,但是缓存能大大加快重复构建时消耗的时间.</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM ubuntu:14.04　
MAINTAINER James Turnbull <span class="token string">"james@example.com"</span>　
ENV REFRESHED_AT <span class="token number">2014</span>-07-01　
RUN <span class="token function">apt-get</span> -qq update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>让我们一步步来分析一下这个新的 Dockerfile 。首先，我通过 FROM 指令为新镜像设置了一个基础镜像 ubuntu:14.04 。接着，我又使用 MAINTAINER 指令添加了自己的详细联系信息。之后我又使用了一条新出现的指令 ENV 来在镜像中设置环境变量。在这个例子里，我通过 ENV 指令来设置了一个名为 REFRESHED_AT 的环境变量，这个环境变量用来表明该镜像模板最后的更新时间。最后，我使用了 RUN 指令来运行 apt-get -qq update 命令。该指令运行时将会刷新 APT 包的缓存，用来确保我们能将要安装的每个软件包都更新到最新版本。</p>
<p>有了这个模板，如果想刷新一个构建，只需修改 ENV 指令中的日期。这使 Docker 在命中 ENV 指令时开始重置这个缓存，并运行后续指令而无须依赖该缓存。也就是说，RUN apt-get update 这条指令将会被再次执行，包缓存也将会被刷新为最新内容。</p>
<h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><p>docker history [name\id]<br>查看构建这个镜像的每一层,以及 dockerfile 指令</p>
<h3 id="从新镜像启动容器"><a href="#从新镜像启动容器" class="headerlink" title="从新镜像启动容器"></a>从新镜像启动容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker run -d -p <span class="token number">80</span> --name static_web jamtur01/static_web <span class="token punctuation">\</span>　
nginx -g <span class="token string">"daemon off;"</span>　
6751b94bb5c001a650c918e9a7f9683985c3eb2b026c2f1776e61190669494<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在这里，我使用 docker run 命令，基于刚才构建的镜像的名字，启动了一个名为 static_web 的新容器。我们同时指定了-d 选项，告诉 Docker 以分离（detached）的方式在后台运行。这种方式非常适合运行类似 Nginx 守护进程这样的需要长时间运行的进程。我们也指定了需要在容器中运行的命令：nginx -g “daemon off;” 。这将以前台运行的方式启动 Nginx，来作为我们的 Web 服务器。</p>
<p>我们可以使用 docker inspect 或者 docker port 命令来查看容器内的 80 端口具体被绑定到了宿主机的哪个端口上。</p>
<p>Docker 还提供了一个更简单的方式，即-P 参数，该参数可以用来对外公开在 Dockerfile 中通过 EXPOSE 指令公开的所有端口</p>
<h3 id="Dockerfile-指令"><a href="#Dockerfile-指令" class="headerlink" title="Dockerfile 指令"></a>Dockerfile 指令</h3><p><a href="http://docs.docker.com/reference/builder/">参考</a></p>
<h4 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h4><p>需要注意的是，要运行的命令是存放在一个数组结构中的。这将告诉 Docker 按指定的原样来运行该命令。当然也可以不使用数组而是指定 CMD 指令，这时候 Docker 会在指定的命令前加上/bin/sh -c 。这在执行该命令的时候可能会导致意料之外的行为， <strong>所以 Docker 推荐一直使用以数组语法来设置要执行的命令</strong> 。</p>
<blockquote>
<p>在 Dockerfile 中只能指定一条 CMD 指令。如果指定了多条 CMD 指令，也只有最后一条 CMD 指令会被使用。如果想在启动容器时运行多个进程或者多条命令，可以考虑使用类似 Supervisor 这样的服务管理工具。</p>
</blockquote>
<h4 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h4><p>我们也可以组合使用 ENTRYPOINT 和 CMD 指令来完成一些巧妙的工作。比如，我们可能想在 Dockerfile 里指定代码清单 4-55 所示的内容。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">代码清单4-55　同时使用ENTRYPOINT 和CMD 指令
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"/usr/sbin/nginx"</span><span class="token punctuation">]</span>　
CMD <span class="token punctuation">[</span><span class="token string">"-h"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>此时当我们启动一个容器时，任何在命令行中指定的参数都会被传递给 Nginx 守护进程。比如，我们可以指定-g “daemon off”; 参数让 Nginx 守护进程以前台方式运行。如果在启动容器时不指定任何参数，则在 CMD 指令中指定的-h 参数会被传递给 Nginx 守护进程，即 <strong>Nginx 服务器会以/usr/sbin/nginx -h</strong> 的方式启动，该命令用来显示 Nginx 的帮助信息。</p>
<h4 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h4><p>WORKDIR 指令用来在从镜像创建一个新容器时，在容器内部设置一个工作目录，ENTRYPOINT 和/或 CMD 指定的程序会在这个目录下执行。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">WORKDIR /opt/webapp/db　
RUN bundle <span class="token function">install</span>　
WORKDIR /opt/webapp　
ENTRYPOINT <span class="token punctuation">[</span> <span class="token string">"rackup"</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里，我们将工作目录切换为/opt/webapp/db 后运行了 bundle install 命令，之后又将工作目录设置为/opt/webapp ，最后设置了 ENTRYPOINT 指令来启动 rackup 命令。<br>可以通过-w 标志在运行时覆盖工作目录</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker run -ti -w /var/log ubuntu <span class="token builtin class-name">pwd</span>　
/var/log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>该命令会将容器内的工作目录设置为/var/log 。</p>
<h3 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h3><p>ENV 指令用来在镜像构建过程中设置环境变量</p>
<h3 id="USER"><a href="#USER" class="headerlink" title="USER"></a>USER</h3><p>USER 指令用来指定该镜像会以什么样的用户去运行</p>
<p>我们可以指定用户名或 UID 以及组或 GID，甚至是两者的组合</p>
<h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>VOLUME 指令用来向基于镜像创建的容器添加卷。一个卷是可以存在于一个或者多个容器内的特定的目录，这个目录可以绕过联合文件系统，并提供如下共享数据或者对数据进行持久化的功能。</p>
<ul>
<li>卷可以在容器间共享和重用。</li>
<li>一个容器可以不是必须和其他容器共享卷。</li>
<li>对卷的修改是立时生效的。</li>
<li>对卷的修改不会对更新镜像产生影响。</li>
<li>卷会一直存在直到没有任何容器再使用它。</li>
</ul>
<p>卷功能让我们可以将数据（如源代码）、数据库或者其他内容添加到镜像中而不是将这些内容提交到镜像中，并且允许我们在多个容器间共享这些内容。我们可以利用此功能来测试容器和内部的应用程序代码，管理日志，或者处理容器内部的数据库。</p>
<h4 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h4><p>ADD 指令用来将构建环境下的文件和目录复制到镜像中</p>
<p>比如，在安装一个应用程序时。ADD 指令需要源文件位置和目的文件位置两个参数，如代码清单 4-69 所示。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">代码清单4-69　使用ADD 指令
ADD software.lic /opt/application/software.lic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><strong>指向源文件的可以是一个 URL</strong></p>
<blockquote>
<p>ADD 指令会使得构建缓存变得无效，这一点也非常重要。如果通过 ADD 指令向镜像添加一个文件或者目录，那么这将使 Dockerfile 中的后续指令都不能继续使用之前的构建缓存。</p>
</blockquote>
<h4 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h4><p>COPY 指令非常类似于 ADD ，它们根本的不同是 COPY 只关心在构建上下文中复制本地文件，而不会去做文件提取（extraction）和解压（decompression）的工作。COPY 指令的使用如代码清单 4-72 所示。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">代码清单4-72　使用COPY 指令
COPY conf.d/ /etc/apache2/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这条指令将会把本地 conf.d 目录中的文件复制到/etc/apache2/ 目录中。</p>
<blockquote>
<p>COPY 指令的目的位置则必须是容器内部的一个绝对路径。</p>
</blockquote>
<h4 id="LABEL"><a href="#LABEL" class="headerlink" title="LABEL"></a>LABEL</h4><p>LABEL 指令用于为 Docker 镜像添加元数据。元数据以键值对的形式展现。我们可以来看一个例子，见代码清单 4-73。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">代码清单4-73　添加LABEL 指令
LABEL <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span>
LABEL <span class="token assign-left variable">location</span><span class="token operator">=</span><span class="token string">"New York"</span> <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"Data Center"</span> <span class="token assign-left variable">role</span><span class="token operator">=</span><span class="token string">"Web Server"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>LABEL 指令以 label=”value”的形式出现。可以在每一条指令中指定一个元数据，或者指定多个元数据，不同的元数据之间用空格分隔。推荐将所有的元数据都放到一条 LABEL 指令中，以防止不同的元数据指令创建过多镜像层。</p>
<h4 id="STOPSINGAL"><a href="#STOPSINGAL" class="headerlink" title="STOPSINGAL"></a>STOPSINGAL</h4><p>STOPSIGNAL 指令用来设置停止容器时发送什么系统调用信号给容器。这个信号必须是内核系统调用表中合法的数，如 9，或者 SIGNAME 格式中的信号名称，如 SIGKILL。</p>
<h4 id="ARG"><a href="#ARG" class="headerlink" title="ARG"></a>ARG</h4><p>ARG 指令用来定义可以在 docker build 命令运行时传递给构建运行时的变量，我们只需要在构建时使用–build-arg 标志即可。用户只能在构建时指定在 Dockerfile 文件中定义过的参数。<br>代码清单 4-75 　添加 ARG 指令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ARG build
ARG <span class="token assign-left variable">webapp_user</span><span class="token operator">=</span>user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上面例子中第二条 ARG 指令设置了一个默认值，如果构建时没有为该参数指定值，就会使用这个默认值。</p>
<blockquote>
<p>读到这里，也许你会认为使用 ARG 来传递证书或者秘钥之类的信息是一个不错的想法。但是，请千万不要这么做。你的机密信息在构建过程中以及镜像的构建历史中会被暴露。</p>
</blockquote>
<h4 id="ONBUILD"><a href="#ONBUILD" class="headerlink" title="ONBUILD"></a>ONBUILD</h4><p>ONBUILD 指令能为镜像添加触发器（trigger）。当一个镜像被用做其他镜像的基础镜像时（比如用户的镜像需要从某未准备好的位置添加源代码，或者用户需要执行特定于构建镜像的环境的构建脚本），该镜像中的触发器将会被执行。</p>
<blockquote>
<p>触发器会在构建过程中插入新指令，我们可以认为这些指令是紧跟在 FROM 之后指定的。</p>
</blockquote>
<p>比如，我们为 Apache2 镜像构建一个全新的 Dockerfile ，该镜像名为 jamtur01/ apache2 ，如代码清单 4-80 所示。</p>
<p>代码清单 4-80 　新的 ONBUILD 镜像 Dockerfile</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM ubuntu:14.04　
MAINTAINER James Turnbull <span class="token string">"james@example.com"</span>　
RUN <span class="token function">apt-get</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y apache2　
ENV APACHE_RUN_USER www-data　
ENV APACHE_RUN_GROUP www-data　
ENV APACHE_LOG_DIR /var/log/apache2　
ONBUILD ADD <span class="token builtin class-name">.</span> /var/www/　
EXPOSE <span class="token number">80</span>　
ENTRYPOINT <span class="token punctuation">[</span><span class="token string">"/usr/sbin/apache2"</span><span class="token punctuation">]</span>　
CMD <span class="token punctuation">[</span><span class="token string">"-D"</span>, <span class="token string">"FOREGROUND"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们就来构建该镜像</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">sudo</span> docker build -t<span class="token operator">=</span><span class="token string">"jamtur01/apache2"</span> <span class="token builtin class-name">.</span>　
<span class="token punctuation">..</span>.　
Step <span class="token number">7</span> <span class="token builtin class-name">:</span> ONBUILD ADD <span class="token builtin class-name">.</span> /var/www/　
---<span class="token operator">></span> Running <span class="token keyword">in</span> 0e117f6ea4ba　
---<span class="token operator">></span> a79983575b86　
Successfully built a79983575b86<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在新构建的镜像中包含一条 ONBUILD 指令，该指令会使用 ADD 指令将构建环境所在的目录下的内容全部添加到镜像中的/var/www/ 目录下。 <strong>我们可以轻而易举地将这个 Dockerfile 作为一个通用的 Web 应用程序的模板，可以基于这个模板来构建 Web 应用程序</strong> 。</p>
<blockquote>
<p>这里有好几条指令是不能用在 ONBUILD 指令中的，包括 FROM 、MAINTAINER 和 ONBUILD 本身。之所以这么规定是为了防止在 Dockerfile 构建过程中产生递归调用的问题。</p>
</blockquote>
<h3 id="推送到-DockerHub-amp-amp-自动构建"><a href="#推送到-DockerHub-amp-amp-自动构建" class="headerlink" title="推送到 DockerHub &amp;&amp; 自动构建"></a>推送到 DockerHub &amp;&amp; 自动构建</h3><h2 id="在测试中使用-Docker"><a href="#在测试中使用-Docker" class="headerlink" title="在测试中使用 Docker"></a>在测试中使用 Docker</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> nginx <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> nginx
<span class="token function">wget</span> https://raw.githubusercontent.com/jamtur01/dockerbook-code/master/code/5/sample/nginx/global.conf
<span class="token function">wget</span> https://raw.githubusercontent.com/jamtur01/dockerbook-code/master/code/5/sample/nginx/nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>在配置文件 nginx.conf 中, <strong>daemon off;</strong> 选项阻止 Nginx 进入后台，强制其在前台运行。这是因为要想保持 Docker 容器的活跃状态，需要其中运行的进程不能中断。默认情况下，Nginx 会以守护进程的方式启动，这会导致容器只是短暂运行，在守护进程被 fork 启动后，发起守护进程的原始进程就会退出，这时容器就停止运行了。</p>
<blockquote>
<p>docker build -t jamtur01/nginx .</p>
</blockquote>
<p>从本地构建 dockerfile</p>
<h3 id="从-Sample-网站和-Nginx-镜像构建容器"><a href="#从-Sample-网站和-Nginx-镜像构建容器" class="headerlink" title="从 Sample 网站和 Nginx 镜像构建容器"></a>从 Sample 网站和 Nginx 镜像构建容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> website <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> website
$ <span class="token function">wget</span> https://raw.githubusercontent.com/jamtur01/dockerbook-code/master/code/5/sample/website/index.html
$ <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
over<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在,开始测试 docker 容器</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> docker run -d -p <span class="token number">80</span> --name website <span class="token punctuation">\</span>
-v <span class="token environment constant">$PWD</span>/website:/var/www/html/website <span class="token punctuation">\</span>
jamtur01/nginx nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>-v 这个选项允许我们将宿主机的目录作为卷，挂载到容器里。</p>
<blockquote>
<p>现在稍微偏题一下，我们来关注一下卷这个概念。卷在 Docker 里非常重要，也很有用。卷是在一个或者多个容器内被选定的目录，可以绕过分层的联合文件系统（Union File System），为 Docker 提供持久数据或者共享数据。这意味着对卷的修改会直接生效，并绕过镜像。当提交或者创建镜像时，卷不被包含在镜像里。</p>
</blockquote>
<p><strong>卷可以在容器间共享。即便容器停止，卷里的内容依旧存在。</strong></p>
<p>回到刚才的例子。当我们因为某些原因不想把应用或者代码构建到镜像中时，就体现出卷的价值了。例如：</p>
<ul>
<li>希望同时对代码做开发和测试；</li>
<li>代码改动很频繁，不想在开发过程中重构镜像；</li>
<li>希望在多个容器间共享代码。</li>
</ul>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><h2 id="网站链接"><a href="#网站链接" class="headerlink" title="网站链接"></a>网站链接</h2><p><a href="https://docs.docker.com/get-started/">Docker Doc</a><br><a href="https://hijiangtao.github.io/2018/04/17/Docker-in-Action/">Docker 学习新手笔记：从入门到放弃</a></p>
<h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><h3 id="术语定义"><a href="#术语定义" class="headerlink" title="术语定义"></a>术语定义</h3><p><strong>images</strong> :An image is an executable package that includes everything needed to run an application–the code, a runtime, libraries, environment variables, and configuration files.</p>
<p><strong>container</strong> :A container is a runtime instance of an image–what the image becomes in memory when executed (that is, an image with state, or a user process). You can see a list of your running containers with the command, docker ps, just as you would in Linux.</p>
<p><code>container和VM的区别</code></p>
<p><img src="evernotecid://633A359B-908B-4B09-BD14-4B8DC1F44EF5/appyinxiangcom/18822571/ENResource/p199" alt="5c3f63cdcb67e40b1e9a3f1676b17868.png" loading="lazy"></p>
<h3 id="常用命令集"><a href="#常用命令集" class="headerlink" title="常用命令集"></a>常用命令集</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker container <span class="token function">ls</span>
docker container <span class="token function">ls</span> --all
docker container <span class="token function">ls</span> -aq

docker <span class="token function">rm</span> <span class="token variable"><span class="token variable">`</span>docker <span class="token function">ps</span> -a<span class="token operator">|</span><span class="token function">grep</span> Exited<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&#123;print <span class="token variable">$1</span>&#125;'</span><span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="参数集"><a href="#参数集" class="headerlink" title="参数集"></a>参数集</h3><p>-d detached 单独地</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>操作系统复习(易错题&amp;amp;&amp;amp;概念题及部分解析)</title>
    <url>/2019-12-05-some-question-of-OS-review/</url>
    <content><![CDATA[<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>1.单处理机计算机系统中，（A ）是并行操作的。</p>
<p>A.处理机操作和通道操作是并行的<br>B.程序与程序<br>C.主程序与子程序<br>D.用户程序与操作系统程序</p>
<pre><code>单处理机系统：只有1个运算器，运行状态最多一个
单处理机操作：理解为cpu
通道：有自己的处理器，能自己执行指令，无需cpu</code></pre>
<p>2.处理机的所有指令可以在（D ）中执行。</p>
<p>A.目态 B.浏览器中 C.任意时间 D.系统态</p>
<pre><code>Cpu工作状态分为：系统态和用户态（目态）

引入两个状态的原因：

为了避免用户程序错误的使用特权指令，保护os不被用户程序破坏，规定：cpu处于用户态时，不允许执行特权指令，当cpu处于系统态时，可以执行包括特权指令在内的一切机器指令</code></pre>
<p>3.下面六个系统中，必须是实时操作系统的有（C ）个。</p>
<p>(1)航空订票系统 (2)过程控制系统 (3)机器口语翻译系统 (4)计算机辅助系统 (5)办公自动化系统 (6)计算机激光照排系统</p>
<p>A.1 B.2 C.3 D.4</p>
<pre><code>1，2，3</code></pre>
<p>4.一般来说，为了实现多道程序设计，计算机最需要（ A）。</p>
<p>A.更大的内存<br>B.更多的外设<br>C.更快的 CPU<br>D.更先进的终端</p>
<pre><code>多道程序设计：在内存中同时存放几道互相独立的程序，使得他们在管理控制程序下相互穿插运行。

多道程序设计按照一定的作业调度算法将作业队列中的作业调入到内存中，使他们共享cpu和各种资源，所以内存更大才能实现多道</code></pre>
<p>5.对进程间互斥的使用临界资源，进程可以（ D）。</p>
<p>A.互斥的进入临界区<br>B.互斥的进入各自的临界区<br>C.互斥的进入同一临界区<br>D.互斥的进入各自的同类资源临界区</p>
<pre><code>临界区：每个进程中访问临界资源的那段代码

临界资源：一次只允许一个进程访问的共享资源，比如打印机

题目的意思是进程间互斥，针对同类临界资源的，而对应的代码应该是独立的，所以各个进程只能访问各自的代码空间，所以互斥的进入各自同类临界区，从另一个方向解释，临界区是使用临界资源的代码，同类资源临界区则是使用同一临界资源的代码，临界资源由多种，使他们不一定互斥，而使用同一临界资源自然是互斥的

A 不完整

B 同样不完整

C 应该是进入各自的临界区</code></pre>
<p>6.当一进程因在记录型信号量 S 上执行 P（S）操作而被阻塞后，S 的值为（B）。</p>
<p>A.＞ 0<br>B.＜ 0<br>C.≥0<br>D.≤0</p>
<pre><code>记录型信号量：包含一个代表资源数目的整型变量和一个进程链表（等待队列）

整型信号量：只包含一个代表资源数目的整型变量

对于记录型信号量，采取了让权等待策略，当s&lt;0，即不存在可用资源的时候，因为其存在进程链表等待队列，所以不会盲等，而是会阻塞

对于整型信号量，没有采取让权等待策略，当s&lt;=0的时候，即也是不存在可用资源的时候，因为其没有进程等待队列，所以不会阻塞，而是会陷入盲等状态</code></pre>
<p>7.当一进程因在记录型信号量 S 上执行 V（S）操作而导致唤醒另一进程后，S 的值为（D）。</p>
<p>A.＞ 0<br>B.＜ 0<br>C.≥0<br>D.≤0</p>
<pre><code>唤醒另一进程，说明有进程可被唤醒，就是说有进程在等待进行临界区，若V操作前只有一个进程在等待，则V操作之后S=0，若V操作前有多个进程在等待，是V操作之后S&lt;0，所以，综合来说，S&lt;=0</code></pre>
<p>8.银行家算法中的数据结构包括有可利用资源向量 Available、最大需求矩阵 Max、分配矩阵 Allocation、需求矩阵 Need，下列选项中表述正确的是（B ）。</p>
<p>A.Max[i,j]= Allocation[i,j]+Need[i,j]</p>
<p>B.Need[i,j]= Max[i,j]- Allocation[i,j]</p>
<p>C.Max[i,j]= Allocation[i,j]-Need[i,j]</p>
<p>D.Need[i,j]= Max[i,j]+Allocation[i,j]</p>
<pre><code>Available:可利用资源向量，每一类元素代表可利用资源的数目，比如Available[j]=k,表示系统中R[j]类资源现在有k个

Max:最大需求矩阵，定义了系统中n个进程中每一个进程对m类资源的最大需求，比如max[i,j]=k,表示进程i需要R[j]类资源k个

Allocation:分配矩阵，定义了系统中每一类资源分配给每一进程的资源数，比如Allocation[i,j[=k,表示进程i当前已经得到的R[j]类资源数目为K

Need：需求矩阵，表示每一个进程尚需的各类资源数，比如Need[i,j]=k,表示进程i还需要R[j]类资源k个才可以完成任务

关系：Need[i,j]=Max[i,j]-Allocation[i,j]</code></pre>
<p>9.分页存储管理的存储保护是通过（A ）完成的。</p>
<p>A.页表（页表寄存器）<br>B.快表<br>C.存储键<br>D.索引动态重定</p>
<p>10.在存储管理中，采用覆盖与交换技术的目的是（A ）。</p>
<p>A.减少程序占用的主存空间</p>
<p>B.物理上扩充主存容量</p>
<p>C.提高 CPU 效率</p>
<p>D.代码在主存中共享</p>
<pre><code>覆盖技术：把程序划分为若干给功能上相对独立的程序段，按照其自身逻辑结构使那些不会同时运行的程序段共享同一块内存区，程序段先保存在磁盘，当程序的前一部分结束后，把后续段调入内存，覆盖前面的程序段(单一连续储存管理中使用)

交换技术：在分时系统中，用户的进程比内存能容纳的数量更多，系统将哪些不再允许的进程或者某一部分调出内存，暂时存放在外存上的一个后备存储区，通常称为交换区，当需要允许这些进程的时候，再将他们装入内存</code></pre>
<p>11.能够装入内存任何位置的代码程序必须是（C ）。</p>
<p>A.可重入的</p>
<p>B.可定位的</p>
<p>C.可动态链接的</p>
<p>D.可静态链接的</p>
<pre><code>将用户源程序变为内存中可执行的程序，需要三个步骤

1. 编译：由编译程序将用户源代码编译成若干个目标模块

2. 链接：将编译形成后的一组目标模块以及所需的库函数链接在一起，形成一个完整的装入模块

3. 装入：由装入程序将装入模块装入内存中运行

链接的三种方式：

1. 静态链接：在程序运行之前，先将各目标模块及他们所需的库函数链接成一个完整的可执行的程序，以后不再拆开

2. 装入时动态链接：将编译得到的目标模块在装入内存时，采取边装入边链接的方式

3. 运行时动态链接：对某些目标模块，是在程序执行中需要该目标模块时，才对它进行链接，其优点是便于修改和更新，便于实现对目标模块的共享



 可重入代码（又叫纯代码）：允许多个进程同时访问的代码，但不允许进程修改它

可定位代码：即可重定位的代码

排除AB，

D：静态链接的话，以后是不允许拆开的，排除，

选C</code></pre>
<p>12.下面（ B）内存管理方法不能实现扩大内存？</p>
<p>A.动态页式管理 B.静态页式管理</p>
<p>C.分段存储管理 D.段页式存储管理</p>
<pre><code>静态页式管理：在作业或者进程执行前，把作业或者进程全部装入内存

动态页式管理：不会一次性全部装入，只装入反复被调用的部分，其余部分需要的时候再装入，无形中扩大了内存</code></pre>
<p>13.设从磁盘将一块数据传送到缓冲区所用实际为 80μs，将缓冲区中数据传送到用户区所用时间为 40μs，CPU 处理数据所用的时间为 30μs。则处理该数据，采用单缓冲传送磁盘数据，系统所用总时间为（A ）。</p>
<p>A.120μs B.110μs C.150μs D.70μs</p>
<p>80+max(40,30)=120</p>
<pre><code>缓冲区存在的意义：

使用户输入输出数据的速度与cpu处理数据的速度协调

因而用户输入数据和cpu处理数据的过程可以并行，所以二者取max即可

max(80,30)+40=120</code></pre>
<p>14.假设就绪队列中有 10 个进程，以时间片轮转方式进行进程调度，时间片大小为 300ms，CPU 进行进程切换需要花费 10ms，则系统开销所占比率和进程数目增加到 30 个，其余条件不变时系统开销所占的比率相比，其结果是（ B ）。</p>
<p>A.大于 B.等于 C.小于 D.不能确定</p>
<pre><code>系统开销比率=调度耗时（进程切换耗时）/时间片长度

所以不变</code></pre>
<p>15.某进程在运行过程中等待的事件已发生，例如，打印结束，此时该进程的状态将（ C. ）。</p>
<p>A.从就绪变为运行 B.从运行变为就绪</p>
<p>C.从运行变为阻塞 D.从阻塞变为就绪</p>
<pre><code>进程主要的三个状态：运行，就绪，阻塞，某进程在运行中等待的时间已经发生，注意是在运行中，运行中是可以等待OI来中断这个进程，此时开始打印，但是cpu就会去处理其他进程，这样这个进程就处于阻塞态</code></pre>
<p>16.现代操作系统的两个基本特征是（ C. ）和资源共享。</p>
<p>A.多道程序设计 B. 中断处理</p>
<p>C.程序的并发执行 D. 实现分时与实时处理</p>
<pre><code>并发和共享是操作系统最基本的两个特性，他们又是互为存在条件，一方面资源共享是以进程的并发性为执行条件的，若系统不允许并发，那么资源共享就没有任何意义，另一方面系统若不能对共享的资源实现有效的管理，则也必将影响进程的并发执行</code></pre>
<p>17.通道是一种特殊的处理机，具有（ A. ）能力。</p>
<p>A.执行 I/O 指令集。 B.执行 CPU 指令集。</p>
<p>C.传送 I/O 命令。 D.运行 I/O 进程。</p>
<pre><code>通道的目的是为了使得原来一些由cpu处理的IO任务交由通道来承担，从而解脱cpu，通道所能执行的命令局限于IO操作的指令，也就是IO指令集</code></pre>
<p>18.分时系统需要使用下面哪些成分?</p>
<p>(1)多道程序设计技术 (2)作业说明书</p>
<p>(3)终端命令解释程序 (4)中断处理</p>
<p>(5)优先级调度 (6)系统调用</p>
<pre><code>(1)、(3)、(4)、(6)</code></pre>
<p>19.能直接对系统中各类资源进行动态分配和管理，控制、协调各任务的并行执行且系统中主机无主次之分，并向用户提供统一的、有效的软件接口的系统是 。</p>
<p>A．分布式操作系统 　 B．实时操作系统</p>
<p>C．网络操作系统 　 D．批处理操作系统</p>
<pre><code>A</code></pre>
<p>20.用 P、V 操作可以解决 互斥问题。<br>A．一切 B．某些 C．正确 D．错误</p>
<pre><code>A</code></pre>
<p>21.多道程序环境下，操作系统分配资源以 为基本单位。<br>A．程序 B．指令 C. 进程 D．作业</p>
<pre><code>C</code></pre>
<p>22.在操作系统中，使计算机系统能实现进程并发执行，保证系统正常工作的机制是 。<br>A．中断 B．查询<br>C．同步 D．互斥</p>
<pre><code>A</code></pre>
<p>23.用户使用操作系统通常有三种手段，它们是终端命令、系统调用命令和 。<br>A．计算机高级指令 B．宏命令<br>C. 作业控制语言 D．汇编语言</p>
<pre><code>C</code></pre>
<p>24.作业调度算法的选择常考虑因素之一是使系统有最高的吞吐量，为此应 。<br>A. 不让处理机空闲 B．能够处理尽可能多的作业<br>C. 使各类用户都满意 D．不使系统过于复杂</p>
<pre><code>B</code></pre>
<p>25.—个作业的完成要经过若干加工步骤，这每个步骤称为 。<br>A. 作业流 B. 子程序 C. 子进程 D. 作业步</p>
<pre><code>D</code></pre>
<p>26.在批处理方式下，操作员把一批作业组织成 向系统成批输入。<br>A. 作业步 B. 作业流 C. 子程序 D.程序组</p>
<pre><code>B</code></pre>
<p>27.很好地解决了“零头”问题的存储管理方法是 。<br>A．页式存储管理 B．段式存储管理<br>C．多重分区管理 D．可变式分区管理</p>
<pre><code>A</code></pre>
<p>28.如果一个程序为多个进程所共享，那么该程序的代码在执行的过程中不能被修改，即程序应该是 。<br>A. 可执行码 B. 可重入码<br>C. 可改变码 D. 可再现码</p>
<pre><code>B</code></pre>
<p>29.在可变分区方式管理下收回主存空间时，若已判定“空闲区表第 j 栏开始地址＝归还的分区开始地址+长度”，则表示 。<br>A．归还区有上邻空闲区 B．归还区有下邻空闲区间<br>C. 归还区有上、下邻空闲区 D．归还区无相邻空闲区间</p>
<pre><code>B
ps.上邻空闲区:第j栏开始地址+长度＝归还的分区开始地址</code></pre>
<p>30.在可变分区方式管理主存时、采用移动技术能提高主存的利用率，下列不能移动作业的情况是 。<br>A．正在取主存中的数据准备计算 B．正在计算一个表达式的值<br>C．正在把计算结果写入主存 D．正在等待外围设备传输消息</p>
<pre><code>C
ps.某个作业在执行过程中正在等待 &lt;u&gt;外围设备传输信息&lt;/u&gt; ，则该作业不能移动。</code></pre>
<p>31.不可能产生系统抖动现象的存储管理是 。<br>A. 固定分区管理 B. 分页式虚拟存储管理<br>C. 段式虚拟存储管理 D. 以上都不对</p>
<pre><code>A</code></pre>
<p>32.缓冲技术中的缓冲池在 中。<br>A．主存 B．外存 C．ROM D．寄存器</p>
<pre><code>A</code></pre>
<p>33.中断发生后，应保留 。<br>A．缓冲区指针 B．关键寄存器内容<br>C. 被中断的程序 D．页表</p>
<pre><code>B</code></pre>
<p>34.是操作系统中采用的以空间换取时间的技术。</p>
<p>A．Spooling 技术 B．虚拟存储技术<br>C. 覆盖与交换技术 D．通道技术</p>
<pre><code>    A
    ps,将独占设备转化为共享设备</code></pre>
<p>35.通道是一种 。<br>A. I/O 端口 B．数据通道<br>C. I/O 专用处理器 D．软件工具</p>
<pre><code>C</code></pre>
<p>36.为了解决不同用户文件的“命名冲突”问题，通常在文件系统中采用 。<br>A. 约定的方法 B. 多级目录<br>C. 路径 D. 索引</p>
<pre><code>B</code></pre>
<p>37.磁盘上的文件以 为单位读写。<br>A. 块 B. 记录<br>C. 柱面 D. 磁道</p>
<pre><code>A</code></pre>
<p>38.如果文件采用直接存取方式且文件大小不固定，则宜选择 文件结构。<br>A. 直接 B. 顺序<br>C. 随机 D. 索引</p>
<pre><code>D</code></pre>
<p>39.以下叙述中正确的是 。<br>A. 文件系统要负责文件存储空间的管理，但不能完成文件名到物理地址的转换。<br>B. 多级目录结构中，对文件的访问是通过路径名和用户目录名来进行的。<br>C. 文件被划分成大小相等的若干个物理块，一般物理块的大小是不固定的。<br>D. 逻辑记录是对文件进行存取操作的基本单位。</p>
<pre><code>D</code></pre>
<p>40.操作系统实现按名存取进行检索的关键在于解决 。<br>A. 文件逻辑地址到文件具体的物理地址的转换<br>B. 文件名称与文件具体的物理地址的转换<br>C. 文件逻辑地址到文件名称的转换<br>D. 文件名称到文件逻辑地址的转换</p>
<pre><code>B</code></pre>
<p>41.文件的逻辑结构是由 决定的。<br>A. 用户 B. 操作系统<br>C. 编译程序 D. 装入程序</p>
<pre><code>A
ps/逻辑-用户</code></pre>
<p>42.记录的成组和分解提高了存储介质的利用率和减少启动设备的次数，但代价是 。<br>A. 要设立主存缓冲区 B. 操作系统增加成组和分解功能<br>C. A 和 B D. 没有额外系统开销</p>
<pre><code>C</code></pre>
<p>43.采取哪种文件存取方式，主要取决于 。<br>A. 用户的使用要求 B. 存储介质的特性<br>C. A 和 B D. 文件的逻辑结构</p>
<pre><code>C</code></pre>
<p>44.下面关于操作系统的叙述正确的是（ ）。<br>A、批处理作业必须具有作业控制信息<br>B、分时系统不一定都具有人机交互功能<br>C、从响应时间的角度看，实时系统与分时系统差不多<br>D、由于采用了分时技术，用户可以独占计算机的资源</p>
<pre><code>A</code></pre>
<p>45、 操作系统程序结构的主要特点是( )。<br>A、 一个程序模块 B、分层结构<br>C、 层次模块化 D、子程序结构</p>
<pre><code>答案-4：C</code></pre>
<p>46.系统调用的目的是（ ）。<br>A、请求系统服务 B、终止系统服务 C、申请系统资源 D、释放系统资源</p>
<pre><code>A</code></pre>
<p>47、 原语是（ ） 。<br>A、一条机器指令 B、 若干条机器指令组成<br>C、一条特定指令 D、 中途能打断的指令</p>
<pre><code>B（较难）</code></pre>
<p>48.在操作系统中，可以并行工作的基本单位是（）。<br>A.作业<br>B.程序<br>C.进程<br>D.过程</p>
<pre><code>C</code></pre>
<p>49.多道程序环境下，操作系统分配资源以（ ）为基本单位。<br>A、程序 B、指令 C、进程 D、作业</p>
<pre><code>C
ps.进程是分配资源的基本单位,线程是CPU调度的基本单位</code></pre>
<p>50.当程序经过编译或者汇编以后，形成了一种由机器指令组成的集合，被称为（ ）。<br> A、源程序 B、目标程序 C、可执行程序 D、非执行程序</p>
<pre><code>    B
    ps.当程序经过编译或者汇编以后，形成了一种由机器指令组成的集合，被称为目标程序。目标程序是机器语言程序，这种程序计算机可直接识别和执行。</code></pre>
<p>51.经过（ ），目标程序可以不经过任何改动而装入物理内存单元。<br> A、静态重定位 B、动态重定位<br>C、编译或汇编 D、存储扩充</p>
<pre><code>    A
    ps.静态重定位在装入时生效,地址变换在程序中完成</code></pre>
<p>52.将信息加工形成具有保留价值的文件是（ ）。<br> A、库文件 B、档案文件<br>C、系统文件 D、临时文件</p>
<pre><code>    B</code></pre>
<p>53.一个含有 6 个盘片的双面硬盘，盘片每面有 100 条磁道，则该硬盘的柱面数为（ ）。<br> A、12 B、250 C、100 D、1 200</p>
<pre><code>    答案-2：C
    柱面是所有盘面相同磁道的集合，也就是说柱面数和盘片数无关，只和每个盘面的磁道数有关</code></pre>
<p>54.下列有关通道的叙述中，不正确的是（ ）。<br>A、通道是处理输入、输出的软件<br>B、所有外围设备的启动工作都由设备管理负责处理<br>C、来自通道的 I/O 中断事件由设备管理负责处理<br>D、编制好的通道程序是存放在主存中的</p>
<pre><code>    答案-3：A</code></pre>
<h2 id="填空"><a href="#填空" class="headerlink" title="填空"></a>填空</h2><ol>
<li><p>实时操作系统与分时操作系统的主要区别是 <strong>及时性和高可靠性</strong> 。</p>
</li>
<li><p>在主机控制下进行的输入／输出操作称为 <strong>联机输入输出</strong> 操作。</p>
</li>
<li><p><strong>批处理</strong> 系统不允许用户随时干预自己程序的运行</p>
</li>
<li><p>多道程序设计的特点是多道、 <strong>宏观上的并行</strong> 和 <strong>微观上的串行</strong> 。</p>
</li>
<li><p>单道批处理系统是在解决 <strong>人机矛盾</strong> 和 <strong>CPU 和 I/O 设备之间速度不匹配</strong> 的矛盾中发展起来的。</p>
</li>
<li><p>对操作系统的总体设计目标来说，批处理操作系统应注重提高计算机的效率，尽量增加系统的 <strong>平均吞吐量</strong> ，分时操作系统应保证用户 <strong>所能忍受的响应时间</strong> ；而实时操作系统则应在保证及时响应和处理有关事件的前提下，再考虑 <strong>系统资源的利用率</strong> 。</p>
</li>
<li><p>实时系统按应用的不同分为 <strong>过程控制系统</strong> 和 <strong>数据处理系统</strong> 两种。</p>
</li>
<li><p>信号量的物理意义是当信号量值大于零时表示 ① ；当信号量值小于零时其绝对值表示<br>② 。<br>答：① 可用资源的数目 ② 因请求该资源而被阻塞的进程数目</p>
</li>
<li><p>临界资源的概念是 ① ，而临界区是指 ② 。<br>答：① 一次仅允许一个进程访问的资源<br>② 进程中访问临界资源的那段程序代码</p>
</li>
<li><p>进程主要由 ①、 ② 、 ③ 三部分内容组成，其中 ④ 是进程存在的唯一标志，而 ⑤ 部分也可以为其他进程共享。<br>答：① 程序段 ② 数据段 ③PCB ④PCB ⑤ 程序段</p>
</li>
<li><p>将进程的 <strong>PCB</strong> 链接在一起就形成了进程队列。</p>
</li>
<li><p>有 m 个进程共享同一临界资源，若使用信号量机制实现对临界资源的互斥访问，则信号量值的变化范围是 <strong>1 至－(m－1)</strong> 。</p>
</li>
<li><p>一个理想的作业调度算法应该是既能 <strong>提高系统效率</strong> ，又能使进入系统的作业 <strong>及时</strong> 得到计算结果.</p>
</li>
<li><p>解除死锁常用的方法有两种， <strong>资源剥夺法</strong> 是从其他进程那里剥夺足够数量的资源给 <strong>死锁</strong> 进程以解除死锁状态。</p>
</li>
<li><p>进程的切换是由 <strong>进程状态的变化</strong> 引起的，总是发生在 <strong>中断事件</strong> 发生之后。</p>
</li>
<li><p>主存的空间划分为 <strong>系统占用区</strong> 和用户占用区，其中用户区用来存放用户的 <strong>数据和程序</strong> 。</p>
</li>
<li><p>主存空间的共享是为了 <strong>提高主存空间的利用率</strong> ，主存空间的存储保护是为了 <strong>防止各存储区域中的程序相互干扰</strong> 。</p>
</li>
<li><p>我们把操作系统所占用的系统资源和所需的处理器时间称为 <strong>系统开销</strong> 。</p>
</li>
<li><p>分页是由 <strong>系统</strong> 自动完成的，而分段是由 <strong>用户</strong> 决定的。</p>
</li>
<li><p>虚拟存储器实际上是为 <strong>扩大主存容量</strong> 而采用的一种设计技巧，并非真正的存储器。</p>
</li>
<li><p>虚拟存储器不能无限大，它的容量由计算机的 <strong>地址结构</strong> 和 <strong>辅存的容量</strong> 决定，而与实际的主存容量无关。</p>
</li>
<li><p>分页式虚拟存储管理的页表增加标志位，指出对应页是否已经装入 <strong>主存</strong> ，若未装入，则产生 <strong>缺页</strong> 中断。</p>
</li>
<li><p>最近最少使用调度算法是基于程序执行的 <strong>局部性</strong> 理论，即程序一旦访问到某些位置的数据或指令，可能在一段时间里经常会访问它们。</p>
</li>
<li><p>操作系统目前有五大类型： <strong>批处理操作系统</strong> 、 <strong>分时操作系统</strong> 、 <strong>实时操作系统</strong> 、 <strong>网络操作系统</strong> 和 <strong>分布式操作系统</strong> 。</p>
</li>
<li><p>进程从运行态变成就绪态，主要原因是 <strong>运行时间到</strong> 和 <strong>出现更高优先权进程</strong> 。</p>
</li>
<li><p>PCB 的含义是 <strong>操作系统用于记录和刻画进程状态及有关信息数据结构</strong> 。(牢记)</p>
</li>
<li><p>并发进程执行时，执行结果与它执行的<em>初始条件</em>有关；进程的并发执行会破坏 <strong>封闭性</strong> 和 <strong>可再现性_</strong> 。</p>
</li>
<li><p>当并发进程存在竞争关系时必须 <strong>排它</strong> 地使用资源；当并发进程存在协作关系时必须 <strong>共享资源</strong> 。分别称为 <strong>进程的互斥</strong> 和 <strong>进程的同步</strong> 。</p>
</li>
<li><p>目前常用的高级通信方式有 <strong>共享存储器</strong> 、 <strong>消息传递通信机制</strong> 、 <strong>管道通信</strong> 等</p>
</li>
<li><p>可顺序存取的文件不一定能随机存取；但可随机存取的文件都可以顺序存取</p>
</li>
<li><p>按操作系统中文件的性质与用途分，文件分为： <strong>系统文件</strong> 、 <strong>文件库</strong> 和 <strong>用户文件</strong> 。</p>
</li>
<li><p>按保护级别分类，文件可分为 <strong>只读文件</strong> 、 <strong>读写文件</strong> 和 <strong>不保护文件</strong>.</p>
</li>
<li><p>按文件的逻辑存储结构分，文件分为有结构文件，又称为 <strong>记录式文件</strong> 和 <strong>无结构文件</strong> ，又称 <strong>流式文件</strong></p>
</li>
</ol>
<h2 id="是非"><a href="#是非" class="headerlink" title="是非"></a>是非</h2><ol>
<li><p>(×) V 操作是对信号量执行加 1 操作，意味着释放一个单位资源，加 1 后如果信号量的值等于零，则从等待队列中唤醒一个进程，现进程变为等待状态，否则现进程继续进行。</p>
<p><strong>根据课本:若+1 后认识 S-&gt;value≤0,则表示在该型号量链表中仍有等待该资源的进程被阻塞</strong></p>
</li>
<li><p>(x) 进程之间的同步，主要源于进程之间的资源竞争，是指对多个相关进程在执行次序上的协调。</p>
</li>
<li><p>(√) 实际上，进程互斥是进程同步的一种特例。</p>
</li>
<li><p>(x)一个作业由若干个作业步组成，在多道程序设计的系统中这些作业步可以并发执行。</p>
<p><strong>作业可以并发进行</strong></p>
</li>
<li><p>(x) 通用操作系统中，通常把终端作业称为后台作业，批处理作业称为前台作业。<br><strong>在分时兼批处理的计算机系统中 √</strong></p>
</li>
<li><p>(x)作业控制语言是供用户编写程序以实现某项计算任务的语言。</p>
<p><strong>作业控制语言是对用户作业的进行组织和管理的各种控制命令的集合</strong></p>
</li>
<li><p>(x)虚拟存储空间实际上就是辅存空间。</p>
<p><strong>虚拟存储空间不是一个实际存在的存储空间，是操作系统对逻辑内存的扩充</strong></p>
</li>
<li><p>(X)只有引入通道后，CPU 计算与 I/O 操作才能并行执行。</p>
<p><strong>引入中断使 CPU 计算与 I/O 操作能够并行执行，引入通道后，CPU 计算与 I/O 操作的并行度大大提高了。</strong></p>
</li>
<li><p>(x)中断处理一般分为中断响应和中断处理两个步骤，前者由软件实施，后者由硬件实施。</p>
<p><strong>中断响应由硬件实施，中断处理由软件实施</strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>源流清泉</category>
      </categories>
      <tags>
        <tag>复习</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>人类群星闪耀时(笔记)</title>
    <url>/2019-12-25-Sternstunden-der-Menschheit-note/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>星空浩瀚.熠熠繁星,哪一颗会是我,亦或是哪一颗都不会是我.<br>一瞬之间,思绪漾开,仿佛脚尖所点过的每一处,摇曳生莲.</p>
<p>– 2019.10.19 于合肥</p>
<a id="more"></a>

<h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p>自序<br>这种命运攸关的时刻充满戏剧性，在个人的一生及历史的进程中都是难得出现的。这种时刻可能集中在某一天、某一时，甚至常常发生在某一分钟，但它们的决定性影响却是超越时间的</p>
<p>2019 年 11 月 17 日 1 不朽的逃亡者<br>从这一刻起，这个不经意间成为冒险家的人，他的生活将获得超越时间的崇高意义</p>
<p>2019 年 11 月 17 日 1 不朽的逃亡者<br>他不可能再指望有权有势的朋友，因为他已经不再拥有权力；而他的最好的辩护人——黄金，声音还太微弱，不足以保证他得到宽宥</p>
<p>2019 年 11 月 17 日 1 不朽的逃亡者<br>在这人类世界的尽头，对他来说，也只剩下一种逃亡的方式，那就是逃亡到伟大的行动中去，到不朽的事业中寻求庇护</p>
<p>2019 年 11 月 17 日 1 不朽的逃亡者<br>他宁愿为了这一在任何时代都称得上是最勇敢的冒险行为而光荣死去，也不愿束手待毙，带着绝望被拖上断头台</p>
<p>2019 年 11 月 17 日 1 不朽的逃亡者<br>在这些西班牙征服者的性格和行为中的确存在一种独特的、难以解释的矛盾现象。一方面，他们像那个时代的所有基督徒一样，虔诚、笃信，从灵魂深处狂热地向上帝祷告。另一方面，他们却会以上帝的名义干下史上最卑鄙无耻、最不人道的勾当。他们的勇气、坚忍和献身精神使他们能够做出最壮丽的英雄业绩，但同时他们却又以最无耻的方式尔虞我诈，相互争斗</p>
<p>2019 年 11 月 17 日 1 不朽的逃亡者<br>也许，从某种意义上来说，这第二次行动比第一次更加辉煌，虽然这一次行动并没有享受到和第一次同样的荣耀，因为历史只偏爱成功者</p>
<p>2019 年 11 月 17 日 1 不朽的逃亡者<br>然而，命运即使对它最喜爱的宠儿也不是永远慷慨大度的。众神通常只会保佑无法永生的凡人完成唯一一项不朽的事业，除此之外，凡人不可奢求</p>
<p>2019 年 11 月 17 日 2 千年帝国的陷落<br>石头坠落的巨大声音在教堂里回响，同时传向很远很远的地方。因为整个西方世界都在为它的倒坍而震颤。噩耗在罗马、在热那亚、在威尼斯回响，犹如预警的巨雷传向法国和德国。欧洲万分恐惧地认识到，由于他们的麻木不仁，一股天谴般的破坏力量竟从那座被遗忘的小门——不祥的凯尔卡门闯了进来，这股暴力将要遏制和束缚欧洲达数百年之久。然而历史犹如人生，业已失去的瞬间不会因为抱憾的心情而重返，仅仅一个小时所贻误的东西，用千年的时光也难以赎回。</p>
<p>2019 年 11 月 17 日 2 千年帝国的陷落<br>然而，理智与和解的时刻在历史上从来都是短暂与易逝的</p>
<p>2019 年 11 月 17 日 2 千年帝国的陷落<br>然而把不可能的事情变成现实，永远都是一个有着魔鬼般意志的人物的真正标志，而且人们从中看到的永远也只能是一位军事天才，他在战争中嘲弄战争规则，能够在恰当的时刻灵光一闪，打破所有的常规</p>
<p>2019 年 11 月 17 日 2 千年帝国的陷落<br>历史上，这种悲剧性的时刻总是一再出现，正当亟须团结一切可以团结的力量共同保卫欧洲文明的时候，各路诸侯与国家却放不下他们之间的小小纷争，哪怕是片刻搁置都不行</p>
<p>2019 年 11 月 17 日 3 亨德尔的复活<br>有时候他坐在小酒馆里，但是他早已习惯于创作带给他的那种高度的沉醉(Rausch) [18] ，纯粹且极度快乐，而那些劣质的烧酒只会让他呕吐不止。有时候他从泰晤士河的桥上呆呆地向下凝视，那静静流淌的夜色一般漆黑的河水，他甚至想到，一狠心纵身投入河中是不是更好，至少那样一了百了!他实在不能再忍受这种令人压抑的空虚，这种被上帝和人群所离弃的可怕寂寞。</p>
<p>2019 年 11 月 17 日 3 亨德尔的复活<br>亨德尔就是要证明这一点，尘世间尚未有人尝试过这样做，他要把自己的明证高高举起，就像在世间竖起一块灿烂的丰碑。只有饱经忧患的人才懂得欢乐；只有经过磨难的人才会预感到仁慈的最后赦免；而他就是要在众人面前证明：经历了死亡的人是可以复活的</p>
<p>2019 年 11 月 17 日 3 亨德尔的复活<br>这位六十岁的老人泰然自若地沿着作品的里程碑走自己的路。有人给他制造种种困难，但他知道如何光荣地战胜它们</p>
<p>2019 年 11 月 17 日 3 亨德尔的复活<br>正是那只沉重的手把他击倒在地的那一天 [49] ，也正是他的《弥赛亚》首次公演于世的那一天 [50] ，他心中的一切曾在那一天全部死去，但同样也正是在那一天，他又复活了。而现在，他却愿意在他复活的那一天死去，以便确信自己将会获得永生的复活。</p>
<p>2019 年 11 月 17 日 3 亨德尔的复活<br>是的，这个世间唯一的意志——上帝，既能驾驭生，又能驾驭死。4 月 13 日，亨德尔的精力全都耗尽了。他再也看不见，再也听不见。硕大的身体一动不动地躺在垫褥上，这是一个空洞而又沉重的躯壳，但正如一个空的贝壳能发出大海怒涛的声音一样，那听不见的音乐声还在他的心底轰鸣，这音乐比他以前听到过的所有音乐都更悦耳、更奇异。音乐的滚滚波浪缓慢地从这精力殆尽的躯体中带走了灵魂，把它高高举起，送入缥缈的世界。汹涌奔流的音乐永远回荡在永恒的宇宙。第二天，复活节的钟声还没有敲响，乔治·弗里德里希·亨德尔无法永生的躯体就这样逝去了。</p>
<p>2019 年 11 月 17 日 3 亨德尔的复活<br>兴趣的读者可以参考尼采《悲剧的诞生》中有关“沉醉”的叙述。</p>
<p>2019 年 11 月 17 日 4 一夜天才<br>热根本用不着创作，用不着虚构，他只须把今天所有众口皆传的话语押上韵，配上旋律和富有魅力的节奏，就成了，这就已经把全体国民那种最内在的感受表达出来了，说出来了，也唱出来了。而且，他也无须作曲，因为街上的节奏、时间的节奏，这种在士兵的行军步伐中、在军号的高奏中、在炮车的辚辚声中所表现出来的斗志昂扬的节奏已穿过紧闭的百叶窗，传入他的耳中——也许他自己并没有意识到，他也没有亲自用灵敏的耳朵去听。不过，在这一天夜里，蕴藏在他那平凡的躯壳里的对于时间的灵感却听到了这种节奏。因此，旋律愈来愈顺从于那强有力的欢呼节拍——全国人民的脉搏。鲁热愈来愈迅速地写下他的歌词和乐谱，好像在笔录某个陌生人的口授似的——在他一个市民的狭隘心灵中，从未有过如此的激情。这不是一种属于他自己[…]</p>
<p>2019 年 11 月 17 日 4 一夜天才<br>然而，一件作品的固有力量是从来不会被长期埋没或禁锢的。一件艺术作品纵然可能会被时间遗忘，可能会遭到禁止和被彻底埋葬，但是，富有生命力的东西最终总会战胜没有生命力的东西。这首《莱茵军战歌》沉寂了一两个月</p>
<p>2019 年 11 月 17 日 4 一夜天才<br>当许多团队在热马普 [28] 和内文登 [29] 等地发起决定性的冲锋时，就是齐声高唱着这首战歌而进行编队的。而那些只会用双份的烧酒这种老办法去刺激自己士兵的敌军将领们则惊奇地发现，当这些成千上万的士兵同时高唱着这首军歌，像咆哮的海浪向他们的队形冲去时，简直无法阻挡这首“可怕”的颂歌所产生的爆炸力量。眼下，《马赛曲》就像长着双翅的胜利女神 [30] ，在法国的所有战场上翱翔，给无数的人带来热情和死亡。</p>
<p>2019 年 11 月 17 日 4 一夜天才<br>因为命运竟是这样无情地嘲弄人：虽然乐曲响彻云霄，缭绕太空，但它却没有把任何个人——即没有把创作出这首乐曲的人捧上天。全法国没有一个人关心这位鲁热·德·利尔上尉。这首歌也像每一首歌一样，所赢得的巨大荣誉依然属于歌曲本身，连一点荣誉的影子都没有落到它的作者鲁热身上</p>
<p>2019 年 11 月 17 日 4 一夜天才<br>因为这位革命圣歌的作者自己却不是一个革命者——这种奇怪的现象也只有历史本身才创造得出来</p>
<p>2019 年 11 月 17 日 4 一夜天才<br>鲁热·德·利尔</p>
<p>2019 年 11 月 17 日 5 决定世界的一分钟<br>作为一个作家，茨威格却更愿意相信偶然与命运，更愿意认为这一失败乃是因为某个平庸人物在某一瞬间的错误决定。毕竟，拿破仑的英雄人格感染了无数的欧洲人，后人都不希望这一切是因为他们的英雄自身的错误。不管怎么说，历史里充满了无数的可能性，这也许就是我们永远喜欢讨论历史的原因吧。 命运总是对着强力人物和残暴专横者趋之若鹜。它会长年使自己屈从于某个个人的意志：例如恺撒、亚历山大、拿破仑；因为命运喜欢这些狂暴任性的人物，这些人和它本身很相似，都是一样的不可捉摸。 但是有时候，当然，这在任何时代都是极为罕见的，命运也会出于一种奇怪的心情，把自己抛到某个平庸之辈的手中。有时候——这是世界历史上最令人惊奇的时刻——命运之线会在某个瞬间掌握在一个窝囊废手中。英雄们的世界游戏像一阵风暴似的也把那些[…]</p>
<p>2019 年 11 月 17 日 5 决定世界的一分钟<br>然而格鲁希考虑的这一秒钟，却决定了他自己的命运、拿破仑的命运和整个世界的命运。在瓦尔海姆 [30] 那间农舍里逝去的这一秒钟决定了整个 19 世纪，而这一秒钟全取决于这个迂腐庸人的一张嘴巴。这一秒钟全掌握在这双神经质地揉皱了皇帝命令的手中——这是多么的不幸!倘若格鲁希在这刹那之间有勇气、有魄力，不拘泥于皇帝的命令，而是相信自己、相信显而易见的信号，那么法国也就得救了。可惜这个毫无主见的家伙只会始终听命于写在纸上的条文，而从不会听从命运的召唤</p>
<p>2019 年 11 月 17 日 5 决定世界的一分钟<br>那关键的一秒钟就这样进行了可怕的报复。在尘世的生活中，这样的一瞬间是很少降临的。当它无意之中降临到一个人身上时，他却不知如何利用它。在命运降临的伟大瞬间，市民的一切美德——小心、顺从、勤勉、谨慎，都无济于事，它始终只对天才人物提出要求，并且将他造就成不朽的形象。命运鄙视地把畏首畏尾的人拒之门外。命运——这世上的另一位神灵，只愿意用热烈的双臂把勇敢者高高举起，送上英雄们的天堂</p>
<p>2019 年 11 月 17 日 6 年老与爱情<br>在这样两种感情范畴，即最后的“欲念”和最后的“戒欲”之间，在起点和完成之间，9 月 5 日告别卡尔斯巴德、告别爱情的那一天就是那令人难忘的内心转变时刻，那一天是分水岭，他经过悲恸欲绝的哀诉而进入永远宁静的境界。我们可以把那一天称为纪念日，因为从此以后，在德国的诗歌中，再也没有把情欲冲动的时刻描写得如此出色的诗歌了，因为歌德将他最亢奋的感情倾注进了这首充满力量的诗歌之中。</p>
<p>2019 年 11 月 17 日 6 年老与爱情<br>这位平素善于克己的人还从未写出过类似这样的诗句。他少年时就懂得隐藏自己的感情，青年时代也知道节制，通常几乎只在写照和隐喻自己的作品中象征性地流露自己内心最深处的秘密。然而当他已是一个白发苍苍的老翁时，却第一次在自己的诗篇中率性坦陈自己的情感。五十年来，在这个多愁善感的人和伟大的抒情诗人心中，也许从未有过比这难忘的一页更充满激情的时刻，这是他一生中值得纪念的转折点</p>
<p>2019 年 11 月 17 日 6 年老与爱情<br>所以，事情就像策尔特尔说的那样，“是这支刺伤他的梭枪本身治愈了他”。人们大概可以这样说：歌德正是通过这首诗拯救了自己。他终于战胜了痛苦，抛弃了那最后一丝无望的希冀</p>
<p>2019 年 11 月 18 日 8 英雄的时刻<br>于是他的全部命运就被压缩进那么一瞬间的等待中，无限的绝望和无限的生活贪欲都被压缩进了那么一丁点儿的时间里</p>
<p>2019 年 11 月 18 日 9 跨越大洋的第一句话<br>这新的、能创造奇迹的电的力量由此和生命中最强大的动力元素——人类的意志结合了起来。一个人找到了自己的人生使命，一个使命也找到了它所需要的人</p>
<p>2019 年 11 月 18 日 9 跨越大洋的第一句话<br>正是那些在昨天还欢呼得最大声的人，现在却怀着最多的盛怒。整座城市、整个国家都为自己过于高涨、过于急切的热情感到羞愧。赛勒斯·韦斯特·菲尔德成为这一愤怒情绪的牺牲者；昨天还是民族英雄，是富兰克林 [36] 的兄弟、哥伦布的后裔，现在不得不像罪犯一样在之前的愉快和崇拜面前将自己隐藏。一天时间成就了一切，一天时间同样也毁了一切。计划失败，资金亏损，信任辜负，这些都是无法预见的，无用的电缆像传说中的尘世巨蟒 [37] 一样，静静躺在深不可测的大洋底部</p>
<p>2019 年 11 月 18 日 9 跨越大洋的第一句话<br>值得欢呼的是，人类成功超越了时间、空间，现在被永远地联结在了一起，不再反复被灾难性的幻想所迷惑，而去破坏这意义重大的联结，利用那些赋予了人类超自然力量的东西去自我摧毁</p>
<p>2019 年 11 月 18 日 10 向上帝逃亡<br>没有什么道德秩序是可以通过暴力强行建立的，因为，每种暴力都必然会再次孕育新的暴力。一旦你们拿起武器，你们也就创造了新的专制主义。你们这不是在摧毁专制，而是使专制永存。</p>
<p>2019 年 11 月 19 日 10 向上帝逃亡<br>这里很好，很好。狭窄，拥挤，没有阳光，寒酸……我好像想象过这样的情景，这样一张陌生的床，在某处陌生的房子里，一个人躺在一张这样的床上……一个苍老而疲惫的人，等等，只是他叫什么名字？这个老人叫什么名字？……这个曾经富有，但最终回归贫穷的人，没有人认识他，他只能在炉边那张床上慢慢爬……啊，我的脑袋，我这愚蠢的脑袋!……他叫什么名字来着，这个老人？……他，曾经富有，而今却只有衬衫蔽体……而那个女人，那个让他感到痛苦的女人，并不在他身边，他是怎么死的……是的，是的，我知道了，我知道，在我的小说里，这个老人，我曾经称呼他为科纳·瓦斯尔耶维。而他死去的那个夜晚，上帝唤醒了他夫人的心，她来了，玛尔法，最后看他一眼……但她来得太晚了，他闭着眼睛躺在这张陌生的床上，早已[…]</p>
<p>2019 年 11 月 19 日 11 壮志未酬<br>这样一个处于自然状态的史前世界中，在没有时间观念的完全的孤寂中，这三十个人相互交流着 20 世纪的最新成果。在这里，人们不仅感受到时间以小时为单位流逝，甚而以秒为单位。后来人们在他们的记录中感动地读到，这些严肃的人是如何欢乐地围在圣诞树旁庆祝，曾如何出版过一份命名为《南极时报》的风趣小报，一些小事——如一头鲸鱼浮出水面、一匹小马摔了一跤——是如何成为头条新闻，而另一方面，那些非同寻常的事——如闪耀的极光、可怕的严寒、强烈的寂寞感——却成了他们已经习惯的日常小事。</p>
<p>2019 年 11 月 19 日 11 壮志未酬<br>“所有这些劳累，所有这些艰难，所有这些痛苦——究竟是为了什么呢？”斯科特这样在日记里写道，“为了梦想，除此之外一无所求，而这梦想，现在也已经破灭。”泪水从他们的脸上滑落，尽管身体十分劳累，他们却夜不能寐。闷闷不乐，毫无希望，像被定了罪的犯人一样，他们踏上了最后一段通往南极点的行程，而当初，他们本来设想自己会欢呼着向南极点进发。没有人试图去安慰另一个人，他们就这么默默地继续跋涉</p>
<p>2019 年 11 月 19 日 11 壮志未酬<br>除此之外，他们心中钢铁般的意志也开始动摇。来的时候，他们胸怀无限希望，这希望是人类好奇和渴求的化身，给予了他们无限动力。而当他们意识到自己是在进行一项伟大的事业时，更是获得了超人的力量。而现在，他们只为自己不再受损伤的皮肤、他们终有一死的肉体和了无声誉的归乡做斗争，而这返乡归程，让他们的内心更加恐惧，而非渴望。</p>
<p>2019 年 11 月 19 日 11 壮志未酬<br>就这样，看似徒劳的事，最终却结出了果实，一件失败的事情会变成对人类的大声疾呼，要求人类将精力集中到还未完成的事业当中去；在卓越的对抗中，壮烈的死亡可以生出新的生命，一次毁灭也可以生出攀登高峰的奋起意志。因为在偶然的成就和轻易获得的成功中，只有雄心壮志才能点燃火热的心，一个人虽然在与不可战胜的、占据优势的命运的斗争中毁灭了自己，但他的心灵却变得无比高尚。这些在所有时代都最最伟大的悲剧，作家可能只会偶尔创作，但现实生活却早已将其演绎了千百遍。</p>
<p>2019 年 11 月 26 日 12 封闭的列车</p>
<p>2019 年 11 月 28 日 13 演讲台上的头颅<br>一个聪明却并不十分勇敢的人，如果遇到比自己更强的人，最明智的做法就是：回避此人，并不感到羞愧地静候时来运转，直至前方道路再次通畅</p>
<p>2019 年 11 月 28 日 13 演讲台上的头颅<br>一个人永远无法长期捍卫民众的自由，而总是只能捍卫自己内心的自由。</p>
<p>2019 年 12 月 20 日 13 演讲台上的头颅<br>“从来没有比在他无所事事时更忙，也从未比他独自一人时，感觉更不寂寞”</p>
<p>2019 年 12 月 20 日 13 演讲台上的头颅<br>西塞罗论证说，暴力统治侵犯每一种权利。只有当每个人将自己的个人利益放置在国家利益之后，而不是从自己的公职中谋取私利，这样一个国家才能实现真正的和谐。只有当国家财富不在奢侈和挥霍中被随意浪费，而是得到妥善管理，并转化为精神艺术文化财富；只有当贵族摒弃自己的高傲自大，民众们不被煽动者收买，不将自己的国家出卖给任何一个党派，要求自己应有的自然权利，国家才能健康发展。就像所有歌颂中立的人文主义者一样，西塞罗要求对立阶层保持力量平衡。罗马不需要苏拉 [23] 这样的人，不需要恺撒这样的人，也不需要格拉古 [24] 兄弟这样的人；独裁是危险的，改革亦是如此。</p>
<p>2019 年 12 月 20 日 13 演讲台上的头颅<br>当一个民族总是以暴力夺取其他民族的自由的时候，这个民族也就会在神秘的复仇之中被孤立，从而失去自己最神奇的力量</p>
<p>2019 年 12 月 20 日 13 演讲台上的头颅<br>一个人，一旦体会过流亡的凄凉，即使是在危险之中，也能深切感受到家乡故土的温馨，以及处于永远逃离中的生活的羞耻感。这样一种在理性另一面的神秘意志，或者说是一种对理性的反抗，迫使西塞罗直面他所期待的命运</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>没有后记</li>
<li>圣诞快乐(</li>
</ul>
]]></content>
      <categories>
        <category>桂苑酌记</category>
      </categories>
      <tags>
        <tag>群星</tag>
      </tags>
  </entry>
  <entry>
    <title>python爬虫复习(3) splash &amp;&amp; 数据分析小试</title>
    <url>/2020-01-13-spider-review-3-splash/</url>
    <content><![CDATA[<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>根据笔者以往的爬虫经验，大部分的爬虫是在静态网页上完成的，爬虫所要做的只不过是提交请求，然后分析返回的页面即可。当然，api 本质上也可以作为静态页面来处理。这意味着只要掌握 requests 就可以完成 60%-80%的爬虫任务。</p>
<p>这是一个很惊人的占比，这里解释一下，静态页面可能听起来很 low，但是有着以加载速度更快、易于维护为核心的一系列优势，尤其是引入了 ajax 之后，实现了动态加载，通过更加频繁的前后端交互，使得用户的使用更加丝滑流畅。</p>
<p>但是总有一些网站是静态爬虫无法应付的。它们就是与 js 耦合度较高的，需要 js 进行渲染的页面，与上文所述的情况（前端只接收数据，而不用对数据进行计算层面的处理）不同，这类网站将部分的计算工作交托给前端，牺牲部分的用户体验来实现缓解服务器压力等一系列目的。</p>
<p>这就是剩下的 20%了。如何处理这些刺头呢？这就引出了本文的主角–splash。</p>
<a id="more"></a>

<h2 id="关于-splash"><a href="#关于-splash" class="headerlink" title="关于 splash"></a>关于 splash</h2><p>Splash 是一个针对 js 的渲染服务。它内置了一个浏览器和 http 接口。基于 Python3 和 Twisted 引擎。所以可以异步处理任务。</p>
<p>关于 splash，国内目前的大部分博客教程都停留于对官方文档的翻译，所以还是推荐有能力的直接看文档，毕竟还有一个时效性。</p>
<p><a href="https://splash.readthedocs.io/en/stable/install.html#os-x-docker">官方文档</a></p>
<h2 id="安装-amp-amp-运行"><a href="#安装-amp-amp-运行" class="headerlink" title="安装 &amp;&amp; 运行"></a>安装 &amp;&amp; 运行</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull scrapinghub/splash

docker run -p <span class="token number">8050</span>:8050 -p <span class="token number">5023</span>:5023 scrapinghub/splash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h2 id="一个简单的-splash-应用"><a href="#一个简单的-splash-应用" class="headerlink" title="一个简单的 splash 应用"></a>一个简单的 splash 应用</h2><p>抓取今日头条，对比渲染和没有渲染的效果</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree

url <span class="token operator">=</span> <span class="token string">'http://localhost:8050/render.html?url=https://www.toutiao.com&amp;timeout=30&amp;wait=0.5'</span>
<span class="token comment"># url = 'https://www.toutiao.com'</span>

response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>

tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>

article_titles <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//div[@class="title-box"]/a/text()'</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>article_titles<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre><code>[&#39;总书记来过我们家，脱贫了还要好好干&#39;, &#39;北京2020年初雪已进城！您那儿下起来了吗？&#39;, &#39;论萌娃写作业时，求生欲有多强：爸爸我给你鼓掌&#39;, &#39;秦平：弘扬黄河文化，凝聚追梦中国精神力量&#39;, &#39;苏莱曼尼之死，全世界到底在怕什么？&#39;, &#39;观景平台，“零距离”看飞机&#39;, &#39;浙江一企业保险箱被撬，120万现金仅被偷走27万！小偷：当时想起一句“名言”……&#39;, &#39;划重点2020双闰年 网友：鼠年要多上一个月的班&#39;, &#39;若美伊全面开战，中国将再获20年发展机遇期？&#39;]</code></pre>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果没有渲染，那么得到的结果就是一个空的数组，只有进行了 js 渲染才能得到我们想要的结果。</p>
<h2 id="开始玩耍吧"><a href="#开始玩耍吧" class="headerlink" title="开始玩耍吧~"></a>开始玩耍吧~</h2><h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>前几天看电视剧时一时兴起（好吧，这就是老年人），想分析一下近年来的中国电视剧发展趋势，加上正好某鲨想要学爬虫，于是就重操旧业，开启了一个新坑。</p>
<h3 id="首先，从哪里获得数据呢？"><a href="#首先，从哪里获得数据呢？" class="headerlink" title="首先，从哪里获得数据呢？"></a>首先，从哪里获得数据呢？</h3><p>将目标锁定到了豆瓣（好吧，从某种层面上来说我也算是豆瓣的老用户了，经常因为使用爬虫被封号的那种(笑)）。</p>
<p>具体点说，是豆瓣排行榜，在进行了网页分析之后，发现所有的数据都是通过 api 回传的，这感情好，直接上 requests 莽一波就完事了。</p>
<h3 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h3><p>爬完之后发现，豆瓣排行榜只放出了前 500 条数据，500 条能干啥哦？？？</p>
<h3 id="尝试解决"><a href="#尝试解决" class="headerlink" title="尝试解决"></a>尝试解决</h3><p>重新寻找，发现豆瓣的搜索功能可以一试。于是搜索关键词“1990+电视剧”，果然，1990 年的电视剧就都出来了。但是，分析了半天网页，没有发现什么 api？于是开始进行第二轮的地毯式分析，果然，在主页面的 html 文件里发现了一条又臭又长的数据“window.__DATA__”，里面存放了一大堆的诡异的字符串，这。。。。！？忽然想起来前几天看的密码学，不就是这个鲨雕样子吗，那么很大概率就是豆瓣对自己的数据进行了加密！</p>
<p><img src="https://i.loli.net/2020/01/13/CqSXPvtVJTDkrfw.png" alt="截屏2020-01-13下午9.52.44.png" loading="lazy"></p>
<h3 id="开始排查"><a href="#开始排查" class="headerlink" title="开始排查"></a>开始排查</h3><p>使用 url 过滤，配合二分法截断 url，再用 js 断点调试，最后在 bundle.js 文件里发现了解密过程。<br><img src="https://i.loli.net/2020/01/13/lPLvoERhY5k6UST.png" alt="截屏2020-01-13下午9.54.17.png" loading="lazy"></p>
<p>这时有两条路可以选择。</p>
<ul>
<li>解密</li>
<li>不解密</li>
</ul>
<p>于是又刷新了一下网页，“window.__DATA__”存放的数据变了。。。变了。。。好吧，竟然还采用了动态密钥，我解密个锤子哦？果断选择第二条路。</p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>既然你用 js 渲染解密，那我就等你渲染完了再爬呗<del>~</del></p>
<h3 id="我是示例"><a href="#我是示例" class="headerlink" title="我是示例"></a>我是示例</h3><h4 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote
<span class="token keyword">import</span> json
<span class="token keyword">import</span> time
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd

<span class="token comment"># 初始化Dataframe</span>
df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 记录序号</span>
index <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">def</span> <span class="token function">get_soup</span><span class="token punctuation">(</span>url_raw<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''
    @description: 获取指定url的数据并将其解析为soup
    @param &#123;type&#125;
        url_raw &#123;string&#125;
    @return: BeautifulSoup的解析结果
    '''</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token comment">## lua脚本</span>
        lua <span class="token operator">=</span> <span class="token triple-quoted-string string">'''
        function main(splash, args)
          assert(splash:go("'''</span><span class="token operator">+</span>url_raw<span class="token operator">+</span><span class="token triple-quoted-string string">'''"))
          return &#123;
            html = splash:html(),
            png = splash:png(),
            har = splash:har(),
          &#125;
        end
        '''</span>
        url <span class="token operator">=</span> <span class="token string">'http://localhost:8050/execute?lua_source='</span> <span class="token operator">+</span> quote<span class="token punctuation">(</span>lua<span class="token punctuation">)</span>
        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        js <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>js<span class="token punctuation">[</span><span class="token string">'html'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> soup

    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">html_parser</span><span class="token punctuation">(</span>soup<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">'''
    @description: 解析网页，提取结果
    @param &#123;type&#125;
        soup &#123;BeautifulSoup&#125; 解析完成的soup
        year &#123;int&#125; 第几年
    @return:
    '''</span>
    tv_detail <span class="token operator">=</span> <span class="token punctuation">[</span>foo <span class="token keyword">for</span> foo <span class="token keyword">in</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'item-root'</span><span class="token punctuation">)</span> <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'.*'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'.*'</span><span class="token punctuation">,</span>foo<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'title-text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> foo <span class="token keyword">in</span> tv_detail<span class="token punctuation">:</span>
        index<span class="token operator">+=</span><span class="token number">1</span>
        <span class="token keyword">if</span> foo<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'rating_nums'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> year
            df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token string">'rating_nums'</span><span class="token punctuation">]</span> <span class="token operator">=</span> foo<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'rating_nums'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text
            df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token string">'rating_people'</span><span class="token punctuation">]</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">'\D*(\d*)\D*'</span><span class="token punctuation">,</span>foo<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'pl'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token string">'title'</span><span class="token punctuation">]</span> <span class="token operator">=</span> foo<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'title-text'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text
            split_res <span class="token operator">=</span> foo<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'meta abstract'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
            df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token operator">=</span> split_res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
            df<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token string">'tv_type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>foo <span class="token keyword">for</span> foo <span class="token keyword">in</span> split_res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> year <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1991</span><span class="token punctuation">,</span><span class="token number">2019</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># url后缀参数</span>
    start_num <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        url_raw_1 <span class="token operator">=</span> <span class="token string">"https://search.douban.com/movie/subject_search?search_text=&#123;&#125;+电视剧&amp;start=&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span>start_num<span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">)</span>
        soup <span class="token operator">=</span> get_soup<span class="token punctuation">(</span>url_raw_1<span class="token punctuation">)</span>
        html_parser<span class="token punctuation">(</span>soup<span class="token punctuation">,</span>year<span class="token punctuation">)</span>
        <span class="token comment"># 判断是否存在后续页（若无，则该年结束，继续下一年的爬取）</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">'next activate'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            start_num<span class="token operator">+=</span><span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token comment"># 这一过程耗时较长，为了防止意外导致数据丢失，所以每一年的爬取完成之后，保存结果</span>
            df<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'tv_data_1990_2018.csv'</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;
Int64Index: 7426 entries, 3 to 8817
Data columns (total 6 columns):
year             7426 non-null float64
rating_nums      7426 non-null object
rating_people    7426 non-null object
title            7426 non-null object
country          7426 non-null object
tv_type          7426 non-null object
dtypes: float64(1), object(5)
memory usage: 726.1+ KB</code></pre>
<p>嗯，1990 年-2018 年一共获取了 7426 条数据，似乎没啥问题。</p>
<p>开始进行数据清洗吧。</p>
<h4 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h4><ul>
<li>由于之前的序号不是严格顺序的（因为各种因素出现序号断层），我们将数据重新排序，并且指定新的序号（强迫症了）。</li>
<li>在上面的 info 表中，可以发现，rating_nums 和 rating_people 两项，我希望它是 float 类型的。</li>
<li>部分国家的电视剧数量太少，由于现在主要的分析目标是中国电视剧发展趋势，所以将 30 年来电视剧统计量小于 100 的剔除掉</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt
<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns
<span class="token keyword">from</span> collections <span class="token keyword">import</span> Counter
<span class="token keyword">import</span> re<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">dfnew <span class="token operator">=</span> df<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

dfnew<span class="token punctuation">[</span><span class="token string">'rating_nums'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dfnew<span class="token punctuation">[</span><span class="token string">'rating_nums'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float'</span><span class="token punctuation">)</span>
dfnew<span class="token punctuation">[</span><span class="token string">'rating_people'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dfnew<span class="token punctuation">[</span><span class="token string">'rating_people'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">)</span>
dfnew<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dfnew<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">)</span>

countries <span class="token operator">=</span> <span class="token punctuation">[</span>k <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> Counter<span class="token punctuation">(</span>df<span class="token punctuation">.</span>country<span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> v <span class="token operator">></span> <span class="token number">300</span><span class="token punctuation">]</span>
df_final <span class="token operator">=</span> dfnew<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">[</span>index <span class="token keyword">for</span> index <span class="token keyword">in</span> dfnew<span class="token punctuation">.</span>index <span class="token keyword">if</span> dfnew<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>index<span class="token punctuation">,</span><span class="token string">'country'</span><span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> countries<span class="token punctuation">]</span><span class="token punctuation">)</span>
df_final <span class="token operator">=</span> df_final<span class="token punctuation">.</span>sort_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
df_final<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>rating_nums</th>
      <th>rating_people</th>
      <th>title</th>
      <th>country</th>
      <th>tv_type</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1991</td>
      <td>9.4</td>
      <td>101919</td>
      <td>东京爱情故事 東京ラブストーリー‎ (1991)</td>
      <td>日本</td>
      <td>爱情</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1991</td>
      <td>9.6</td>
      <td>4490</td>
      <td>成长的烦恼  第七季 Growing Pains Season 7‎ (1991)</td>
      <td>美国</td>
      <td>喜剧,家庭</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1991</td>
      <td>9.2</td>
      <td>1509</td>
      <td>宋飞正传 第三季 Seinfeld Season 3‎ (1991)</td>
      <td>美国</td>
      <td>喜剧</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1991</td>
      <td>7.4</td>
      <td>4598</td>
      <td>外来妹‎ (1991)</td>
      <td>中国大陆</td>
      <td>剧情,爱情</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1991</td>
      <td>8.9</td>
      <td>2140</td>
      <td>宋飞正传 第二季 Seinfeld Season 2‎ (1991)</td>
      <td>美国</td>
      <td>喜剧</td>
    </tr>
  </tbody>
</table>
</div>

<h3 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">df_year_rate <span class="token operator">=</span> df_final<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'rating_nums'</span><span class="token punctuation">,</span><span class="token string">'year'</span><span class="token punctuation">,</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">,</span><span class="token string">'country'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>aggregate<span class="token punctuation">(</span>np<span class="token punctuation">.</span>average<span class="token punctuation">)</span>
df_year_rate<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>country</th>
      <th>rating_nums</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1990</td>
      <td>美国</td>
      <td>9.600000</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1991</td>
      <td>中国大陆</td>
      <td>6.966667</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1991</td>
      <td>中国香港</td>
      <td>7.388889</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1991</td>
      <td>日本</td>
      <td>8.400000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1991</td>
      <td>美国</td>
      <td>8.771429</td>
    </tr>
  </tbody>
</table>
</div>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sns<span class="token punctuation">.</span>lineplot<span class="token punctuation">(</span>x<span class="token operator">=</span>df_year_rate<span class="token punctuation">.</span>year<span class="token punctuation">,</span>y<span class="token operator">=</span>df_year_rate<span class="token punctuation">.</span>rating_nums<span class="token punctuation">,</span>hue<span class="token operator">=</span>df_year_rate<span class="token punctuation">.</span>country<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre><code>(array([1985., 1990., 1995., 2000., 2005., 2010., 2015., 2020.]),
 &lt;a list of 8 Text xticklabel objects&gt;)</code></pre>
<p><img src="https://i.loli.net/2020/01/13/rTLHkQO4gmvX5yf.png" alt="output_11_1.png" loading="lazy"></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ten_year_type_count</span><span class="token punctuation">(</span>dften<span class="token punctuation">)</span><span class="token punctuation">:</span>
    s1<span class="token operator">=</span> <span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>dften<span class="token punctuation">.</span>tv_type<span class="token punctuation">)</span>
    all_type <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r',+'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span>s1<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>foo <span class="token keyword">for</span> foo <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>Counter<span class="token punctuation">(</span>all_type<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token keyword">lambda</span> item<span class="token punctuation">:</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> foo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token number">5</span><span class="token punctuation">]</span>


five_list <span class="token operator">=</span> <span class="token punctuation">[</span>ten_year_type_count<span class="token punctuation">(</span>df_final<span class="token punctuation">[</span>df_final<span class="token punctuation">.</span>country<span class="token operator">==</span><span class="token string">"中国大陆"</span><span class="token punctuation">]</span><span class="token punctuation">[</span>df_final<span class="token punctuation">.</span>year<span class="token operator">&lt;=</span>foo<span class="token punctuation">]</span><span class="token punctuation">[</span>df_final<span class="token punctuation">.</span>year<span class="token operator">></span>foo<span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> foo <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1994</span><span class="token punctuation">,</span><span class="token number">2021</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">type_list <span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">[</span>foo1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> foo <span class="token keyword">in</span> five_list <span class="token keyword">for</span> foo1 <span class="token keyword">in</span> foo<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
df_five_type <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1994</span><span class="token punctuation">,</span><span class="token number">1998</span><span class="token punctuation">,</span><span class="token number">2002</span><span class="token punctuation">,</span><span class="token number">2006</span><span class="token punctuation">,</span><span class="token number">2010</span><span class="token punctuation">,</span><span class="token number">2014</span><span class="token punctuation">,</span><span class="token number">2018</span><span class="token punctuation">]</span><span class="token punctuation">,</span>columns<span class="token operator">=</span>type_list<span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> index<span class="token punctuation">,</span>five <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>five_list<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> foo <span class="token keyword">in</span> five<span class="token punctuation">:</span>
        df_five_type<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token number">1994</span><span class="token operator">+</span>index<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">,</span>foo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> foo<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
df_five_type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<div>
<style scoped>
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

<pre><code>.dataframe tbody tr th &#123;
    vertical-align: top;
&#125;

.dataframe thead th &#123;
    text-align: right;
&#125;</code></pre>
<p></style></p>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>古装</th>
      <th>儿童</th>
      <th>传记</th>
      <th>家庭</th>
      <th>历史</th>
      <th>动作</th>
      <th>惊悚</th>
      <th>剧情</th>
      <th>战争</th>
      <th>悬疑</th>
      <th>爱情</th>
      <th>奇幻</th>
      <th>科幻</th>
      <th>喜剧</th>
      <th>犯罪</th>
      <th>武侠</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1994</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>13</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>7</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1998</th>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>7</td>
      <td>0</td>
      <td>0</td>
      <td>39</td>
      <td>0</td>
      <td>0</td>
      <td>12</td>
      <td>0</td>
      <td>0</td>
      <td>7</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2002</th>
      <td>26</td>
      <td>0</td>
      <td>0</td>
      <td>7</td>
      <td>16</td>
      <td>0</td>
      <td>0</td>
      <td>81</td>
      <td>0</td>
      <td>0</td>
      <td>17</td>
      <td>0</td>
      <td>0</td>
      <td>10</td>
      <td>10</td>
      <td>9</td>
    </tr>
    <tr>
      <th>2006</th>
      <td>30</td>
      <td>0</td>
      <td>0</td>
      <td>13</td>
      <td>9</td>
      <td>8</td>
      <td>0</td>
      <td>105</td>
      <td>9</td>
      <td>6</td>
      <td>30</td>
      <td>0</td>
      <td>0</td>
      <td>25</td>
      <td>6</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2010</th>
      <td>12</td>
      <td>7</td>
      <td>0</td>
      <td>34</td>
      <td>11</td>
      <td>12</td>
      <td>0</td>
      <td>164</td>
      <td>20</td>
      <td>13</td>
      <td>40</td>
      <td>6</td>
      <td>0</td>
      <td>21</td>
      <td>9</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2014</th>
      <td>48</td>
      <td>6</td>
      <td>16</td>
      <td>108</td>
      <td>44</td>
      <td>19</td>
      <td>0</td>
      <td>384</td>
      <td>82</td>
      <td>26</td>
      <td>181</td>
      <td>11</td>
      <td>6</td>
      <td>85</td>
      <td>13</td>
      <td>9</td>
    </tr>
    <tr>
      <th>2018</th>
      <td>74</td>
      <td>7</td>
      <td>0</td>
      <td>58</td>
      <td>11</td>
      <td>20</td>
      <td>8</td>
      <td>440</td>
      <td>52</td>
      <td>66</td>
      <td>182</td>
      <td>50</td>
      <td>9</td>
      <td>78</td>
      <td>30</td>
      <td>11</td>
    </tr>
  </tbody>
</table>
</div>

<pre class="line-numbers language-python" data-language="python"><code class="language-python">plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>data<span class="token operator">=</span>df_five_type<span class="token punctuation">,</span> annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> fmt<span class="token operator">=</span><span class="token string">"d"</span><span class="token punctuation">,</span> linewidths<span class="token operator">=</span><span class="token number">.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1a2ffe5be0&gt;</code></pre>
<p><img src="https://i.loli.net/2020/01/13/NAVtujdBlREgF5M.png" alt="output_14_1.png" loading="lazy"></p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>大概地总结一下吧，这里一定程度上真实地反映了人们观念的变化对电视剧市场造成的自然选择以及历史的必然趋势。</p>
<p>之所以说是历史的趋势，可以看到，随着时间的增长，剧种、剧目数量，都呈现上升的趋势，这是由于经济基础的建设，人民满足了基本的物质需求，继而开始追求精神需求的体现。</p>
<p>10 年以前，战争剧稀少，诸如《亮剑》、《团长》等优质的抗战剧大多诞生于这个时期。10 年以后，由于政策的扶持和被优质片打开的市场，战争题材的电视剧开始出现井喷，说好听点良莠不齐，说难听点，一堆杂草群魔乱舞，诸多的“神剧”就是这之后的产物。</p>
<p>家庭、爱情剧方面，这一部分我看的较少，不过大概也是可以分析一下。14 年以前，受韩剧市场大成功的影响，加上题材容易量产，所以得到了资本的大量倾注，诸如《回家的诱惑》等剧就是这个时间段的产物。而 14 年以后，市场由“家庭”偏向“爱情”，主要是因为市场的主力军变了，新生代的大学生开始成为左右这一部分市场的中坚力量，自然市场就要向着迎合这一部分人群的方向发展。</p>
<p>古装剧涨势良好，以往（14 年以前）的古装剧，多以正剧、武侠剧为主(但是因为武侠又以香港地区为主，所以该表显示的武侠剧并没有大家印象中的那么多)，而 14 年以后，以于正为首的抄袭派作家找到了量产古装剧的套路，同时，古装剧在“造星”方面有着天然的优势，所以古装剧在近几年发展迅速，尤以“古装+爱情”这样的组合见多。</p>
<p>好吧，暂时就先分析这么多吧，更多的就留着以后有闲工夫了，再做探究。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>为了这一章特地看了一点 lua</li>
<li>相见时难别亦难</li>
</ul>
<p>再次踏上故乡的土地，这一年里经历良多，以至有物是人非之感。<br>这一年，辗转各地参加比赛，看到了很多优秀的作品，认识到很多优秀的人，我开始逐渐明白，以前老顾常说的，“这只是一个小地方”，没错，投诸广袤的华夏大地，这片土地只是十分渺小的、不起眼的一点，而我，从小到大所以受到的良多赞誉，也只限于这一点罢了，出了这一点，方知过往的种种妄语，实在是井底之言。<br>又想起了初中时读《博弈论》，“凡有所失必有所得”，少时懵懂，不解其意，及至今日，这句话却又忽的涌上心头，我失去了什么？又得到了什么？果然，有些事物，越是成长，越是深刻。<br>所有的念头起于刹那又终于刹那，周身是人潮涌动，他们都去往同一个方向，归乡的人们，大多脸上洋溢着希望与喜悦。<br>我提起行囊，汇入人海，这一刻，我是沧海的一粟，也是历史的洪流。我是构成这个庞大的名为国家的机器的一个小小的齿轮，也许被替代，但是却无法被复制。<br>带着这样的觉悟，我向前走去。</p>
<p>– 2020 年 01 月 13 日，写于夜深人静之时。</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>spider</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库开发（1）</title>
    <url>/2020-03-02-database-development-1/</url>
    <content><![CDATA[<p>数据库学习笔记(1)</p>
<a id="more"></a>

<h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="查看支持的引擎"><a href="#查看支持的引擎" class="headerlink" title="查看支持的引擎"></a>查看支持的引擎</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &#39;table_type&#39;;
# 或者
SHOW VARIABLES LIKE &#39;have%&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h3><p>创建新表的时候，可以通过增加 ENGINE 关键字设置新建表的存储引擎，例如，在下面的例子中，表 ai 的存储引擎是 MyISAM，而 country 表的存储引擎是 InnoDB：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE ai (

i bigint(20) NOT NULL AUTO_INCREMENT,

PRIMARY KEY (i)

) ENGINE&#x3D;MyISAM DEFAULT CHARSET&#x3D;gbk;

CREATE TABLE country (

country_id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,

country VARCHAR(50) NOT NULL,

last_update TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

PRIMARY KEY (country_id)

)ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;gbk;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可以使用 ALTER TABLE 语句，将一个已经存在的表修改成其他的存储引擎。下面的例子介绍了如何将表 ai 从 MyISAM 存储引擎修改到 InnoDB 存储引擎：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysql&gt; alter table ai engine &#x3D; innodb;

Query OK, 0 rows affected (0.13 sec)

Records: 0 Duplicates: 0 Warnings: 0

mysql&gt; show create table ai \G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="各引擎存储特性"><a href="#各引擎存储特性" class="headerlink" title="各引擎存储特性"></a>各引擎存储特性</h3><p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200302154858-65354.png" alt="NeatReader-1583135271871" loading="lazy"></p>
<h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>其优势是访问的速度快，对事务完整性没有要求或者以 SELECT、INSERT 为主的应用基本上都可以使用这个引擎来创建表。</p>
<p>每个 MyISAM 在磁盘上存储成 3 个文件，其文件名都和表名相同，但扩展名分别是：</p>
<ul>
<li>.frm（存储表定义）</li>
<li>.MYD（MYData，存储数据）</li>
<li>.MYI（MYIndex，存储索引）</li>
</ul>
<p>支持 3 种不同的存储格式:</p>
<ul>
<li>静态（固定长度）表</li>
<li>动态表</li>
<li>压缩表</li>
</ul>
<p>其中，<strong>静态表</strong>是默认的存储格式。静态表中的字段都是非变长字段，这样<strong>每个记录都是固定长度</strong>的，这种存储方式的优点是存储<strong>非常迅速</strong>，<strong>容易缓存</strong>，<strong>出现故障容易恢复</strong>；缺点是<u>占用的空间通常比动态表多</u>。静态表的数据在存储时会按照列的宽度定义补足空格，但是在应用访问的时候并不会得到这些空格，这些空格在返回给应用之前已经去掉。</p>
<p>动态表中包含变长字段，记录不是固定长度的，这样存储的优点是占用的空间相对较少，但是频繁地更新和删除记录会产生碎片，需要<strong>定期执行 OPTIMIZE TABLE 语句或 myisamchk-r 命令来改善性能</strong>，并且在出现故障时恢复相对比较困难。</p>
<p>压缩表由 myisampack 工具创建，占据非常小的磁盘空间。因为每个记录是被单独压缩的，所以只有非常小的访问开支。</p>
<blockquote>
<p>MyISAM 类型的表可能会损坏，原因可能是多种多样的，损坏后的表可能不能被访问，会提示需要修复或者访问后返回错误的结果。MyISAM 类型的表提供修复的工具，可以用 CHECK TABLE 语句来检查 MyISAM 表的健康，并用 REPAIR TABLE 语句修复一个损坏的 MyISAM 表。表损坏可能导致数据库异常重新启动，需要尽快修复并尽可能地确认损坏的原因。</p>
</blockquote>
<h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>InnoDB 存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全。但是，处理效率差一些，并且会占用更多的磁盘空间以保留数据和索引。</p>
<h5 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h5><ul>
<li><p><strong>自动增长列</strong>(auto_increment)</p>
<p>InnoDB 表的自动增长列可以手工插入，但是插入的值如果是空或者 0，则实际插入的将是自动增长后的值。</p>
</li>
<li><p>外键约束</p>
<p>MySQL 支持外键的存储引擎只有 InnoDB，在创建外键的时候，要求父表必须有对应的索引，子表在创建外键的时候也会自动创建对应的索引。</p>
</li>
<li><p>存储方式</p>
<ul>
<li>使用共享表空间存储</li>
<li>使用多表空间存储</li>
</ul>
</li>
</ul>
<h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><p>MEMORY 存储引擎使用存在于<strong>内存中的内容</strong>来创建表。每个 MEMORY 表只实际对应一个磁盘文件，格式是.frm。MEMORY 类型的表访问<strong>非常地快</strong>，因为它的数据是放在内存中的，并且默认使用 HASH 索引，但是<u>一旦服务关闭，表中的数据就会丢失掉</u>。</p>
<blockquote>
<p>每个 MEMORY 表中可以放置的数据量的大小，受到 max_heap_table_size 系统变量的约束，这个系统变量的初始值是 16MB，可以根据需要加大。此外，在定义 MEMORY 表的时候，可以通过 MAX_ROWS 子句指定表的最大行数。</p>
</blockquote>
<p>MEMORY 类型的存储引擎主要用于那些<strong>内容变化不频繁的代码表</strong>，或者<strong>作为统计操作的中间结果表</strong>，便于高效地对中间结果进行分析并得到最终的统计结果。</p>
<h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><p>MERGE 存储引擎是一组 MyISAM 表的组合，这些 MyISAM 表必须结构完全相同，MERGE 表本身并没有数据，对 MERGE 类型的表可以进行查询、更新、删除操作，<u>这些操作实际上是对内部的 MyISAM 表进行的</u>。</p>
<p>可以对 MERGE 表进行 DROP 操作，这个操作只是删除 MERGE 的定义，对内部的表没有任何的影响。</p>
<h3 id="类型与选择"><a href="#类型与选择" class="headerlink" title="类型与选择"></a>类型与选择</h3><table>
<thead>
<tr>
<th>类型</th>
<th>适用环境</th>
</tr>
</thead>
<tbody><tr>
<td>MyISAM</td>
<td>默认的 MySQL 插件式存储引擎。如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常适合的。MyISAM 是在 Web、数据仓储和其他应用环境下最常使用的存储引擎之一</td>
</tr>
<tr>
<td>InnoDB</td>
<td>用于事务处理应用程序，支持外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询以外，还包括很多的更新、删除操作，那么 InnoDB 存储引擎应该是比较合适的选择。InnoDB 存储引擎除了有效地降低由于删除和更新导致的锁定，还可以确保事务的完整提交（Commit）和回滚（Rollback），对于类似计费系统或者财务系统等对数据准确性要求比较高的系统，InnoDB 都是合适的选择。</td>
</tr>
<tr>
<td>MEMORY</td>
<td>将所有数据保存在 RAM 中，在需要快速定位记录和其他类似数据的环境下，可提供极快的访问。MEMORY 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，其次是要确保表的数据可以恢复，数据库异常终止后表中的数据是可以恢复的。MEMORY 表通常用于更新不太频繁的小表，用以快速得到访问结果。</td>
</tr>
<tr>
<td>MERGE</td>
<td>用于将一系列等同的 MyISAM 表以逻辑方式组合在一起，并作为一个对象引用它们。MERGE 表的优点在于可以突破对单个 MyISAM 表大小的限制，并且通过将不同的表分布在多个磁盘上，可以有效地改善 MERGE 表的访问效率。这对于诸如数据仓储等 VLDB 环境十分适合。</td>
</tr>
</tbody></table>
<blockquote>
<p>除了这些之外，还有一些常见的第三方存储引擎，在某些特定应用中也有广泛使用，比如列式存储引擎 Infobright、高写性能高压缩的 TokuDB 就是其中非常有代表性的两种</p>
</blockquote>
<h2 id="选择数据类型"><a href="#选择数据类型" class="headerlink" title="选择数据类型"></a>选择数据类型</h2><h3 id="char-与-varchar"><a href="#char-与-varchar" class="headerlink" title="char 与 varchar"></a>char 与 varchar</h3><p>由于 CHAR 是固定长度的，所以它的处理速度比 VARCHAR 快得多，但是其缺点是浪费存储空间，程序需要对行尾空格进行处理，所以对于那些长度变化不大并且对查询速度有较高要求的数据可以考虑使用 CHAR 类型来存储</p>
<p><strong>在 MySQL 中，不同的存储引擎对 CHAR 和 VARCHAR 的使用原则有所不同，这里简单概括如下。</strong></p>
<table>
<thead>
<tr>
<th>存储引擎</th>
<th>使用原则</th>
</tr>
</thead>
<tbody><tr>
<td>MyISAM</td>
<td>建议使用固定长度的数据列代替可变长度的数据列。</td>
</tr>
<tr>
<td>MEMORY</td>
<td>目前都使用固定长度的数据行存储，因此无论使用 CHAR 或 VARCHAR 列都没有关系。两者都是作为 CHAR 类型处理。</td>
</tr>
<tr>
<td>InnoDB</td>
<td>建议使用 VARCHAR 类型。对于 InnoDB 数据表，内部的行存储格式没有区分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），因此在本质上，使用固定长度的 CHAR 列不一定比使用可变长度 VARCHAR 列性能要好。因而，主要的性能因素是数据行使用的存储总量。由于 CHAR 平均占用的空间多于 VARCHAR，因此使用 VARCHAR 来最小化需要处理的数据行的存储总量和磁盘 I/O 是比较好的。</td>
</tr>
</tbody></table>
<h3 id="text-与-blob"><a href="#text-与-blob" class="headerlink" title="text 与 blob"></a>text 与 blob</h3><p>主要差别是<strong>BLOB</strong>能用来保存<strong>二进制数据</strong>，比如照片；而 TEXT 只能保存字符数据，比如一篇文章或者日记。</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ol>
<li><p>BLOB 和 TEXT 值会引起一些性能问题，特别是在执行了大量的删除操作时。</p>
<p>删除操作会在数据表中留下很大的“空洞”，以后填入这些“空洞”的记录在插入的性能上会有影响。为了提高性能，建议定期使用 OPTIMIZE TABLE 功能对这类表进行碎片整理，避免因为“空洞”导致性能问题。</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">OPTIMIZE TABLE t;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>可以使用合成的（_Synthetic_）索引来提高大文本字段（BLOB 或 TEXT）的查询性能。</p>
<p>简单来说，合成索引就是根据大文本字段的内容建立一个散列值，并把这个值存储在单独的数据列中，接下来就可以通过检索散列值找到数据行了。但是，要注意这种技术<strong>只能用于精确匹配的查询</strong>（散列值对于类似“&lt;”或“&gt;=”等范围搜索操作符是没有用处的）。</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from t where hash_value&#x3D;md5(查询内容);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>如果需要对 BLOB 或者 CLOB 字段进行<u>模糊查询</u>，MySQL 提供了前缀索引，也就是只为字段的前 n 列创建索引。</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from t where context like &#39;beijing%&#39; \G;
# 注意，这里的查询条件中，“%”不能放在最前面，否则索引将不会被使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>注：/G 的作用是将查到的结构旋转 90 度变成纵向</p>
</blockquote>
</li>
<li><p>在不必要的时候避免检索大型的 BLOB 或 TEXT 值。</p>
<p>例如，SELECT *查询就不是很好的想法，除非能够确定作为约束条件的 WHERE 子句只会找到所需要的数据行。否则，很可能<u>毫无目的地在网络上传输大量的</u>值。</p>
</li>
<li><p>把 BLOB 或 TEXT 列分离到单独的表中。</p>
<p>在某些环境中，如果把这些数据列移动到第二张数据表中，可以把原数据表中的数据列转换为固定长度的数据行格式，那么它就是有意义的。这会减少主表中的碎片，可以得到固定长度数据行的性能优势。它还可以使主数据表在运行 SELECT *查询的时候不会通过网络传输大量的 BLOB 或 TEXT 值。</p>
</li>
</ol>
<h3 id="浮点数与定点数"><a href="#浮点数与定点数" class="headerlink" title="浮点数与定点数"></a>浮点数与定点数</h3><p>定点数不同于浮点数，定点数实际上是<strong>以字符串形式存放</strong>的，所以定点数可以更精确地保存数据。</p>
<blockquote>
<p>引申：浮点数使用原则</p>
<ol>
<li>浮点数存在误差问题；</li>
<li>对货币等对精度敏感的数据，应该用定点数表示或存储；</li>
<li>在编程中，如果用到浮点数，要特别注意误差问题，并尽量避免做浮点数比较；如果非要使用浮点数的比较则最好使用范围比较而不要使用“==”比较。</li>
<li>要注意浮点数中一些特殊值的处理。</li>
</ol>
</blockquote>
<h3 id="日期类型选择"><a href="#日期类型选择" class="headerlink" title="日期类型选择"></a>日期类型选择</h3><p>MySQL 中的日期和时间类型:</p>
<p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200302182755-801805.png" alt="NeatReader-1583144820301" loading="lazy"></p>
<p>MySQL 中日期和时间类型的零值表示</p>
<p><img src="http://typora-zxj.oss-cn-beijing.aliyuncs.com/typora/20200302182758-196851.png" alt="NeatReader-1583144823360" loading="lazy"></p>
<h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><h3 id="字符集的选择"><a href="#字符集的选择" class="headerlink" title="字符集的选择"></a>字符集的选择</h3><ol>
<li>满足应用支持语言的需求，如果应用要处理各种各样的文字，或者将发布到使用不同语言的国家或地区，就应该选择 Unicode 字符集。对 MySQL 来说，目前就是 UTF-8。</li>
<li>如果应用中涉及已有数据的导入，就要充分考虑数据库字符集对已有数据的兼容性。假如已有数据是 GBK 文字，如果选择 GB 2312-80 为数据库字符集，就很可能出现某些文字无法正确导入的问题。</li>
<li>如果数据库只需要支持一般中文，数据量很大，性能要求也很高，那就应该选择双字节定长编码的中文字符集，比如 GBK。因为，相对于 UTF-8 而言，GBK 比较“小”，每个汉字只占 2 个字节，而 UTF-8 汉字编码需要 3 个字节，这样可以减少磁盘 I/O、数据库 Cache 以及网络传输的时间，从而提高性能。相反，如果应用主要处理英文字符，仅有少量汉字数据，那么选择 UTF-8 更好，因为 GBK、UCS-2、UTF-16 的西文字符编码都是 2 个字节，会造成很多不必要的开销。</li>
<li>如果数据库需要做大量的字符运算，如比较、排序等，那么选择定长字符集可能更好，因为定长字符集的处理速度要比变长字符集的处理速度快。</li>
<li>如果所有客户端程序都支持相同的字符集，则应该优先选择该字符集作为数据库字符集。这样可以避免因字符集转换带来的性能开销和数据损失。</li>
</ol>
<h3 id="MySQL-字符集的设置"><a href="#MySQL-字符集的设置" class="headerlink" title="MySQL 字符集的设置"></a>MySQL 字符集的设置</h3><p>MySQL 的字符集和校对规则有 4 个级别的默认设置：<u>服务器级、数据库级、表级和字段级</u>。它们分别在不同的地方设置，作用也不相同。</p>
<p>服务器字符集和校对规则，可以在 MySQL 服务启动的时候确定。</p>
<p>可以在 my.cnf 中设置：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>
character-set-server<span class="token operator">=</span>gbk<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>或者在启动选项中指定：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqld --character-set-server<span class="token operator">=</span>gbk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>或者在编译时指定：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cmake <span class="token builtin class-name">.</span> -DDEFAULT_CHARSET<span class="token operator">=</span>gbk<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="数据库字符集和校对规则"><a href="#数据库字符集和校对规则" class="headerlink" title="数据库字符集和校对规则"></a>数据库字符集和校对规则</h3><p>数据库的字符集和校对规则在创建数据库的时候指定，也可以在创建完数据库后通过“alter database”命令进行修改。需要注意的是，如果数据库里已经存在数据，因为修改字符集并不能将已有的数据按照新的字符集进行存放，所以不能通过修改数据库的字符集直接修改数据的内容</p>
<p>设置数据库字符集的规则如下：</p>
<p>如果指定了字符集和校对规则，则使用指定的字符集和校对规则；</p>
<p>如果指定了字符集没有指定校对规则，则使用指定字符集的默认校对规则；</p>
<p>如果指定了校对规则但未指定字符集，则字符集使用与该校对规则关联的字符集；</p>
<p>如果没有指定字符集和校对规则，则使用服务器字符集和校对规则作为数据库的字符集和校对规则。</p>
<blockquote>
<p>推荐在创建数据库时明确指定字符集和校对规则，避免受到默认值的影响。</p>
</blockquote>
<h3 id="字符集修改步骤"><a href="#字符集修改步骤" class="headerlink" title="字符集修改步骤"></a>字符集修改步骤</h3><blockquote>
<p>如果在应用开始阶段没有正确地设置字符集，在运行一段时间以后才发现存在不能满足要求需要调整，又不想丢弃这段时间的数据，那么就需要进行字符集的修改。字符集的修改不能直接通过“alter database character set <strong>_”或者“alter table tablename character set _</strong>”命令进行，这两个命令都没有更新已有记录的字符集，而只是对新创建的表或者记录生效。已有记录的字符集调整，需要先将数据导出，经过适当的调整重新导入后才可完成。</p>
<p>以下模拟的是将 latin1 字符集的数据库修改成 GBK 字符集的数据库的过程。</p>
<p>（1）导出表结构：</p>
<p>mysqldump -uroot -p –default-character-set=gbk -d databasename&gt; createtab.sql</p>
<p>其中–default-character-set=gbk 表示设置以什么字符集连接，-d 表示只导出表结构，不导出数据。</p>
<p>（2）手工修改 createtab.sql 中表结构定义中的字符集为新的字符集。</p>
<p>（3）确保记录不再更新，导出所有记录。</p>
<p>mysqldump -uroot -p –quick –no-create-info –extended-insert –default- character-set=latin1 databasename&gt; data.sql</p>
<p>–quick：该选项用于转储大的表。它强制 mysqldump 从服务器一次一行地检索表中的行而不是检索所有行，并在输出前将它缓存到内存中。</p>
<p>–extended-insert：使用包括几个 VALUES 列表的多行 INSERT 语法。这样使转储文件更小，重载文件时可以加速插入。</p>
<p>–no-create-info：不导出每个转储表的 CREATE TABLE 语句。</p>
<p>–default-character-set=latin1：按照原有的字符集导出所有数据，这样导出的文件中，所有中文都是可见的，不会保存成乱码。</p>
<p>（4）打开 data.sql，将 SET NAMES latin1 修改成 SET NAMES gbk。</p>
<p>（5）使用新的字符集创建新的数据库。</p>
<p>create database databasename default charset gbk;</p>
<p>（6）创建表，执行 createtab.sql。</p>
<p>mysql -uroot -p databasename &lt; createtab.sql</p>
<p>（7）导入数据，执行 data.sql。</p>
<p>mysql -uroot -p databasename &lt; data.sql</p>
<p>注意： 选择目标字符集的时候，要注意最好是源字符集的超集，或者确定比源字符集的字库更大，否则如果目标字符集的字库小于源字符集的字库，那么目标字符集中不支持的字符导入后会变成乱码，丢失一部分数据。例如，GBK 字符集的字库大于 GB 2312 字符集，那么 GBK 字符集的数据，如果导入 GB 2312 数据库中，就会丢失 GB 2312 中不支持的那部分汉字的数据。</p>
</blockquote>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>默认情况下，MEMORY 存储引擎使用 HASH 索引，但也支持 BTREE 索引。</p>
<p>索引在创建表的时候可以同时创建，也可以随时增加新的索引。创建新索引的语法为：</p>
<pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name

[USING index_type]

ON tbl_name (index_col_name,. .)

index_col_name:

col_name [(length)] [ASC | DESC]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="索引设计原则"><a href="#索引设计原则" class="headerlink" title="索引设计原则"></a>索引设计原则</h3><ul>
<li><p><strong>搜索的索引列，不一定是所要选择的列</strong>。换句话说，最适合索引的列是出现在 WHERE 子句中的列，或连接子句中指定的列，而不是出现在 SELECT 关键字后的选择列表中的列。</p>
</li>
<li><p><strong>使用唯一索引</strong>。考虑某列中值的分布。索引的列的基数越大，索引的效果越好。</p>
<blockquote>
<p>例如，存放出生日期的列具有不同值，很容易区分各行。而用来记录性别的列，只含有“M”和“F”，则对此列进行索引没有多大用处，因为不管搜索哪个值，都会得出大约一半的行。</p>
</blockquote>
</li>
<li><p><strong>使用短索引</strong>。如果对字符串列进行索引，应该指定一个前缀长度，只要有可能就应该这样做。</p>
<p>较小的索引涉及的磁盘 IO 较少，较短的值比较起来更快。更为重要的是，对于较短的键值，索引高速缓存中的块能容纳更多的键值，因此，MySQL 也可以在内存中容纳更多的值。这样就增加了找到行而不用读取索引中较多块的可能性。</p>
<blockquote>
<p>例如，有一个 CHAR(200)列，如果在前 10 个或 20 个字符内，多数值是唯一的，那么就不要对整个列进行索引。对前 10 个或 20 个字符进行索引能够节省大量索引空间，也可能会使查询更快。</p>
</blockquote>
</li>
<li><p><strong>利用最左前缀</strong>。在创建一个 n 列的索引时，实际是创建了 MySQL 可利用的 n 个索引。多列索引可起几个索引的作用，因为可利用索引中最左边的列集来匹配行。</p>
</li>
<li><p><strong>不要过度索引</strong>。不要以为索引“越多越好”，什么东西都用索引是错误的。</p>
<p>每个额外的索引都要占用额外的磁盘空间，并降低写操作的性能。在修改表的内容时，索引必须进行更新，有时可能需要重构，因此，索引越多，所花的时间越长。如果有一个索引很少利用或从不使用，那么会不必要地减缓表的修改速度。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>DataBase</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mori Kokoro 开发记录</title>
    <url>/mori-kokoro/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前主要接触的爬虫开发主要有两种：</p>
<ol>
<li>静态网页</li>
<li>api</li>
</ol>
<p>我司已经有静态网页的检测工具,不过随着 api 类爬虫日益增加,需要一个新的可以用来检测 api 变动的脚本.</p>
<p>这里我选择开发一个命令行工具,而非 web 平台服务.理由是前者更加 geek &amp;&amp; cool.并且前者只要稍作改动,就可以很好地兼容后者.</p>
<p>我将其命名为 Mori Kokoro , 取自柯南的 <em>毛利小五郎</em> . 就一个检测脚本而言,它的工作与侦探 🔍 相类似(发现坏家伙 😀).同时这个脚本算是我第一个开发的命令行脚本,无论是代码质量,还是功能实现,都缺乏信心,所以就以毛利为名.</p>
<p><a href="https://github.com/zxjlm/Mori">Mori 项目地址</a></p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/mori.PNG" alt="main" loading="lazy"></p>
<a id="more"></a>

<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><h3 id="核心需求"><a href="#核心需求" class="headerlink" title="核心需求"></a>核心需求</h3><ol>
<li>检测 api 是否仍然可用</li>
<li>检测 api 的格式是否有变化</li>
<li><del>检测 api 对应的位置是否有对应的值</del></li>
</ol>
<h3 id="隐藏需求"><a href="#隐藏需求" class="headerlink" title="隐藏需求"></a>隐藏需求</h3><ol>
<li>并发效率.需要检测的爬虫不是简单的十几个,如何在尽可能短的时间内完成大量的爬虫检测？</li>
<li>形成报告/发送邮件.每次的检测结果需要形成记录报告,固化结果,不过这并不是刚需.</li>
<li>可扩展性.可扩展性主要分为三个方面.</li>
</ol>
<ul>
<li>参数扩展.主要体现在请求头的扩展</li>
<li>反反爬虫扩展</li>
<li>解密扩展<br>某些网站的 api 并不是简单就能申请到数据,但是每个网站的反爬虫、加密都不一样,不存在通解的写法,这里作为脚本的开发者,需要提供对应的接口给使用者.</li>
</ul>
<h2 id="脚本执行流程"><a href="#脚本执行流程" class="headerlink" title="脚本执行流程"></a>脚本执行流程</h2><p><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" id="SvgjsSvg1006" width="538" height="843" version="1.1"><defs id="SvgjsDefs1007"><marker id="SvgjsMarker1016" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1017" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"/></marker><marker id="SvgjsMarker1028" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1029" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"/></marker><marker id="SvgjsMarker1038" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1039" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"/></marker><marker id="SvgjsMarker1052" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1053" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"/></marker><marker id="SvgjsMarker1066" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1067" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"/></marker><marker id="SvgjsMarker1080" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1081" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"/></marker><marker id="SvgjsMarker1094" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1095" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"/></marker><marker id="SvgjsMarker1108" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1109" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"/></marker><marker id="SvgjsMarker1116" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1117" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"/></marker><marker id="SvgjsMarker1135" markerWidth="16" markerHeight="12" refX="16" refY="6" viewBox="0 0 16 12" orient="auto" markerUnits="userSpaceOnUse" stroke-dasharray="0,0"><path id="SvgjsPath1136" d="M0,2 L14,6 L0,11 L0,2" fill="#323232" stroke="#323232" stroke-width="2"/></marker></defs><g id="SvgjsG1008" transform="translate(60,25)"><path id="SvgjsPath1009" d="M 0 4Q 0 0 4 0L 92 0Q 96 0 96 4L 96 40Q 96 44 92 44L 4 44Q 0 44 0 40Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"/><g id="SvgjsG1010"><text id="SvgjsText1011" font-family="&quot;Comic Sans MS&quot;" text-anchor="middle" font-size="19px" width="76px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="&quot;Comic Sans MS&quot;" size="19px" weight="400" font-style="" opacity="1" y="7.15" transform="rotate(0)"><tspan id="SvgjsTspan1012" dy="23" x="48"><tspan id="SvgjsTspan1013" style="text-decoration:;">start</tspan></tspan></text></g></g><g id="SvgjsG1014"><path id="SvgjsPath1015" d="M108 69L108 100L108 100L108 131" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1016)"/></g><g id="SvgjsG1018" transform="translate(25,131)"><path id="SvgjsPath1019" d="M 20 0L 166 0L 146 60L 0 60L 20 0Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"/><g id="SvgjsG1020"><text id="SvgjsText1021" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="117px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="12.05" transform="rotate(0)"><tspan id="SvgjsTspan1022" dy="16" x="83.4"><tspan id="SvgjsTspan1023" style="text-decoration:;">input url、regex、</tspan></tspan><tspan id="SvgjsTspan1024" dy="16" x="83.4"><tspan id="SvgjsTspan1025" style="text-decoration:;">path、etc.</tspan></tspan></text></g></g><g id="SvgjsG1026"><path id="SvgjsPath1027" d="M108 191L108 216.5L108 216.5L108 242" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1028)"/></g><g id="SvgjsG1030" transform="translate(57,242)"><path id="SvgjsPath1031" d="M 0 33L 51 0L 102 33L 51 66L 0 33Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"/><g id="SvgjsG1032"><text id="SvgjsText1033" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="82px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="23.05" transform="rotate(0)"><tspan id="SvgjsTspan1034" dy="16" x="51"><tspan id="SvgjsTspan1035" style="text-decoration:;">status_code</tspan></tspan></text></g></g><g id="SvgjsG1036"><path id="SvgjsPath1037" d="M159 275L215.5 275L215.5 275L272 275" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1038)"/><rect id="SvgjsRect1040" width="37" height="16" x="197" y="267" fill="#ffffff"/><text id="SvgjsText1041" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="37px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="265.05" transform="rotate(0)"><tspan id="SvgjsTspan1042" dy="16" x="215.5"><tspan id="SvgjsTspan1043" style="text-decoration:;">!=200</tspan></tspan></text></g><g id="SvgjsG1044" transform="translate(272,250)"><path id="SvgjsPath1045" d="M 16.666666666666668 0L 146.33333333333334 0C 168.55555555555554 0 168.55555555555554 50 146.33333333333334 50L 16.666666666666668 50C -5.555555555555556 50 -5.555555555555556 0 16.666666666666668 0Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"/><g id="SvgjsG1046"><text id="SvgjsText1047" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="143px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="15.05" transform="rotate(0)"><tspan id="SvgjsTspan1048" dy="16" x="81.5"><tspan id="SvgjsTspan1049" style="text-decoration:;">error(status_code)</tspan></tspan></text></g></g><g id="SvgjsG1050"><path id="SvgjsPath1051" d="M108 308L108 340.5L108 340.5L108 373" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1052)"/><rect id="SvgjsRect1054" width="42" height="16" x="87" y="332.5" fill="#ffffff"/><text id="SvgjsText1055" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="42px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="330.55" transform="rotate(0)"><tspan id="SvgjsTspan1056" dy="16" x="108"><tspan id="SvgjsTspan1057" style="text-decoration:;">==200</tspan></tspan></text></g><g id="SvgjsG1058" transform="translate(55.5,373)"><path id="SvgjsPath1059" d="M 0 35L 52.5 0L 105 35L 52.5 70L 0 35Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"/><g id="SvgjsG1060"><text id="SvgjsText1061" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="85px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="25.05" transform="rotate(0)"><tspan id="SvgjsTspan1062" dy="16" x="52.5"><tspan id="SvgjsTspan1063" style="text-decoration:;">path is exist?</tspan></tspan></text></g></g><g id="SvgjsG1064"><path id="SvgjsPath1065" d="M160.5 408L216.75 408L216.75 408L273 408" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1066)"/><rect id="SvgjsRect1068" width="29" height="16" x="202.25" y="400" fill="#ffffff"/><text id="SvgjsText1069" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="29px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="398.05" transform="rotate(0)"><tspan id="SvgjsTspan1070" dy="16" x="216.75"><tspan id="SvgjsTspan1071" style="text-decoration:;">false</tspan></tspan></text></g><g id="SvgjsG1072" transform="translate(273,383)"><path id="SvgjsPath1073" d="M 16.666666666666668 0L 145.33333333333334 0C 167.55555555555554 0 167.55555555555554 50 145.33333333333334 50L 16.666666666666668 50C -5.555555555555556 50 -5.555555555555556 0 16.666666666666668 0Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"/><g id="SvgjsG1074"><text id="SvgjsText1075" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="142px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="15.05" transform="rotate(0)"><tspan id="SvgjsTspan1076" dy="16" x="81"><tspan id="SvgjsTspan1077" style="text-decoration:;">error(path change)</tspan></tspan></text></g></g><g id="SvgjsG1078"><path id="SvgjsPath1079" d="M108 443L108 471L108 471L108 499" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1080)"/><rect id="SvgjsRect1082" width="25" height="16" x="95.5" y="463" fill="#ffffff"/><text id="SvgjsText1083" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="25px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="461.05" transform="rotate(0)"><tspan id="SvgjsTspan1084" dy="16" x="108"><tspan id="SvgjsTspan1085" style="text-decoration:;">true</tspan></tspan></text></g><g id="SvgjsG1086" transform="translate(52.5,499)"><path id="SvgjsPath1087" d="M 0 32.5L 55.5 0L 111 32.5L 55.5 65L 0 32.5Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"/><g id="SvgjsG1088"><text id="SvgjsText1089" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="91px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="22.55" transform="rotate(0)"><tspan id="SvgjsTspan1090" dy="16" x="55.5"><tspan id="SvgjsTspan1091" style="text-decoration:;">anchor(regex)</tspan></tspan></text></g></g><g id="SvgjsG1092"><path id="SvgjsPath1093" d="M163.5 531.5L223.25 531.5L223.25 535L283 535" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1094)"/><rect id="SvgjsRect1096" width="29" height="16" x="208.75" y="525.25" fill="#ffffff"/><text id="SvgjsText1097" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="29px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="523.3" transform="rotate(0)"><tspan id="SvgjsTspan1098" dy="16" x="223.25"><tspan id="SvgjsTspan1099" style="text-decoration:;">false</tspan></tspan></text></g><g id="SvgjsG1100" transform="translate(283,510)"><path id="SvgjsPath1101" d="M 16.666666666666668 0L 135.33333333333334 0C 157.55555555555554 0 157.55555555555554 50 135.33333333333334 50L 16.666666666666668 50C -5.555555555555556 50 -5.555555555555556 0 16.666666666666668 0Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"/><g id="SvgjsG1102"><text id="SvgjsText1103" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="132px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="15.05" transform="rotate(0)"><tspan id="SvgjsTspan1104" dy="16" x="76"><tspan id="SvgjsTspan1105" style="text-decoration:;">error(anchor)</tspan></tspan></text></g></g><g id="SvgjsG1106"><path id="SvgjsPath1107" d="M108 564L108 604L108 604L108 644" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1108)"/><rect id="SvgjsRect1110" width="25" height="16" x="95.5" y="596" fill="#ffffff"/><text id="SvgjsText1111" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="25px" fill="#323232" font-weight="400" align="top" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="594.05" transform="rotate(0)"><tspan id="SvgjsTspan1112" dy="16" x="108"><tspan id="SvgjsTspan1113" style="text-decoration:;">true</tspan></tspan></text></g><g id="SvgjsG1114"><path id="SvgjsPath1115" d="M163.5 531.5L200.75 531.5L200.75 656L238 656" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1116)"/></g><g id="SvgjsG1118" transform="translate(238,619)"><path id="SvgjsPath1119" d="M 20 0L 0 0L 0 74L 20 74" stroke="rgba(50,50,50,1)" stroke-width="2" fill="none"/><path id="SvgjsPath1120" d="M 0 0L 275 0L 275 74L 0 74Z" stroke="none" fill="none"/><g id="SvgjsG1121"><text id="SvgjsText1122" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="255px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="19.05" transform="rotate(0)"><tspan id="SvgjsTspan1123" dy="16" x="137.5"><tspan id="SvgjsTspan1124" style="text-decoration:;">strict mode:check all items</tspan></tspan><tspan id="SvgjsTspan1125" dy="16" x="137.5"><tspan id="SvgjsTspan1126" style="text-decoration:;">nomarl mode:only one</tspan></tspan></text></g></g><g id="SvgjsG1127" transform="translate(42,644)"><path id="SvgjsPath1128" d="M 20.333333333333332 0L 132 0L 111.66666666666667 61L 0 61L 20.333333333333332 0Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"/><g id="SvgjsG1129"><text id="SvgjsText1130" font-family="微软雅黑" text-anchor="middle" font-size="13px" width="93px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="微软雅黑" size="13px" weight="400" font-style="" opacity="1" y="20.55" transform="rotate(0)"><tspan id="SvgjsTspan1131" dy="16" x="66.3"><tspan id="SvgjsTspan1132" style="text-decoration:;">output result</tspan></tspan></text></g></g><g id="SvgjsG1133"><path id="SvgjsPath1134" d="M108 705L108 736.5L108 736.5L108 768" stroke="#323232" stroke-width="2" fill="none" marker-end="url(#SvgjsMarker1135)"/></g><g id="SvgjsG1137" transform="translate(58,768)"><path id="SvgjsPath1138" d="M 16.666666666666668 0L 83.33333333333333 0C 105.55555555555556 0 105.55555555555556 50 83.33333333333333 50L 16.666666666666668 50C -5.555555555555556 50 -5.555555555555556 0 16.666666666666668 0Z" stroke="rgba(50,50,50,1)" stroke-width="2" fill-opacity="1" fill="#ffffff"/><g id="SvgjsG1139"><text id="SvgjsText1140" font-family="&quot;Comic Sans MS&quot;" text-anchor="middle" font-size="19px" width="80px" fill="#323232" font-weight="400" align="middle" anchor="middle" family="&quot;Comic Sans MS&quot;" size="19px" weight="400" font-style="" opacity="1" y="10.15" transform="rotate(0)"><tspan id="SvgjsTspan1141" dy="23" x="50"><tspan id="SvgjsTspan1142" style="text-decoration:;">end</tspan></tspan></text></g></g></svg></p>
<h2 id="脚本优化"><a href="#脚本优化" class="headerlink" title="脚本优化"></a>脚本优化</h2><h3 id="对多个配置文件进行优化"><a href="#对多个配置文件进行优化" class="headerlink" title="对多个配置文件进行优化"></a>对多个配置文件进行优化</h3><p>不同的爬虫隶属的业务模块不同,笼统地使用一个配置文件在实际使用时还需要使用者手动再按照业务划分拆开检测结果,这属于”不必要的麻烦”.</p>
<p>所以将配置文件扩展为可以在命令行参数中指定.</p>
<h3 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h3><p>仅仅生成报告还是不够,在企业中常常使用邮件来作为记录媒介.</p>
<p>通常不仅是脚本的执行者需要知道结果,业务的相关负责人都有这方面的需求.所以加入邮件模块.</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/email.PNG" alt="email" loading="lazy"></p>
<h4 id="发送邮件-优化"><a href="#发送邮件-优化" class="headerlink" title="发送邮件-优化"></a>发送邮件-优化</h4><ol>
<li>发送邮件的同时,将 xls 报告 attach</li>
<li>优化邮件内容,直接以 html-table 发送</li>
</ol>
<h3 id="使用-rich-美化输出结果"><a href="#使用-rich-美化输出结果" class="headerlink" title="使用 rich 美化输出结果"></a>使用 <em>rich</em> 美化输出结果</h3><p><a href="https://github.com/willmcgugan/rich">rich</a> 是 python 知名的一个第三方输出模块.</p>
<p>通过该模块可以得到更好的 console output 体验.</p>
<h2 id="开发过程中遇到的问题"><a href="#开发过程中遇到的问题" class="headerlink" title="开发过程中遇到的问题"></a>开发过程中遇到的问题</h2><h3 id="xlwd-直接写入-stream"><a href="#xlwd-直接写入-stream" class="headerlink" title="xlwd 直接写入 stream"></a>xlwd 直接写入 stream</h3><h4 id="1-BytesStream-而非-StringStream"><a href="#1-BytesStream-而非-StringStream" class="headerlink" title="1. BytesStream 而非 StringStream"></a>1. BytesStream 而非 StringStream</h4><p>邮件和形成 xls 报告虽然是两种业务情况,但是在代码上存在一定的从属关系.</p>
<p>在将 xls 报告 attach 到邮件时,没有必要在本地生成该文件浪费存储空间.</p>
<p>在 <a href="https://stackoverflow.com/questions/15649034/xlwt-write-excel-sheet-on-the-fly">xlwt write excel sheet on the fly
</a> 中,提到可以使用 <strong>StringIO 模块</strong> ,不过在实际操作时,发现 xlwt 的 steam 并不是 String 流,而是 Bytes 流,所以代码改为如下的写法.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO

fs <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span><span class="token punctuation">)</span>
workbook <span class="token operator">=</span> xlwt<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
workbook<span class="token punctuation">.</span>save<span class="token punctuation">(</span>fs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="2-getvalue-而非-read"><a href="#2-getvalue-而非-read" class="headerlink" title="2. getvalue() 而非 read()"></a>2. getvalue() 而非 read()</h4><p>在从 fs 中读取流数据时,有些网站教程的读取方式是使用 read().在实际测试过程中,read()仅能够取出初始化 stream 时的数据,而后期 write()的数据,无法读出.</p>
<p>在官方文档<a href="https://docs.python.org/3/library/io.html#io.BytesIO">io — Core tools for working with streams</a>中,使用的读取案例代码如下.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token string">b"abcdef"</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> view <span class="token operator">=</span> b<span class="token punctuation">.</span>getbuffer<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">>></span><span class="token operator">></span> view<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b"56"</span>
<span class="token operator">>></span><span class="token operator">></span> b<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token string">b'ab56ef'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在改用 <strong>getvalue()</strong> 后,成功读出数据</p>
<h3 id="rich-的-traceback"><a href="#rich-的-traceback" class="headerlink" title="rich 的 traceback"></a>rich 的 traceback</h3><p>为了美化输出结果,使用了 rich 模块,将所有的 print 更改为 rich 的 print,在输出 dict 结果时,有更好的视觉体验.</p>
<p>这里就衍生除一个需求,对于运行出错的配置项,需要一个 traceback 来追踪错误的成因.</p>
<p>当配置文件中存在多个检测配置时,遇到错误就立刻抛出打印这种做法不利于我们锁定具体是那个配置除了问题.所以,这个 traceback 最好是存储在结果列表中,然后随着结果一个个输出.</p>
<p>但是 rich 的 traceback 并不是可以存储的对象.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>
    do_something<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    console<span class="token punctuation">.</span>print_exception<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上是调用代码.</p>
<p>在查阅源码之后,发现 exception 是先被捕获到一个 TraceBack 类中,然后以这个类作为对象,再调用 print 将其输出.</p>
<p>于是,提取出 TraceBack 类,将其暂存到结果中.在输出函数中,判断是否检测成功,如果失败,则输出 traceback 内容.</p>
<p><img src="https://harumona-blog.oss-cn-beijing.aliyuncs.com/new_articles/mori-traceback.PNG" alt="traceback" loading="lazy"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>第一次进行 python 的命令行脚本开发,要考虑的东西很多(需求分析、代码优化、修 bug、……),当然,完成之后的成就感让这一切都显得很值得.</p>
]]></content>
      <categories>
        <category>源流清泉</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>diyTools</tag>
      </tags>
  </entry>
  <entry>
    <title>今日简史-笔记</title>
    <url>/2019-09-26-21-Lessons-for-the-21st-Century/</url>
    <content><![CDATA[<h1 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h1><blockquote>
<p>本摘录由 Apple Books 导出</p>
</blockquote>
<p>笔记摘自</p>
<p>今日简史：人类命运大议题</p>
<p>[以色列] 尤瓦尔·赫拉利</p>
<p>2019 年 8 月 12 日 序</p>
<p>恐怖主义既是全球性的政治问题，也是一种内部心理机制。恐怖主义要发挥效用，靠的是按下我们内心深处的恐惧按钮，劫持数百万人的想象力。同样，自由民主的危机不仅存在于国会和投票站，同时也存在于神经元和突触之中。个人即政治，已经是老掉牙的说法。但在这个科学家、企业和政府都想侵入人类大脑的时代，这套老生常谈却远比以往更邪恶。</p>
<p>2019 年 8 月 12 日 序</p>
<p>个人生活可能影响全球，意味着揭露我们自己的宗教和政治偏见、种族和性别特权，以及对制度压迫无意的共谋，比以往任何时候都重要。然而，这些目标真的能实现吗？如果这个世界就是这样远远超出我们的眼界、完全不受人类控制、所有的神祇和意识形态都遭到质疑，我们又怎么可能找到稳固的道德根基？</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>球大部分地区的掌权者残暴无情，而且就算在最自由的国家，仍有许多公民忍受着压迫、暴力和贫困。但至少我们已经知道应对这些问题的方法：让人民有更多的自由。我们必须保护人权，让每个人都有投票权，建立自由市场，并尽可能让个人、思想与商品在世界各地轻松流动。</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>但自从 2008 年全球金融危机以来，全球人民对自由主义这套故事越来越感到理想幻灭。壁垒与防火墙再次大行其道，反移民、反贸易协议的力度也日益加大。表面上看来是民主体制的政府，却在暗中破坏司法体系独立、限制新闻自由，并把所有反对政府的举措视为叛国。</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>人类发明工具的时候很聪明，但使用工具的时候就没那么聪明了。单纯兴建大坝拦截河流并不难，但是要预测这对整个生态系统的影响实在不容易。同样，只是改变我们意念流动的方向，比预测这对个人心理或社会系统有何影响轻松得多。</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>特朗普警告美国选民，墨西哥人和中国人会抢走他们的工作，应该在墨西哥边境筑起一道墙。4 但他从来没有警告过选民，算法会抢走他们的工作，应该在硅谷所在的加州边界筑起防火墙。</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>自由主义的故事，是一套关于普通人的故事。如果未来成了生化人、网络算法的世界，自由主义的故事要怎样才能继续有意义地讲下去？</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>也许在 21 世纪，平民主义者（populist，或“民粹主义者”）反抗的将不再是经济精英剥削人民，而是经济精英不再需要人民。6 而且平民主义者很可能会败下阵来，因为反抗“无足轻重”比反抗“剥削”困难许多。<br>最可怕的是没有价值</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>西方自由主义者还是很少将他们所谓的共通价值应用到非西方人民的身上。</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>然而，历史并未终结，而且经过斐迪南时期、希特勒时期和切·格瓦拉时期之后，我们发现自己来到了特朗普时期。但这一次，自由主义的对手并不像帝国主义、法西斯主义或共产主义一样有一套完整的意识形态，特朗普时期所散发的是浓浓的虚无主义。</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>民主的根基之一，在于亚伯拉罕·林肯提出的原则：你可以在某些时候欺骗所有人，也可以在所有时候欺骗某些人，但你无法在所有时候欺骗所有人。如果政府腐败，未能改善人民生活，最终一定会有越来越多的公民看清真相。然而，政府控制媒体之后，阻碍了公民看清真相，也就打破了林肯的逻辑。</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>只要制造出永无止境的危机，腐败的寡头政治就能享受永无止境的统治。</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>人民会用脚投票以增加政治自由。</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>特朗普呼吁美国应该采取孤立主义，承诺要“让美国再次伟大”，这听起来好像在说，20 世纪 80 年代甚至 50 年代的美国社会真是完美，美国应该在 21 世纪重现这种社会。至于英国脱欧分子，则是梦想让英国成为一个独立的强权，他们仿佛还活在维多利亚女王时代，也仿佛以为就算到了这个互联网和全球变暖的时代，“光荣孤立政策”还能继续实行。至于俄罗斯，普京的官方愿景可不是要建立腐败的寡头政治，而是要复兴沙皇时代的帝国。在十月革命（Bolshevik revolution）一个世纪后，普京率领着俄罗斯民族和东正教信仰推动的政府，承诺要重返古代沙皇的荣耀，影响力从波罗的海一路延伸到高加索地区</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>自由主义幻灭后形成思想空缺，暂时由地方的怀旧幻想来填补，缅怀着往日的荣光——这可以说是正在全球发生的事</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>然而，我们现在面临的最大问题在于生态崩溃和科技颠覆，而自由主义对此并没有给出明确的答案</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>第一步是缓和对末日预言的反应，从恐慌转为困惑。恐慌其实是一种傲慢，是自以为完全知道世界正在走向毁灭；困惑则是比较谦逊的态度，也就能看得比较清楚。如果你现在觉得想跑到大街上大喊“世界末日来了！”那么你要告诉自己：“不，不是这样。我其实只是不知道世界究竟发生了什么事而已。”</p>
<p>2019 年 8 月 12 日 第 1 章 理想的幻灭：从旧故事到新故事</p>
<p>科技革命可能很快就会让数十亿人失业，并创造出一个人数众多的新无用阶级，带来现有意识形态无法应对的社会和政治动荡。讨论科技和意识形态，可能听起来十分抽象，与我们距离遥远，但说到大规模失业这种再真实不过的前景，人人都无法再冷漠下去。</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>人类有两种能力：身体能力和认知能力。过去，机器主要是在原始的身体能力方面得以与人类竞争，而人类则在认知能力方面享有巨大优势。因此，随着农业和工业迈向自动化，就出现了新的服务业工作。这些新工作需要人类拥有独特的认知技能，包括学习、分析、沟通等，特别是必须理解人类的种种情绪</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>人工智能不仅能够侵入人类，在以往认为专属于人类的技能上打败人类，更拥有独特的非人类能力，使得人工智能和人类之间的差异不是程度高低的问题，而是完完全全的两回事。人工智能特别重要的两种非人类能力是“连接性”和“可更新性”。</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>我们面临的不是几百万台计算机和机器人取代几百万个工人，而是所有作为个体的工人都会被一套集成的网络所取代</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>我们真正该保护的是人类，而不是工作</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>人文关怀产业（也就是照顾老幼病残）大概在很长一段时间内仍然会是人类的工作</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>除了养老产业，创意产业也是自动化特别难以突破的领域</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>在所有艺术形式中，最容易受到大数据分析冲击的可能就是音乐。音乐的输入和输出都适合用精确的数学来描述，输入时是声波的数学模式，输出时则是神经风暴的电化学反应模式。在几十年内，算法只要经过几百万次的音乐体验，就可能学会如何预测某种输入如何产生某种输出。</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>这样说来，2050 年的就业市场的特点很可能在于人类与人工智能的合作，而非竞争。从警务到银行等各个领域，“人类+人工智能”的表现都能超越单纯的人类或单纯的计算机。</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>因此，虽然出现了许多新的人类工作，我们仍然可能看到新的“无用阶层”日益庞大。我们甚至可能两面不讨好：一方面许多人找不到工作，另一方面也有许多雇主找不到有技能的雇员。</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>只要抓住了算法的目光，抓住人类的目光就是自然而然的事了</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>目前我们还不知道，究竟是该为民众提供全民基本收入（资本主义的天堂）还是全民基本服务（共产主义的天堂）。两个选项各有优缺点。但无论你选择哪个天堂，真正的问题还是在于“全民”与“基本”的定义。</p>
<p>2019 年 8 月 13 日 第 2 章 就业：等你长大，可能没有工作</p>
<p>如果我们能够打开一张全民经济安全网，再结合强大的社群及有意义的目标，那么工作被算法抢走也可能是塞翁失马。话虽如此，如果被抢走的是对生命的控制权，情况就可怕得多了。虽然我们正面临着人类大规模失业的危险，但更该担心的其实是人类目前握有的权威被算法夺走。这样一来，可能会让人类对自由主义这套故事彻底失去信心，而开启一条通往数字独裁的道路。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>遇到的各种机构、企业和政府都能了解甚至操纵过去我以为没有外人可进入的内心世界，我大概也就不会再以为自己有自由意志这种东西。 医学领域已经如此。我们生命中最重要的医疗决定，并不是取决于我们自己是否觉得健康，甚至也不是看医生做出什么判断，而是要看比我们更了解我们身体的计算机得出怎样的运算结果。再过几十年，大数据算法就能通过持续的生物统计数据流，24 小时监测我们的健康状况。早在我们出现任何感觉之前，算法就能监测到流感病毒、癌细胞或阿尔茨海默病的蠢蠢欲动，接着就能针对每个人的体质、DNA（脱氧核糖核酸）和性格，量身推荐适合的治疗方案、饮食和养生之道</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>认为绝大多数英国民众（包括他自己）其实都缺乏必要的经济和政治科学背景，根本不该要求他们投下这张公投票。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>民主的概念认为，人类的感受反映出一种神秘而意义深远的“自由意志”，而这就是权威的本源；虽然每个人的聪明程度高下有别，但自由程度一律平等</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>这种对“心”的依赖，可能就是自由民主的致命弱点。一旦有人研发出相关技术，能够攻入并操纵人心，民主政治便将成为一场情感丰沛的木偶戏</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>“感受”的基础也不是直觉、灵感或自由，而是运算。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>如果某个古代祖先的感受犯了某个错误，塑造这些感受的基因就不会再传给下一代。因此，感受并非与理性背道而驰，而是体现了进化上的理性。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>我们现在正处于两次巨大革命的交汇中。一方面，生物学家正在揭开人体（特别是大脑和人类感受）的种种奥秘；另一方面，计算机科学家也让我们获得前所未有的数据处理能力</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>医疗领域已经发生的事，很可能即将延伸到越来越多的领域。扮演关键角色的发明就是生物传感器。在人们将它们穿戴上或植入人体之后，生物传感器就能将各种生物程序转换成计算机能够存储、分析的电子信息。只要有了足够的生物统计数据及运算能力，外部的数据处理系统就能进入你的身体，得知你所有的欲望、决定和意见。换言之，它们能够完全知道你是怎样的人</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平<br>常有的事情是，我们听到很多人说某部影片真是神作，觉得不看不行，结果自己看到一半就睡到不省人事，但事后觉得可不能让人认为自己是个俗人，所以还是要向大家声称这部片子真是太好看了。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>英文单词“television”（电视）的语源，分别来自希腊文的 tele（远），以及拉丁文的 visio（视界），原本是要让我们可以看到远方的事物，但很快就可能是让别人从远方看见我们</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>谁都可以列出算法面临的许许多多问题，并由此得出结论：人类永远不会信任算法。这有点儿像列出民主的所有弊端，然后得出结论：任何一个有理智的人都不会支持这种制度。丘吉尔曾有一句名言，说除了其他所有制度之外，民主是全世界最糟糕的政治制度。不论是对是错，人类都可能对大数据算法得到相同的结论：虽然算法漏洞百出，但我们并没有更好的选择。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>一旦人工智能比我们自己更清楚该选择哪个职业，甚至怎样处理人际关系，我们对人性和生命的概念将不得不改变</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>有人可能会提出异议，认为重要的决策通常涉及道德因素，而算法不懂道德，所以我们永远不会把重要的决定交给算法去处理</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>然而，计算机算法并不是由自然选择塑造而成，而且既没情绪也无直觉。所以到了危急的瞬间，它们继续遵守伦理道德的能力就比人类高出许多</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>在 20 世纪后期，民主国家的表现通常优于专制国家，是因为民主国家更善于处理数据。民主制度采用分布式的信息处理，由许多人和机构来做出决定，而专制制度则是把所有信息和权力都集中在一处。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>有了人工智能，就能集中处理大量的信息，甚至因为机器学习在分析越多信息之后效果越好，所以人工智能可能会让集中式系统比分布式系统效率更高。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>随着算法变得如此了解我们，某些政权能够对公民进行绝对的控制，程度甚至超过纳粹德国，而且公民可能完全无力抵抗。这种政权不仅能明确掌握你的感受，甚至还能控制你的感受。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>就算民主制度成功适应调整而生存下来，人民也可能遭受到新形态的压迫和歧视</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>如果被歧视的是某个群体（例如妇女或黑人），这些群体能够组织起来，抗议他们集体遭到歧视。然而，现在算法歧视的有可能就是你这个人，而你完全不知道原因。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>果被歧视的是某个群体（例如妇女或黑人），这些群体能够组织起来，抗议他们集体遭到歧视。然而，现在算法歧视的有可能就是你这个人，而你完全不知道原因。有可能是你的 DNA、你的过去或者脸谱网账号上有些什么，引起了算法的注意。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>但实际上，并没有理由相信人工智能会获得意识，因为智能和意识是天差地别的两种概念。智能是解决问题的能力，意识则是能够感受痛苦、喜悦、爱和愤怒等事物的能力。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>提高智能的路其实有好几条，其中只有一条需要靠意识。就像飞机不用发展出羽毛，但飞行速度却比鸟更快，计算机也不用发展出哺乳动物所需要的感受，就能比哺乳动物更会解决问题。</p>
<p>2019 年 8 月 18 日 第 3 章 自由：数据霸权与社会公平</p>
<p>未来的危险还不止数字独裁一项。自由主义秩序背后的价值观除了自由之外，也很重视平等。自由主义一直强调政治上的平等，也慢慢发现经济上的平等几乎同样重要。如果没有社会安全网的机制与一定的经济平等，自由就毫无意义。然而，正因为大数据算法可能会抹去自由，同时也就可能创造出历史上最不平等的社会，让所有的财富和权力集中在一小群精英手中。大多数人类的痛苦将不再是受到剥削，而是更糟的局面：再也无足轻重。</p>
<p>2019 年 8 月 18 日 第 4 章 平等：谁该拥有数据</p>
<p>在过去的几十年间，全球都以为人类将迈向人人平等，而全球化和新技术则会让我们走得更快。但实际上，21 世纪可能会产生历史上最不平等的社会。虽然全球化和互联网缩短了国家之间的距离，却可能扩大阶级之间的差距；人类似乎就要达成全球统一，但人类这个物种却可能分裂成不同的生物种姓。</p>
<p>2019 年 8 月 21 日 第 4 章 平等：谁该拥有数据</p>
<p>现在看来，这项承诺大概不会有实现的一天。全球化确实让许多人受益，但有迹象显示，社会之间和社会内部的不平等日益加剧，少数人逐渐垄断了全球化的成果，而其他数十亿人则被弃之不顾。现在，最富有的 1%人群已经拥有全球一半的财富。更令人警醒的是，最富有的 100 人所拥有的财富，已经超越了最贫穷的 40 亿人。</p>
<p>2019 年 8 月 21 日 第 4 章 平等：谁该拥有数据</p>
<p>人工智能兴起可能会让大多数人类不再拥有经济价值和政治力量。同时，生物技术的进步则可能将经济上的不平等转化为生物上的不平等。</p>
<p>2019 年 8 月 21 日 第 4 章 平等：谁该拥有数据<br>迄今为止，能用钱买到的顶多就是地位的象征，但很快就有可能买到生命本身。<br>生物技术，尤其是涉及到伦理的生物技术（如基因编辑），往往都在明面上被所有人抵制，但是，也仅仅限于明面上罢了。</p>
<p>2019 年 8 月 21 日 第 4 章 平等：谁该拥有数据</p>
<p>等到贫富之间出现真正的能力差异，要再拉近几乎不再可能</p>
<p>2019 年 8 月 21 日 第 4 章 平等：谁该拥有数据</p>
<p>雪上加霜的是，等到民众不再具备经济与政治上的力量，国家对国民健康、教育和福利的投资意愿也可能降低。成了多余的人，是件非常危险的事。</p>
<p>2019 年 8 月 21 日 第 4 章 平等：谁该拥有数据</p>
<p>如果我们希望避免所有财富和权力都集中在一小群精英手中，关键在于规范数据的所有权。</p>
<p>2019 年 8 月 21 日 第 4 章 平等：谁该拥有数据</p>
<p>我们不是他们的用户，而是商品。</p>
<p>2019 年 8 月 21 日 第 4 章 平等：谁该拥有数据</p>
<p>而就长期来看，只要取得足够的数据和运算能力，数据巨头就能破解生命最深层的秘密，不仅能为我们做选择或操纵我们，甚至可能重新设计生物或无机的生命形式</p>
<p>2019 年 8 月 21 日 第 4 章 平等：谁该拥有数据</p>
<p>就算你还没想清楚怎么用某批数据来赚钱，最好也先有了再说，因为这可能就是控制和塑造未来生活的关键。</p>
<p>2019 年 8 月 21 日 第 4 章 平等：谁该拥有数据</p>
<p>如果我们想要阻止一小群精英分子垄断这种神一般的权力，如果我们想要避免人类分裂成不同的物种，关键的问题就是：该由谁拥有数据？关于我的 DNA、我的大脑和我的生命，这些数据到底是属于我、属于政府、属于企业，还是属于全体人类？</p>
<p>2019 年 8 月 21 日 第 5 章 社群：人类身体的价值</p>
<p>在远古时代，人类绝不可以如此漫不经心。当时的采集者必须永远保持警觉、专心一意。走在森林里寻找蘑菇的时候，要注意地面是否有小小的凸起，还要注意草丛中是否发出了细微的声音，以免有蛇躲在那里。等到发现可食用的蘑菇，还要极其小心地试尝一下，以免吃到有毒的菌类。但到了现代的富裕社会，人类不再需要如此敏锐的感官意识。我们可以一边走在超市的走道里，一边发短信，一边在成百上千种食物中随意挑选。这些食物都经过了卫生部门的安全检验，于是我们能够安心食用。但不管我们挑了什么食物，最后都是坐在某个屏幕前一边狼吞虎咽，一边收着电子邮件或看着电视，全然不会注意食物究竟味道如何。<br>这是一个问题，用进废退，现代高度发达的技术使得人类从原始时期就不断进化的的感官呈现出退化趋势、</p>
<p>2019 年 8 月 21 日 第 5 章 社群：人类身体的价值</p>
<p>人类政治家还有很多工作要做，但我们需要新型的政治家，并能够以真正的全球视角来思考，因为现在的人类社会已经拥有共同的文明。这个文明绝不是什么和谐的社群，而是充满了内部分歧与冲突。然而，所有人类群体都面对着共同的机会和挑战，再也无法变回孤立的部落。</p>
<p>2019 年 8 月 22 日 第 6 章 文明：世界的大同</p>
<p>宗教激进派可能会带来根本性的挑战，但它挑战的“文明”是全球文明，而不仅仅针对西方文明。<br>2019 年 8 月 22 日 第 6 章 文明：世界的大同</p>
<p>人类统一的过程有两种不同的形式：在不同的群体之间建立连接，以及让不同的群体采用相同的实践方式。</p>
<p>2019 年 8 月 22 日 第 6 章 文明：世界的大同</p>
<p>战争也让人类对彼此更感兴趣。</p>
<p>2019 年 8 月 22 日 第 6 章 文明：世界的大同</p>
<p>因此，全球政治也就遵守着“安娜·卡列尼娜定律”：成功的国家都很相似，但失败的国家各有不同，就是少了主流政治那套方案的某个成分。</p>
<p>2019 年 8 月 22 日 第 6 章 文明：世界的大同</p>
<p>因此，等到观看 2020 年东京奥运会的时候，请记住，虽然这看似是国与国之间的竞争，但实际上是世界各国达成了极为了不起的协议。每当有代表团获得金牌、看着国旗升起而深感民族自豪的时候，别忘了我们更有理由为全人类有能力组织这样一场盛会而深感荣耀。</p>
<p>2019 年 8 月 22 日 第 6 章 文明：世界的大同</p>
<p>因为美元超越了政治和宗教分歧，得到了世界的广泛认可。虽然美元本身没有价值（不能拿来吃，也不能拿来喝），但全世界对于美元和美国联邦储备银行的信心如此坚定，就算是宗教激进派、墨西哥毒枭和专制统治者也能志同道合。</p>
<p>2019 年 8 月 24 日 第 7 章 民族主义：无法解决全球性问题</p>
<p>因此，冷战期间，国际政治走向更为全球化的方向，民族主义被打入冷宫。冷战结束后，全球化似乎已经成为无法阻挡的浪潮</p>
<p>2019 年 8 月 24 日 第 7 章 民族主义：无法解决全球性问题</p>
<p>各地民众开始觉得全球资本主义冷酷无情，令人感到孤立无援，再加上担心未来国家健康、教育和福利制度无以为继，于是又投入民族主义的怀抱来寻求安慰和意义。</p>
<p>2019 年 8 月 24 日 第 7 章 民族主义：无法解决全球性问题</p>
<p>核战争、生态崩溃和科技颠覆，这三个问题中的每一个都足以威胁人类文明的未来。如果它们交织在一起，更有可能因为互相促进、彼此结合，让人类面临前所未有的生存危机。</p>
<p>2019 年 8 月 24 日 第 7 章 民族主义：无法解决全球性问题</p>
<p>即便整个地球已经统一，如果只是希望能够歌颂自己国家的独特性、强调自己对本国依然有一份特殊的义务，这样的爱国主义也必定能被人接受。</p>
<p>2019 年 8 月 24 日 第 7 章 民族主义：无法解决全球性问题</p>
<p>在过去的几个世纪中，之所以需要塑造“国家”这种身份认同，是因为人们面临的问题和机会远远超出地方部落能够处理的范围，唯有通过国家规模的合作才有望解决和把握。在 21 世纪，各个国家发现自己的情况如同过去的部落：“国家”这种架构不再足以应对这个时代最重要的种种挑战。我们需要一个新的全球身份认同，才能处理这一系列前所未有的全球困境。我们现在已经有了全球生态、全球经济、全球科学，只剩下政治还卡在国家层面。在层面上无法搭配，也就让政治系统无法有效地解决人类的重大问题。想要让政治有效地发挥作用，只有两种选择：要么让生态、经济和科学的进步“去全球化”，要么让政治“全球化”。既然生态和科学进步已经不可能“去全球化”，而且让经济“去全球化”的成本极高，政治全球化也就成了唯一有效的方法。</p>
<p>2019 年 8 月 24 日 第 8 章 宗教：神祇只是为国家服务</p>
<p>如果说现代经济就像一栋大楼，那么宗教对它唯一的改变大概就是重新刷漆，再在屋顶装一个大大的十字架、新月、大卫之星或“唵”的标志。</p>
<p>2019 年 9 月 4 日 第 9 章 文化认同：开放与宽容</p>
<p>这个讨论的根本问题，在于个人和整体对于时间长短的感受不同。从人类整体的角度来看，40 年并不长。想要期望社会在几十年内完全吸收并接纳某些外来的群体，无异于缘木求鱼。历史上确实有一国文明将外国人同化、视之为平等公民的例子，例如，罗马帝国、伊斯兰哈里发、中国和美国，但这些转型都花了几个世纪，而不是短短几十年。</p>
<p>2019 年 9 月 4 日 第 9 章 文化认同：开放与宽容</p>
<p>在所有这些讨论的背后，还潜藏着更根本的问题，涉及我们对人类文化的理解。当我们讨论移民问题的时候，究竟是假设所有文化在本质上都平等，还是认为某些文化可能比其他文化更优越？当德国人讨论接收 100 万个叙利亚难民的时候，如果认为德国文化在某些方面优于叙利亚文化，是否有道理？<br>文化之间的互相尊重很容易，但是追求平等私以为是无稽之谈。<br>换个角度，种族主义还存在，那就不可能追求平权</p>
<p>2019 年 9 月 9 日 第 9 章 文化认同：开放与宽容</p>
<p>两个例子看起来都有种族主义的嫌疑，其实都不是种族主义，而只是“文化主义”。人类现在还在英勇地对抗着传统的种族主义，却没发现战场已经转移。传统的种族主义正在消逝，现在满世界都是“文化主义者”。<br>2019 年 9 月 11 日 第 9 章 文化认同：开放与宽容</p>
<p>文化主义的许多主张都有三个常见的理论漏洞。第一，文化主义者常把地方优势与客观优势混为一谈</p>
<p>2019 年 9 月 11 日 第 9 章 文化认同：开放与宽容</p>
<p>第二，针对明确的时间、地点及衡量标准，就实际经验而言，文化主义的种种主张可能很合理，但如果让主张过于笼统，就没道理了</p>
<p>2019 年 9 月 11 日 第 9 章 文化认同：开放与宽容</p>
<p>第三，文化主义主张最大的问题在于，虽然这些主张都属于统计性质，但经常被拿来对个人做出预先判断</p>
<p>2019 年 9 月 11 日 第 9 章 文化认同：开放与宽容</p>
<p>欧洲究竟能否找出中间路线，既能继续向陌生人敞开大门，又不会被价值观不同的人影响其稳定，目前还很难说。如果欧洲能够找到这样一条道路，同样的公式就能复制到全球使用。如果欧洲失败了，也就代表仅靠相信自由和宽容的自由主义价值观，还不足以解决世界上的文化冲突，也无法在面临核战争、生态崩溃和科技颠覆时让人类团结起来</p>
<p>2019 年 9 月 11 日 第 10 章 恐怖主义：切忌反应过度</p>
<p>正如“恐怖主义”一词的字面含义所示，这种军事策略意图通过传播恐惧改变政治局势，而不是为了带来实质伤害。会运用这种策略的，几乎都是力量弱小、无法对对手造成重大伤害的人。当然，所有军事行动都会传播恐惧，但在传统战争中，恐惧只是实质伤害的副产品，通常与造成伤害的力量成正比。而在恐怖主义中，恐惧就是主角，恐怖分子的真正实力与其所激发的实际恐惧完全不成比例</p>
<p>2019 年 9 月 11 日 第 10 章 恐怖主义：切忌反应过度</p>
<p>国家体制创造了一个没有政治暴力的巨大空间，结果就像装了回音板，即便再小的政治暴力声音，也会被回音板放大。一个国家里的政治暴力越少，公众受到恐怖主义行为的冲击就越大。恐怖分子在比利时杀几个人得到的关注，会比在尼日利亚或伊拉克杀害几百人得到的关注多。这也就形成一种矛盾：正因为现代国家防止政治暴力事件过于成功，反而特别容易受到恐怖主义的影响</p>
<p>2019 年 9 月 11 日 第 11 章 战争：永远不要低估人类的愚蠢</p>
<p>到 21 世纪，为什么各大强权想要打一场成功的战争竟如此困难？原因之一在于经济本质的改变</p>
<p>2019 年 9 月 11 日 第 11 章 战争：永远不要低估人类的愚蠢</p>
<p>在 20 世纪 30 年代，日本的将领、经济学家和新闻工作者都认为，如果无法夺下朝鲜、中国东北和沿海地区，日本经济注定会陷入停滞。8 他们都错了，事实上，日本著名的经济奇迹是在日本输掉了所有对其他国家的侵略战争之后才开始的。<br>日本发动战争是因为经济发展停滞和军国主义崛起，从这一点看战争无法避免。而战后日本的经济繁荣是因为战争重塑了日本的经济社会，并且依靠另一场战争才完成了经济腾飞。</p>
<p>2019 年 9 月 11 日 第 11 章 战争：永远不要低估人类的愚蠢</p>
<p>另一方面，一心认为战争不可能发生也过于天真。即便战争对每个人来说都绝对是一场灾难，也没有任何神祇或自然法则足以阻止人类的愚蠢行径。</p>
<p>2019 年 9 月 11 日 第 11 章 战争：永远不要低估人类的愚蠢</p>
<p>想治疗人类的愚蠢，办法之一可能就是加点儿谦逊。人一旦认为自己的国家、宗教和文化是全世界最重要的，就会认为自身利益比任何人甚至全人类还重要，于是让各个国家、宗教和文化间的关系变得更加紧张</p>
<p>2019 年 9 月 13 日 第 12 章 谦逊：地球不是绕着你转</p>
<p>而在所有形式的谦逊当中，或许最重要的就是在神的面前谦逊。每次讲到神，人们往往都自称卑微，但转头就以神之名，对同胞颐指气使</p>
<p>2019 年 9 月 13 日 第 14 章 世俗主义：面对你的不完美</p>
<p>世俗主义最重视的就是“真相”（truth）。这里的真相必须基于观察和证据，而非只单纯依靠信仰</p>
<p>2019 年 9 月 13 日 第 14 章 世俗主义：面对你的不完美</p>
<p>当然，世俗主义的各种伦理准则既然没有某些绝对必须遵守的神旨诫命，实行上也就常常面临各种困境。如果某个行为会伤害某个人，但对另一个人有利，该怎么办？对富人多征税来帮助穷人，是否合乎道德？我们能不能发动一场血腥的战争，以消灭某个残暴的独裁者？我们是否该不限人数，让所有难民都进入我们的国家？世俗主义碰上的这些问题，并不会问“神的指示是什么”，而是仔细权衡其中各方的感受，检查各种观察结果和可能性，找出造成伤害最少的中间路线。<br>此言得之</p>
<p>2019 年 9 月 13 日 第 14 章 世俗主义：面对你的不完美</p>
<p>重视真相、重视同情，带出了世俗主义所看重的第三点：平等（equality）</p>
<p>2019 年 9 月 13 日 第 14 章 世俗主义：面对你的不完美<br>对于世俗主义的社会和制度来说，他们会十分乐意承认这些连接，也愿意拥抱虔诚的犹太人、基督徒、穆斯林和印度教徒。但有一个前提条件：若世俗主义的规则与宗教教义发生冲突，宗教教义必须让步</p>
<p>2019 年 9 月 13 日 第 14 章 世俗主义：面对你的不完美</p>
<p>曾经，种种人权运动对抗着宗教偏见和人类暴君，精彩的论点攻守有据；现在，它要对抗的是过度的消费主义和科技乌托邦，就显得无力招架。</p>
<p>2019 年 9 月 13 日 第 14 章 世俗主义：面对你的不完美</p>
<p>每一种宗教、意识形态和信条都会有自己的阴影，而无论你遵守的是哪一种信条，都该看到自己的阴影，避免自己天真地相信“我们不会这样”</p>
<p>2019 年 9 月 17 日 第 15 章 无知：你知道的比你想象的少</p>
<p>群体思维和个人无知的问题，不仅影响普通选民和顾客，就连各国总统或企业负责人也难以幸免。这些人虽然可能有庞大的顾问团和情报机构，但不一定能让事情变得更好。统治世界的时候，要找出各种真相、真理难如登天</p>
<p>2019 年 9 月 17 日 第 15 章 无知：你知道的比你想象的少</p>
<p>你需要试试那些看来可能无法前进的路，走走那些好像是此路不通的胡同，为怀疑和无趣保留空间，让各种想法的种子慢慢萌芽、绽放。如果你没有可以浪费的时间，就永远找不到真相。</p>
<p>2019 年 9 月 17 日 第 15 章 无知：你知道的比你想象的少</p>
<p>因此，领导者面对的是双重限制：如果待在权力中心，对世界的看法就会极度扭曲；如果勇敢来到周围，又会浪费许多宝贵的时间。而且，情况只会日益恶化。在未来几十年间，世界将变得比现在更加复杂。无论你是国王还是小兵，任何人类个体都会越来越不了解塑造世界的各种科技装备、经济潮流和政治动力。正如苏格拉底在 2000 多年前就已经观察到的，在这种情况下，我们最好的选择就是承认自己的无知</p>
<p>2019 年 9 月 17 日 第 16 章 正义：人类的道德困境</p>
<p>目前整个社会系统架构的方式，让那些不喜欢费力了解事实真相的人得以维持幸福的无知状态，而想要努力了解事实真相的人则需要历经诸多艰难</p>
<p>2019 年 9 月 17 日 第 16 章 正义：人类的道德困境</p>
<p>我们可以用“意图道德”（morality of intentions）的概念来回避这个问题：重要的是我的意图，而不是我的实际行动及其结果。但在这个一切都紧密联系的世界中，最重要的道德义务其实就是人必须要“知道”各种事</p>
<p>2019 年 9 月 17 日 第 16 章 正义：人类的道德困境</p>
<p>对于那些不真诚求知的人来说，他们的意图是有缺陷的。</p>
<p>2019 年 9 月 17 日 第 16 章 正义：人类的道德困境</p>
<p>令人痛苦的事实是：对于仍停留在狩猎采集者时期的人脑来说，世界已经变得太复杂了。</p>
<p>2019 年 9 月 17 日 第 16 章 正义：人类的道德困境</p>
<p>当讨论全球性问题的时候，我经常犯的错就是只看到全球精英阶层的观点，而忽略了各种弱势群体的想法。全球精英掌控了话语权，因此我们不可能错过他们的观点。但相较之下，弱势群体通常会遭到禁声，我们也就很容易遗忘他们。并非我们真的有恶意，而只是由于纯粹的无知。</p>
<p>2019 年 9 月 17 日 第 16 章 正义：人类的道德困境</p>
<p>面对规模如此庞大的道德问题，人类为了理解和判断，有下列 4 种常用的方法。第一是缩小问题规模</p>
<p>2019 年 9 月 17 日 第 16 章 正义：人类的道德困境</p>
<p>第二是把重点集中在某个感人的故事，用它来代表整个冲突事件</p>
<p>2019 年 9 月 17 日 第 16 章 正义：人类的道德困境</p>
<p>第三种方法是编出各种阴谋论</p>
<p>2019 年 9 月 17 日 第 16 章 正义：人类的道德困境</p>
<p>以上三种方法，都是拒绝面对世界究竟有多复杂。而第四种，也是最后一种方法，则是创造出一套教条，全然相信某种号称全知的理论、机构或领导，接着便无条件地跟随。宗教和意识形态教条之所以在这个科学时代仍然深具吸引力，正是因为它们提供了一个避风港，让我们得以避免面对令人沮丧的复杂现实</p>
<p>2019 年 9 月 17 日 第 17 章 后真相时代：谎言万世永存</p>
<p>事实上，智人之所以能够征服地球，最重要的因素就在于创造并传播虚构故事的独特能力。人类是唯一能与众多陌生个体合作的哺乳动物，原因就在于只有人类能够创造虚构故事，并且把这些故事流传出去，让几百万人相信。只要每个人都相信同样的故事、遵守同样的法律，就能有效地彼此合作。</p>
<p>2019 年 9 月 17 日 第 17 章 后真相时代：谎言万世永存</p>
<p>对人类这个物种来说，喜欢权力过于真相。我们把比较多的时间和精力拿来努力控制世界，而非努力理解世界；而且就算我们努力理解世界，通常也是为了事后更容易地控制世界</p>
<p>2019 年 9 月 19 日 第 17 章 后真相时代：谎言万世永存</p>
<p>第一条黄金法则：如果你想得到可靠的信息，必然要付出昂贵的代价。如果你总是免费得到信息，有可能你才是整个商业世界的产品</p>
<p>2019 年 9 月 19 日 第 17 章 后真相时代：谎言万世永存</p>
<p>第二条黄金法则：如果觉得某些问题似乎对你特别重要，就该真正努力阅读相关的科学文献</p>
<p>2019 年 9 月 19 日 第 18 章 未来不是科幻小说：无法逃离的母体</p>
<p>同样，我们现在对于“资本主义”这个现代神话的信仰，也是由好莱坞和流行产业的艺术创作在支撑。我们相信买更多东西就会更开心，是因为在电视上亲眼见过资本主义的天堂。</p>
<p>2019 年 9 月 19 日 第 18 章 未来不是科幻小说：无法逃离的母体</p>
<p>这些小说常常过度担心机器人与人类之间可能开战，但事实上我们真正该担心的，是有一小群超人类精英凭借算法带来的力量，与大量底层的手无权力的智人之间发生冲突</p>
<p>2019 年 9 月 19 日 第 18 章 未来不是科幻小说：无法逃离的母体</p>
<p>任何讲人工智能的电影只要把人工智能设定为女性，把科学家设定为男性，这部电影真正讨论的就很可能是女权主义，而非对智能机器人的控制论（cybernetics）</p>
<p>2019 年 9 月 23 日 第 19 章 教育：改变是唯一不变的事</p>
<p>然而，我们并不知道 2050 年的世界和就业市场会是什么模样，所以我们也不会知道人类需要哪些特定的技能</p>
<p>2019 年 9 月 23 日 第 19 章 教育：改变是唯一不变的事</p>
<p>重要的是能够随机应变，学习新事物，在不熟悉的环境里仍然保持心智平衡。想跟上 2050 年的世界，人类不只需要发明新的想法和产品，最重要的是得一次又一次地重塑自己。</p>
<p>2019 年 9 月 23 日 第 19 章 教育：改变是唯一不变的事</p>
<p>想在这样的世界过得顺风顺水，需要心态非常灵活、情感极度平衡。人类将不得不一再放弃某些自己最熟悉的事物，并要学会与未知和平相处。但麻烦的是，教孩子拥抱未知、保持心态平衡，比教他们物理公式或第一次世界大战的起因要困难许多。人的韧性光靠读书听课是培养不出来的。现在的教师多半也是旧教育系统下的产物，通常他们自己的心态也都不够灵活。</p>
<p>2019 年 9 月 23 日 第 19 章 教育：改变是唯一不变的事</p>
<p>但 21 世纪不一样。变化的脚步越来越快，你永远无法知道，大人告诉你的到底是永恒的智慧，还是过时的偏见。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>我们真正的经历，有 99%都不会成为这些自我故事的一部分。 特别值得一提的是，我们对自我的理想故事常常是视觉的，而实际的体验却是肉体的</p>
<p>2019 年 9 月 24 日 第 20 章 意义：人生不是虚构的故事</p>
<p>生命循环是将宇宙大戏视为一种周而复始、不断循环的故事。对于辛巴和阿朱那来说，狮子吃羚羊、战士打仗，都是永远不变的事，会持续千秋万代。这种故事的力量就来自这种永恒的重复，仿佛说世界的自然规律就是如此，如果阿朱那逃避战斗，或者辛巴拒绝成为狮子王，就是在对抗自然法则。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>如果只是要为自己打造一个行得通的身份认同，为自己的人生赋予意义，我并不需要一个绝无盲点、毫无内部矛盾的完整故事，只要能符合两个条件就行。第一，我在这个故事里至少要扮演某种角色。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>第二，一个好的故事所讨论的范畴不一定要无穷无尽，但至少要能够延伸到超出我自己的视界。<br>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事<br>比如可以开始细细地描述，如果这头大象扇动它的大耳朵，就会引发飓风；如果这头大象生气地抖了抖身子，就会造成地震。只要障眼法足够好，听众就不会在意大象站在什么地方。同样，民族主义也有障眼法，用各种英勇的故事令我们着迷，用各种过去的灾难令我们涕泣，再用国家遭受到的种种不公不义令我们愤怒不已。到最后，我们如此相信这个国家的史诗故事，于是无论看到世界上发生什么事，第一个想到的就是这对我们的国家有什么影响，压根儿就没想到要话说从头，讨论一下究竟为什么我们的国家这么有意义</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>讲故事的一项关键法则就是讨论范畴只要已经超过观众的视界，真正的最终范畴大小几乎不会造成任何影响。不管是为了某个只有千年历史的国家，或是为了某个号称有 10 亿岁的神，信众杀起人来的狂热有可能不相上下。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>人生如同一部永无止境的史诗，虽然是一种很普遍也很吸引人的说法，但有两大问题。第一，不管人生的故事可以延续多长，也不见得更有意义，只是比较长而已。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>这种理论的第二个问题在于缺乏证据支持。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>这样一来，人生的意义就像是玩着已经拉开引信的手榴弹，传给别人，你就没事了。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>既然他们没有留下任何资料，要说他们所追求的人生意义是这个或那个，实在太容易了，而他们甚至连起身抗议的权利都没有。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>事实上，你爱的只是一个人，而相较于其他每天在火车上或超市里擦肩而过的人，这个人的本质并无不同。但对你来说，这个人似乎就是无穷无尽的宇宙，而你也愿意在那无穷无尽的宇宙中失去自我。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>然而，如果你不在爱河里，又该怎么办？如果你还是相信这套“爱”的故事，只是自己不在爱里，至少你已经知道自己的人生目标了：寻找真爱。而且你已经在无数的电影里看过爱，也在无数的著作中读过爱，你知道自己总有一天会遇到那个特别的人，在那双眼眸中你看到无限的光芒在闪烁，让你的人生突然充满意义，你所有曾有过的问题，都只要一再呼唤着一个名字，就能得到解答，一如《西区故事》里的托尼，或者看到朱丽叶正从阳台俯视自己的罗密欧。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>如果你想问人生有何真正的意义，而对方是用一个故事来回答你，这个答案肯定是错的。故事细节如何并不会有所区别，任何故事，都一定是错的。原因在于，宇宙绝不是以故事的方式运作。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>多数故事之所以仍能屹立不倒，靠的并不是稳固的地基，而是屋顶的重量。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>如果个人身份认同和整个社会系统都是以某个故事为基础，就很难再去质疑这个故事。原因并不是这个故事证据齐全，而是因为一旦崩溃就会引发个人和社会的灾难。在历史上，屋顶有时比地基更重要。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>如果想知道生命的终极真相，礼仪和仪式会是个巨大的障碍。但如果你想知道的是如何达到社会的稳定与和谐（就像孔子那样），真相往往只是一种负担，而礼仪和仪式反而是你最好的伙伴。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>究竟为什么，印度政府要把资源拿来升起巨大的国旗，而不是在德里的贫民窟建造污水处理系统？原因就在于这面国旗可以让印度变得“真实”，而这是污水处理系统做不到的。</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>在所有的仪式中，献祭是最有力的一种，因为虽然世事百态，但痛苦这种感觉最为真实，无法忽视，不容怀疑。想让别人相信某个虚构的故事，就要引诱他们先为此做出牺牲。等到你因为某个故事而承受了痛苦，通常就足以让你相信这个故事是真实的</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>但实际上，一神论所引发的人类献祭，比起大多数多神论引发的规模远远有过之而无不及</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>法西斯主义怎么判断艺术？法西斯主义怎么知道一部电影是好还是坏？非常简单，只有一个标准。电影符合国家利益，就是一部好电影，不符合国家利益，就是一部坏电影。法西斯主义怎么决定学校该教孩子什么？一样的标准：符合国家利益的，就该教。真相？那不重要</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>真实世界中的邪恶不见得是丑陋的，而有可能看起来非常美丽</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>这里有些事没有道理。如果那些遭法军空袭而死的殉教者都上了天堂，为什么要复仇呢？复的到底是什么仇？把人送上天堂吗？如果听说你的好兄弟买彩票中了 100 万美元，难道你会去自杀式攻击彩票投注站，说要复仇？那么，为什么法国空军让你的几个弟兄拿到去天堂的单程机票，你却要气呼呼的呢？而且，如果你真的让法国不再继续空袭叙利亚，能上天堂的穆斯林不就少了吗？这样岂不更糟？</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>是人类自己的手指，写下了《圣经》、《古兰经》和《吠陀经》，也是我们的心灵，让这些故事拥有了力量。当然，这些都是很美的故事；但所谓的美，是看的人觉得美就是美</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>不是宇宙给我意义，而是我为宇宙赋予意义。这正是我在宇宙里的任务，没有什么固定的命运或正道</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>人类自我探索的过程是从简单的事开始的，然后越来越难。一开始，我们发现自己无法控制外在的世界，比如没办法控制什么时候下雨。接着，我们发现自己身体里的事也没办法控制，比如我没办法控制自己的血压。再后来，我们发现就连大脑也无法控制，比如我并没告诉神经元什么时候要发出信号。到头来我们就该认清，我们就是无法控制自己的欲望，甚至无法控制对欲望的反应</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>想要了解自己，关键的一步就是要承认“自我”也是个虚构的故事，会通过心智思维的复杂机制，不断制造、更新和重写。我脑中有个讲故事的人，会解释我是谁、来自哪里、要去往何方，以及现在发生了什么事</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>因此，如果你真想了解自己，并不该相信你的社交账号，或者内心告诉你的那个故事，而是要观察身体和心智的实际流动。你会发现，种种想法、情绪和欲望的来去没有理由，也由不得你命令，就像是来自四面八方的风，吹乱了你的头发。你既不是风，也不是你体验到的那些想法、情绪和欲望，当然更不是你心中以事后之明整理消毒过的那些故事</p>
<p>2019 年 9 月 25 日 第 20 章 意义：人生不是虚构的故事</p>
<p>根据佛教的说法，宇宙有三个基本现实：一切事物都会不断改变（诸行无常），一切事物都没有永恒的本质（诸法无我），没有什么能永远令人满意（诸漏皆苦）</p>
<p>2019 年 9 月 26 日 第 20 章 意义：人生不是虚构的故事</p>
<p>所以，只要政客的话语开始掺杂一些神秘的语词，就该提高警惕。面对真实的痛苦，这些人可能会用某些空泛难解的表达来加以包装，作为申辩。其中有四个词要特别小心：牺牲、永恒、纯净、恢复。只要听到其中任何一个，心中就该警铃大作</p>
<p>2019 年 9 月 26 日 第 20 章 意义：人生不是虚构的故事</p>
<p>所以，如果真想知道宇宙的真相、人生的意义、自己的身份，最好的出发点就是开始观察痛苦、探索痛苦的本质<br>所有摘录来自</p>
<p>[以色列] 尤瓦尔·赫拉利. “今日简史：人类命运大议题.” 中信出版集团, 2018-08-19T16:00:00+00:00. Apple Books.<br>此材料受版权保护。</p>
<h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从 2019 年伊始,我就一直处在编写代码和学习课程的无限循环之中,以至于我总有这样一种感觉,我的思维虽然依旧活跃,但是它被圈定在了一个固定的界限之内–我总会习惯性地去用”程序员”的思维与视角去衡量一些事物;而当我每次想要悠闲地去享受一下午后的阳光时,总有一个声音在催促我赶紧回归快节奏的工作.</p>
<p>过于单一的视角必然造成思维的定势与狭隘,因为人生不是由单极所构成,也没有任何一个单极能够以一己之重量倾斜人生的天平.所以,在暑假,我重新阅读了&lt;文化苦旅&gt;.并且开始阅读&lt;娜塔莎之舞&gt;和本篇的主角–&lt;今日简史&gt;.</p>
<p>优秀的散文能够陶冶净化心灵,而优秀的社论则能够搅动这一潭思维的死水,使其重新具备包容和灵性.</p>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><blockquote>
<p>这本书，我希望着眼于此时此地，重点在于当下时事，以及人类社会近期的未来。现在正在发生什么事？今天最大的挑战和选择是什么？我们该注意什么？我们该教给孩子们什么？</p>
</blockquote>
<p>这本书的前半部分给我的感觉就是惊艳.虽然我也曾对未来的世界有过很多的遐想,但是尤瓦尔高屋建瓴,凭借他丰富的知识与敏锐的历史嗅觉,将我的那些片段式的畅想一一补全.<br>从人工智能再到生物革命,尤其是最后关于社会阶层的讨论,从人类的历史来推演人类的未来,读起来当真是令人酣畅淋漓.<br>也是因为受到他的影响,所以我的统计学作业也就以此为选题,尤瓦尔仅仅从理论上证明了这个问题存在的必然性,所以我想通过对数据的挖掘与分析来证明这个问题存在的合理性.</p>
<p>我也认为阶层的划分存在必然性,但是我觉得尤瓦尔过于悲观了.<br>人类最终不会像他所想的那样分裂为超人和智人两个种族.<br>就目前而言,虽然生物研究的伦理枷锁在不断地试探中逐渐分崩,甚至我们有足够的理由相信在我们所不知道的灰色地带,关于人类本身的研究正在紧锣密鼓地进行着,但是这些始终是上不得台面的东西.<br>一部分人获得了利益,这必然牺牲了另一部分人的利益.在上层社会找到一个能够让整个阶层信服的解决方案之前,没有人会莽撞地撕破这一层薄纱.<br>这个解决方案,我觉得,最大的可能是像二战时的日本一样,将宗教\民族主义\政治\愚民教育进行一个大杂烩.以宗教给人们生存的希望;以民族主义麻痹人们的神经;以愚民教育堕落人们的追求;以政治来进行<br>铁腕统治.</p>
<p>这在中国的历史上也是可以找到理论支撑的.自汉以后,儒家成为正统思想,教导人们要”忠君”;自唐以后,佛教大兴,本质上是因为佛教告诉人们,你这一世受的苦,会在下一世得到回报,于是这一世的苦难也就不显得那么苦难了,君不见,唐朝中后期糜烂至斯,又有几人能够再次高喊出”王侯将相宁有种乎?”;再后来,粮食作物的引进使得人民的温饱问题大大改善,理论上社会已经满足了维持稳定的条件,于是朝代更迭的方式从内部革命变成了民族斗争.<br>这就是历史演绎,现在,乃至于未来,无论发展多么迅速,多么不可思议,但是,只要仍然是以人为核心,那么一切都是有迹可循的,因为人,禀性难移.</p>
<p>以上不过是我的一家之言.<br>一旦他们找到了这样一套解决方案,那么世界的未来就真的不可知了.理论上,少部分的人会占据世界上的大部分资源,但是,那剩下来的大部人,同样有着破坏这些资源的能力.如果理智取胜,那么世界将会被一个类似于集权封建但是一定会被冠以一个更美好的名字的制度所统治;如果理智失败,那么可以预见的就是不断地战争,直到地球被完全破坏或者双方得出一个令大家都满意的答案为止的战争.<br>当然,以上也只不过是我的一家之猜想罢了.</p>
<p>书的后半部分更是令人拍案.面对这样一个波澜壮阔的时代,如何去面对,如何去选择,不同的人有不同的回答,而尤瓦尔,很好的扮演了引路人这样一个角色.</p>
<p>我曾读&lt;万历十五年&gt;,黄仁宇说过,研究历史要有”大历史观”,并且他也直言,现在国内很多的历史学家都缺乏这种素质.读尤瓦尔的书,可以很明显地感觉到,他是拥有这个特质的.从东方到西方,从过去到未来,尤瓦尔的每一个论断都有着充足详实的理论依据,令人击节的同时,又发人深省.</p>
<h2 id="重新认识"><a href="#重新认识" class="headerlink" title="重新认识"></a>重新认识</h2><p>很多人向我阐述过他们的梦想,波澜壮阔,令人神往.<br>不过,我的梦想是什么?其实我已经很久没有仔细去考虑这个问题了,或者说我一直都在下意识地回避这个问题.我一直跟别人说自己没有什么梦想,但是,在今天,在这片灰色的天空下,我这些年来第一次开始认真地思考这个问题.<br>成为一个杰出的程序员?收获一段完美的爱情?赚很多的钱?我否决了一个又一个答案,最后忽然发现,我的梦想不在未来,而在过去,在现在;它很复杂,同时又非常的单一.<br>就像是很多人的支撑构成了我现在的生命,很多人的梦想构成了我的梦想.如同一块海绵,可以吸纳很多的水分,但是,海绵本身是没有水这一概念的.<br>仔细想想这好像是一件很怪异的事情.不过很快我又被另一件”怪异”的事情摄住了心神.<br>我此刻是在 5 楼的东面,从这个地方远眺,我看到的是连绵起伏的丘陵,深绿色的植被覆盖在大地上,好一副鸟语花香,怡然自乐的世外桃源的场面;但是,谁又能想到,就在这个教学楼的令一侧,从西面远眺,你所看见的,净是熙熙攘攘,为利竞逐的俗客,净是以铅灰色的钢筋混凝土浇筑的现代社会呢?<br>这强烈的冲突对比,我似有所悟.<br>有人周游列国,闻韶于齐,菜色陈蔡,终其一生而不得志;有人开国谋圣,却激流勇退,深藏功名;有人隐于竹林,穷途而哭,恣肆快意…<br>人生百年,韶华白首,不过转瞬,其中变数几何,又何必穷于一念.<br>念及至此,心下怅然,若有所得,若有所失.</p>
<blockquote>
<p>纵死侠骨香，不惭世上英。<br>–李白&lt;侠客行&gt;</p>
</blockquote>
]]></content>
      <categories>
        <category>桂苑酌记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
      </tags>
  </entry>
</search>
